// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: eDS10_ProtocolBuffer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from eDS10_ProtocolBuffer.proto</summary>
public static partial class EDS10ProtocolBufferReflection {

  #region Descriptor
  /// <summary>File descriptor for eDS10_ProtocolBuffer.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static EDS10ProtocolBufferReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChplRFMxMF9Qcm90b2NvbEJ1ZmZlci5wcm90byIuCgpBY2tNZXNzYWdlEiAK",
          "B3BheWxvYWQYASABKA4yDy5BY2tNZXNzYWdlVHlwZSJYCg5QYXlsb2FkTWVz",
          "c2FnZRITCgl1aW50X2RhdGEYASABKA1IABIUCgpmbG9hdF9kYXRhGAIgASgC",
          "SAASEwoLc3RyaW5nX2RhdGEYAyABKAlCBgoEZGF0YSJZCgpBeXRNZXNzYWdl",
          "EhUKDXRpbWVzaW5jZWJvb3QYASABKA0SEwoLdGVtcGVyYXR1cmUYAiABKAIS",
          "HwoEdGltZRgDIAEoCzIRLlRpbWVDbG9ja01lc3NhZ2Ui2wIKEkRldmljZVN0",
          "YXRlTWVzc2FnZRIOCgZ1cHRpbWUYASABKA0SDAoEdGVtcBgCIAEoAhIMCgR2",
          "YmF0GAMgASgCEiAKBWNsb2NrGAQgASgLMhEuVGltZUNsb2NrTWVzc2FnZRIS",
          "CgpuZXh0X2FsYXJtGAUgASgNEioKD25leHRfYWxhcm1fdGltZRgGIAEoCzIR",
          "LlRpbWVDbG9ja01lc3NhZ2USEwoLaW5wdXRfc3RhdGUYByABKA0SEwoLbGlz",
          "dF9zdGF0ZXMYCCADKA0SFgoOYnVybl9pbl9zdGF0ZXMYCSADKA0SFQoNc2Vu",
          "c29yX3N0YXRlcxgKIAMoDRITCgt6b25lX3N0YXRlcxgLIAMoDRIZChF6b25l",
          "X3NsZWVwX3N0YXRlcxgMIAMoDRIUCgx6b25lX2luZGV4ZXMYDSADKA0SGAoQ",
          "ZGFsaV9pbnB1dF9zdGF0ZRgOIAEoBCKHAQoOVHJpZ2dlck1lc3NhZ2USGgoE",
          "dHlwZRgBIAEoDjIMLlRyaWdnZXJUeXBlEgwKBHpvbmUYAiABKA0SEQoJbGlu",
          "ZV9tYXNrGAMgASgNEhQKDHRhcmdldF9pbmRleBgEIAEoDRINCgV2YWx1ZRgF",
          "IAEoDRITCgtxdWVyeV9pbmRleBgGIAEoDSIuChBUaW1lQ2xvY2tNZXNzYWdl",
          "EgwKBGRhdGUYASABKA0SDAoEdGltZRgCIAEoDSJTChFCdXJuSW5CaXRzTWVz",
          "c2FnZRITCgtsaWdodF9zdGF0ZRgBIAEoDRIUCgxydW5uaW5nX2ZsYWcYAiAB",
          "KA0SEwoLZW5hYmxlX2ZsYWcYAyABKA0ilwEKDklPSW5wdXRNZXNzYWdlEg0K",
          "BWluZGV4GAEgASgNEisKDGJ1dHRvbl9zdGF0ZRgCIAEoDjIVLlRyaWdnZXJP",
          "cGVyYXRpb25UeXBlEiQKC3Nob3J0X3ByZXNzGAMgASgLMg8uVHJpZ2dlck1l",
          "c3NhZ2USIwoKbG9uZ19wcmVzcxgEIAEoCzIPLlRyaWdnZXJNZXNzYWdlInwK",
          "D0lPT3V0cHV0TWVzc2FnZRINCgVpbmRleBgBIAEoDRIVCg1pbml0aWFsX2xl",
          "dmVsGAIgASgNEh4KFnRpbWVfdHJpZ2dlcl9pc19hY3RpdmUYAyABKA0SIwoE",
          "dHlwZRgEIAEoDjIVLlRyaWdnZXJPcGVyYXRpb25UeXBlIr0BChBEQUxJSW5w",
          "dXRNZXNzYWdlEg0KBWluZGV4GAEgASgNEg8KB2FkZHJlc3MYAiABKA0SEQoJ",
          "ZGFsaV9saW5lGAMgASgNEisKDGJ1dHRvbl9zdGF0ZRgEIAEoDjIVLlRyaWdn",
          "ZXJPcGVyYXRpb25UeXBlEiQKC3Nob3J0X3ByZXNzGAUgASgLMg8uVHJpZ2dl",
          "ck1lc3NhZ2USIwoKbG9uZ19wcmVzcxgGIAEoCzIPLlRyaWdnZXJNZXNzYWdl",
          "IkwKC0lPSVJNZXNzYWdlEg0KBWluZGV4GAEgASgNEh8KBmFjdGlvbhgCIAEo",
          "CzIPLlRyaWdnZXJNZXNzYWdlEg0KBWNvZGVzGAMgASgNIssECg1TZW5zb3JN",
          "ZXNzYWdlEg8KB3Byb2ZpbGUYASABKA0SDQoFaW5kZXgYAiABKA0SFgoOc2Vu",
          "c29yX2FkZHJlc3MYAyABKA0SGAoQc2Vuc29yX2RhbGlfbGluZRgEIAEoDRIV",
          "Cg1hZGRyZXNzX3F1ZXJ5GAUgASgNEhkKEWNvbnRyb2xfZGFsaV9saW5lGAYg",
          "ASgNEhUKDWNvbnRyb2xfZ3JvdXAYByABKA0SFgoObGlnaHRfc2V0cG9pbnQY",
          "CCABKA0SGAoQd2FybmluZ19zZXRwb2ludBgJIAEoDRITCgttb3Rpb25fb25s",
          "eRgKIAEoDRIWCg50aW1lb3V0X3ZhbHVlcxgLIAEoDRIWCg53YXJuaW5nX3Zh",
          "bHVlcxgMIAEoDRIWCg5kaXNhYmxlX3ZhbHVlcxgNIAEoDRISCgppbnB1dF8x",
          "X3BtGA4gASgNEhIKCmlucHV0XzJfcG0YDyABKA0SFQoNc2Vuc29yX3N0YXRl",
          "cxgQIAEoDRIWCg5tb3Rpb25fc2Vuc29ycxgRIAEoDRITCgtsdXhfc2Vuc29y",
          "cxgSIAEoDRIQCghvZmZfZmxhZxgTIAEoDRIVCg1pc19wcm9ncmFtbWVkGBQg",
          "ASgIEioKEWRldGVjdGlvbl90cmlnZ2VyGBUgASgLMg8uVHJpZ2dlck1lc3Nh",
          "Z2USKAoPd2FybmluZ190cmlnZ2VyGBYgASgLMg8uVHJpZ2dlck1lc3NhZ2US",
          "JQoMaWRsZV90cmlnZ2VyGBcgASgLMg8uVHJpZ2dlck1lc3NhZ2UiXAoPTGlz",
          "dFN0ZXBNZXNzYWdlEhIKCnN0ZXBfaW5kZXgYASABKA0SHwoGYWN0aW9uGAIg",
          "ASgLMg8uVHJpZ2dlck1lc3NhZ2USFAoMdGltZV9zZWNvbmRzGAMgASgNIrwD",
          "CgxBbGFybU1lc3NhZ2USDQoFaW5kZXgYASABKA0SDwoHZW5hYmxlZBgCIAEo",
          "CBIlCgpzdGFydF90aW1lGAMgASgLMhEuVGltZUNsb2NrTWVzc2FnZRIjCghl",
          "bmRfdGltZRgEIAEoCzIRLlRpbWVDbG9ja01lc3NhZ2USJgoNc3RhcnRfdHJp",
          "Z2dlchgFIAEoCzIPLlRyaWdnZXJNZXNzYWdlEiQKC2VuZF90cmlnZ2VyGAYg",
          "ASgLMg8uVHJpZ2dlck1lc3NhZ2USJAoLYXN0cm9fc3RhcnQYByABKA4yDy5B",
          "bGFybUFzdHJvVHlwZRIiCglhc3Ryb19lbmQYCCABKA4yDy5BbGFybUFzdHJv",
          "VHlwZRIgCgZyZXBlYXQYCSABKA4yEC5BbGFybVJlcGVhdFR5cGUSGgoScmVw",
          "ZWF0X2RheV9iaXRtYXNrGAogASgNEhwKFHJlcGVhdF9tb250aF9iaXRtYXNr",
          "GAsgASgNEg4KBnllYXJseRgMIAEoCBIeChZzdGFydF9vZmZzZXRfaXNfYmVm",
          "b3JlGA0gASgIEhwKFGVuZF9vZmZzZXRfaXNfYmVmb3JlGA4gASgIIpkBCg1C",
          "dXJuSW5NZXNzYWdlEg0KBWluZGV4GAEgASgNEgwKBGxpbmUYAiABKA0SDwoH",
          "YWRkcmVzcxgDIAEoDRIVCg1xdWVyeV9hZGRyZXNzGAQgASgNEgwKBHRpbWUY",
          "BSABKA0SEQoJcmVtYWluaW5nGAYgASgNEiIKBnN0YXRlcxgHIAEoCzISLkJ1",
          "cm5JbkJpdHNNZXNzYWdlIjoKFkV4dGVybmFsVHJpZ2dlck1lc3NhZ2USIAoH",
          "dHJpZ2dlchgBIAEoCzIPLlRyaWdnZXJNZXNzYWdlIkUKEUlucHV0TXVsdGlN",
          "ZXNzYWdlEg8KB3Byb2ZpbGUYASABKA0SHwoGaW5wdXRzGAIgAygLMg8uSU9J",
          "bnB1dE1lc3NhZ2UiSAoST3V0cHV0TXVsdGlNZXNzYWdlEg8KB3Byb2ZpbGUY",
          "ASABKA0SIQoHb3V0cHV0cxgCIAMoCzIQLklPT3V0cHV0TWVzc2FnZSJnChVE",
          "QUxJSW5wdXRNdWx0aU1lc3NhZ2USDwoHcHJvZmlsZRgBIAEoDRIaChJpbnB1",
          "dF9pbmRleF9vZmZzZXQYAiABKA0SIQoGaW5wdXRzGAMgAygLMhEuREFMSUlu",
          "cHV0TWVzc2FnZSI8Cg5JUk11bHRpTWVzc2FnZRIPCgdwcm9maWxlGAEgASgN",
          "EhkKA2lycxgCIAMoCzIMLklPSVJNZXNzYWdlIm8KC0xpc3RNZXNzYWdlEhIK",
          "Cmxpc3RfaW5kZXgYASABKA0SHgoEc3RlcBgCIAMoCzIQLkxpc3RTdGVwTWVz",
          "c2FnZRISCgpsaXN0X3N0YXRlGAMgASgNEhgKEHRvdGFsX3N0ZXBfY291bnQY",
          "BCABKA0iZAoTRXh0ZW5kZWRMaXN0TWVzc2FnZRISCgpsaXN0X2luZGV4GAEg",
          "ASgNEhkKEXN0ZXBfaW5kZXhfb2Zmc2V0GAIgASgNEh4KBHN0ZXAYAyADKAsy",
          "EC5MaXN0U3RlcE1lc3NhZ2UiMQoRQWxhcm1NdWx0aU1lc3NhZ2USHAoFYWxh",
          "cm0YASADKAsyDS5BbGFybU1lc3NhZ2UiNAoSQnVybkluTXVsdGlNZXNzYWdl",
          "Eh4KBmJ1cm5pbhgBIAMoCzIOLkJ1cm5Jbk1lc3NhZ2Ui5wEKDExvZ2ljTWVz",
          "c2FnZRINCgVpbmRleBgBIAEoDRIPCgdlbmFibGVkGAIgASgIEioKEWNvbXBh",
          "cmlzb25fb2JqZWN0GAMgASgLMg8uVHJpZ2dlck1lc3NhZ2USGAoQY29tcGFy",
          "aXNvbl92YWx1ZRgEIAEoDRItCg9jb21wYXJpc29uX3R5cGUYBSABKA4yFC5M",
          "b2dpY0NvbXBhcmlzb25UeXBlEiAKB2FjdGlvbkEYBiABKAsyDy5UcmlnZ2Vy",
          "TWVzc2FnZRIgCgdhY3Rpb25CGAcgASgLMg8uVHJpZ2dlck1lc3NhZ2UiMQoR",
          "TG9naWNNdWx0aU1lc3NhZ2USHAoFbG9naWMYASADKAsyDS5Mb2dpY01lc3Nh",
          "Z2UiWAoUU2Vuc29yQ29tbWFuZE1lc3NhZ2USDwoHY29tbWFuZBgBIAEoDRIN",
          "CgVpbmRleBgCIAEoDRIgCgR0eXBlGAMgASgOMhIuU2Vuc29yQ29tbWFuZFR5",
          "cGUiJwoUQ2hhbmdlUHJvZmlsZU1lc3NhZ2USDwoHcHJvZmlsZRgBIAEoDSIq",
          "Cg9JZGVudGlmeU1lc3NhZ2USCwoDTUFDGAEgASgEEgoKAklQGAIgASgEIjQK",
          "EVVwZGF0ZVRpbWVNZXNzYWdlEh8KBHRpbWUYASABKAsyES5UaW1lQ2xvY2tN",
          "ZXNzYWdlImUKEVJlYWREZXZpY2VNZXNzYWdlEg8KB3Byb2ZpbGUYASABKA0S",
          "FwoEdHlwZRgCIAEoDjIJLlJlYWRUeXBlEg0KBWluZGV4GAMgASgNEhcKD3Nl",
          "Y29uZGFyeV9pbmRleBgEIAEoDSIuChtTZWN1cmVEZXZpY2VTZXR0aW5nc01l",
          "c3NhZ2USDwoHcGF5bG9hZBgBIAEoCSIgChFEVFJQYXlsb2FkTWVzc2FnZRIL",
          "CgNkdHIYASADKA0itQMKC0RBTElNZXNzYWdlEhEKCWxpbmVfbWFzaxgBIAEo",
          "DRIPCgdhZGRyZXNzGAIgASgNEhYKDGZyYW1lXzI1X2JpdBgDIAEoDUgAEhwK",
          "EmZyYW1lXzI1X2JpdF9yZXBseRgEIAEoDUgAEiMKB2NvbW1hbmQYBSABKA4y",
          "EC5EQUxJQ29tbWFuZFR5cGVIABIwCg5jdXN0b21fY29tbWFuZBgGIAEoDjIW",
          "LkN1c3RvbURBTElDb21tYW5kVHlwZUgAEh8KBXF1ZXJ5GAcgASgOMg4uREFM",
          "SVF1ZXJ5VHlwZUgAEiIKBXR5cGU4GAggASgOMhEuVHlwZThDb21tYW5kVHlw",
          "ZUgAEhYKDGZyYW1lXzE2X2JpdBgLIAEoDUgAEhwKEmZyYW1lXzE2X2JpdF9y",
          "ZXBseRgMIAEoDUgAEhYKDGZyYW1lXzI0X2JpdBgNIAEoDUgAEhwKEmZyYW1l",
          "XzI0X2JpdF9yZXBseRgOIAEoDUgAEg0KA2FyZxgJIAEoDUgBEiEKA2R0chgK",
          "IAEoCzISLkRUUlBheWxvYWRNZXNzYWdlSAFCCAoGYWN0aW9uQggKBnBhcmFt",
          "cyI3ChVEQUxJU3RhdHVzRmxhZ01lc3NhZ2USHgoFZmxhZ3MYASADKA4yDy5E",
          "QUxJU3RhdHVzVHlwZSK8AQoRREFMSVF1ZXJ5UmVzcG9uc2USLgoMc3RhdHVz",
          "X2ZsYWdzGAEgASgLMhYuREFMSVN0YXR1c0ZsYWdNZXNzYWdlSAASHwoEZGF0",
          "YRgCIAEoCzIPLlBheWxvYWRNZXNzYWdlSAASJAoJZGFsaV9mbGFnGAMgASgO",
          "MhEuREFMSVJYU3RhdHVzRmxhZxIlCgxyZXBvbnNlX2RhdGEYBCABKAsyDy5Q",
          "YXlsb2FkTWVzc2FnZUIJCgdwYXlsb2FkIqoBChVEQUxJQWRkcmVzc2luZ01l",
          "c3NhZ2USIQoEdHlwZRgBIAEoDjITLkRBTElBZGRyZXNzaW5nVHlwZRIWCg5p",
          "bml0aWFsaXNhdGlvbhgCIAEoCBIRCglsaW5lX21hc2sYAyABKA0SDwoHaXMy",
          "NEJpdBgEIAEoCBIjCgVlcnJvchgFIAEoDjIULkRBTElBZGRyZXNzaW5nRXJy",
          "b3ISDQoFaW5kZXgYBiABKA0iZAoUREFMSVJlbWFwcGluZ01lc3NhZ2USFAoM",
          "ZnJvbV9hZGRyZXNzGAEgASgNEhIKCnRvX2FkZHJlc3MYAiABKA0SEQoJbGlu",
          "ZV9tYXNrGAMgASgNEg8KB2lzMjRCaXQYBCABKAgifAoKRE1YTWVzc2FnZRIM",
          "CgR6b25lGAEgASgNEhUKDXVuaXZlcnNlX21hc2sYAiABKA0SDwoHY2hhbm5l",
          "bBgDIAEoDRIOCgZyZXBlYXQYBCABKA0SDQoFbGV2ZWwYBSADKA0SGQoRZmFk",
          "ZV90aW1lX2J5XzEwbXMYBiABKA0ibwoKUkRNTWVzc2FnZRIVCg11bml2ZXJz",
          "ZV9tYXNrGAEgASgNEgsKA3VpZBgCIAEoBBILCgNwaWQYAyABKA0SDgoGZ2V0",
          "c2V0GAQgASgNEhIKCmRhdGFsZW5ndGgYBSABKA0SDAoEZGF0YRgGIAMoDSJQ",
          "ChJSRE1SZXNwb25zZU1lc3NhZ2USCwoDdWlkGAEgASgEEgsKA3BpZBgCIAEo",
          "DRISCgpkYXRhbGVuZ3RoGAMgASgNEgwKBGRhdGEYBCADKA0i3wIKFVNwZWt0",
          "cmFTZXR0aW5nTWVzc2FnZRIMCgR6b25lGAEgASgNEhUKDXN0YXJ0X2FkZHJl",
          "c3MYAiABKA0SHQoVbGluZV9vcl91bml2ZXJzZV9tYXNrGAMgASgNEhAKCHBy",
          "b3RvY29sGAQgASgNEhgKEG51bWJlcl9vZl9saWdodHMYBSABKA0SGgoSY2hh",
          "bm5lbHNfcGVyX2xpZ2h0GAYgASgNEhcKD2NoYW5uZWxfY29sb3VycxgHIAMo",
          "DRI/ChV1bnNjaGVkdWxlZF9iZWhhdmlvdXIYCCABKA4yIC5TcGVrdHJhVW5z",
          "Y2hlZHVsZWRCZWhhdmlvdXJUeXBlEhcKD2NoYW5uZWxfbWFwcGluZxgJIAMo",
          "DRIsCg9saW5lX2FkZHJlc3NpbmcYCiABKA4yEy5MaW5lQWRkcmVzc2luZ1R5",
          "cGUSGQoRem9uZV9zY2FsZV9mYWN0b3IYCyABKAIiMwoaU3Bla3RyYUNvbG91",
          "ckNvbmZpZ01lc3NhZ2USFQoNY2hhbm5lbF92YWx1ZRgBIAMoDSLoAwocU3Bl",
          "a3RyYVNlcXVlbmNlQ29uZmlnTWVzc2FnZRINCgVpbmRleBgBIAEoDRIMCgR0",
          "eXBlGAIgASgNEioKCnRyYW5zaXRpb24YAyABKA4yFi5TcGVrdHJhVHJhbnNp",
          "dGlvblR5cGUSGQoRZmFkZV90aW1lX2J5XzEwbXMYBCABKA0SFwoPdGltZV9w",
          "ZXJfY29sb3VyGAUgASgNEhwKFHRpbWVfcGVyX2NvbG91cl91bml0GAYgASgN",
          "EhUKDXRpbWVfcGVyX3N0ZXAYByABKA0SGgoSdGltZV9wZXJfc3RlcF91bml0",
          "GAggASgNEg0KBXJhbmdlGAkgASgNEg4KBmNvbG91chgKIAMoBBIaChJpc19y",
          "YW5kb21pc2VkX3R5cGUYCyABKA0SGQoRcmFuZG9tX3R5cGVzX21hc2sYDCAB",
          "KA0SHAoUaXNfcmV2ZXJzZV9kaXJlY3Rpb24YDSABKA0SGgoSaXNfY3ljbGVf",
          "ZGlyZWN0aW9uGA4gASgNEg0KBXRpdGxlGA8gASgJEh8KF2hhc19yYW5kb21f",
          "Y29sb3VyX29yZGVyGBAgASgIEiwKB2NvbG91cnMYESADKAsyGy5TcGVrdHJh",
          "Q29sb3VyQ29uZmlnTWVzc2FnZRIMCgRhcmdzGBIgAygNIlcKFlNwZWt0cmFD",
          "YWxlbmRhck1lc3NhZ2USIAoEdHlwZRgBIAEoDjISLlNwZWt0cmFUYXJnZXRU",
          "eXBlEg0KBWluZGV4GAIgASgNEgwKBGRheXMYAyADKAgiZgoZU3Bla3RyYUNh",
          "bGVuZGFyRGF5TWVzc2FnZRIRCglkYXlfaW5kZXgYASABKA0SIAoEdHlwZRgC",
          "IAEoDjISLlNwZWt0cmFUYXJnZXRUeXBlEhQKDHRhcmdldF9pbmRleBgDIAEo",
          "DSJeCh5TcGVrdHJhQ2FsZW5kYXJPdmVydmlld01lc3NhZ2USEgoKZGF5X29m",
          "ZnNldBgBIAEoDRIoCgRkYXlzGAIgAygLMhouU3Bla3RyYUNhbGVuZGFyRGF5",
          "TWVzc2FnZSJ3ChlTcGVrdHJhVGhlbWVDb25maWdNZXNzYWdlEg0KBWluZGV4",
          "GAEgASgNEg4KBmNvbG91chgCIAMoBBINCgV0aXRsZRgDIAEoCRIsCgdjb2xv",
          "dXJzGAQgAygLMhsuU3Bla3RyYUNvbG91ckNvbmZpZ01lc3NhZ2UiRQoSU3Bl",
          "a3RyYVJlYWRNZXNzYWdlEiAKBHR5cGUYASABKA4yEi5TcGVrdHJhVGFyZ2V0",
          "VHlwZRINCgVpbmRleBgCIAEoDSJ6ChVTcGVrdHJhQ29udHJvbE1lc3NhZ2US",
          "IAoEdHlwZRgBIAEoDjISLlNwZWt0cmFUYXJnZXRUeXBlEgwKBHpvbmUYAiAB",
          "KA0SDQoFaW5kZXgYAyABKA0SIgoGYWN0aW9uGAQgASgOMhIuU3Bla3RyYUFj",
          "dGlvblR5cGUiugEKFERNWFRyYW5zbGF0aW9uT2JqZWN0Eg8KB2xpbmVfaW4Y",
          "ASABKA0SEAoIbGluZV9vdXQYAiABKA0SGQoRZG14X3N0YXJ0X2FkZHJlc3MY",
          "AyABKA0SFQoNY2hhbm5lbF9jb3VudBgEIAEoDRISCgpkYWxpX2FycmF5GAUg",
          "AygNEhYKDmFmZmVjdGVkX2lucHV0GAcgASgNEhAKCGJsb2NraW5nGAggASgI",
          "Eg8KB2VuYWJsZWQYCSABKAgiPwoWRE1YUHJvdG9jb2xUcmFuc2xhdGlvbhIl",
          "CgZvYmplY3QYASADKAsyFS5ETVhUcmFuc2xhdGlvbk9iamVjdCIlChFJbnB1",
          "dFN0YXRlTWVzc2FnZRIQCgh1c2VfbWFzaxgBIAEoCCI4ChJJbnB1dFN0YXRl",
          "UmVzcG9uc2USDgoGaW5wdXRzGAEgAygNEhIKCmlucHV0X21hc2sYAiABKA0i",
          "QAoSTGV2ZWxDYWNoZVJlc3BvbnNlEg4KBmxldmVscxgBIAMoDRIMCgRsaW5l",
          "GAIgASgNEgwKBHBhZ2UYAyABKA0iSAoSSm9pbmVkUm9vbXNNZXNzYWdlEg0K",
          "BXBhaXJzGAEgAygNEg4KBmpvaW5lZBgCIAEoCBITCgtjbGVhcl9qb2lucxgD",
          "IAEoCCLTBAocRGlhZ25vc3RpY1N5c3RlbUluZm9SZXNwb25zZRIQCghmaXJt",
          "d2FyZRgBIAEoCRIQCghoYXJkd2FyZRgCIAEoCRINCgVlcnJvchgDIAEoCRIT",
          "CgtpbnB1dF9jb3VudBgEIAEoDRIUCgxvdXRwdXRfY291bnQYBSABKA0SEAoI",
          "aXJfY291bnQYBiABKA0SFwoPbGlzdF9zdGVwX2NvdW50GAcgASgNEhIKCmxp",
          "c3RfY291bnQYCCABKA0SEwoLYWxhcm1fY291bnQYCSABKA0SFAoMYnVybmlu",
          "X2NvdW50GAogASgNEhkKEXNwZWt0cmFfc2VxX2NvdW50GAsgASgNEh4KFnNw",
          "ZWt0cmFfc2VxX3N0ZXBfY291bnQYDCABKA0SGwoTc3Bla3RyYV90aGVtZV9j",
          "b3VudBgNIAEoDRIcChRzcGVrdHJhX3N0YXRpY19jb3VudBgOIAEoDRIVCg1w",
          "cm90b192ZXJzaW9uGA8gASgNEhIKCmxpbmVfY291bnQYECABKA0SGAoFbGlu",
          "ZXMYESADKA4yCS5MaW5lVHlwZRIVCg1wcm9maWxlX2NvdW50GBIgASgNEhkK",
          "EXByZXNldF9jb2RlX2NvdW50GBMgASgNEhgKEHVzZXJfbGV2ZWxfY291bnQY",
          "FCABKA0SGQoRZG14X3RvX2RhbGlfY291bnQYFSABKA0SGgoSc3Bla3RyYV96",
          "b25lX2NvdW50GBYgASgNEhMKC2xvZ2ljX2NvdW50GBcgASgNEhgKEGlucHV0",
          "X2RhbGlfY291bnQYGCABKA0iVQoRRGlhZ25vc3RpY01lc3NhZ2USJAoEdHlw",
          "ZRgBIAEoDjIWLkRpYWdub3N0aWNNZXNzYWdlVHlwZRIMCgRwYWdlGAIgASgN",
          "EgwKBGxpbmUYAyABKA0i8gEKHUFkbWluUHJvamVjdFByb3BlcnRpZXNNZXNz",
          "YWdlEhMKC2RldmljZV9uYW1lGAIgASgJEhQKDHByb2plY3RfbmFtZRgDIAEo",
          "CRIRCglsb25naXR1ZGUYBCABKAISEAoIbGF0aXR1ZGUYBSABKAISFAoMbG9j",
          "YWxfb2Zmc2V0GAYgASgCEhgKEGRheWxpZ2h0X3NhdmluZ3MYByABKAgSHgoW",
          "ZGF5bGlnaHRfc2F2aW5nc19zdGFydBgIIAEoDRIcChRkYXlsaWdodF9zYXZp",
          "bmdzX2VuZBgJIAEoDRITCgtwb2xsX2FjdGl2ZRgKIAEoCCKkAQoYQWRtaW5D",
          "b25maWdTdGF0dXNNZXNzYWdlEhMKC2xpc3Rfc3RhdHVzGAEgAygNEhYKDmJ1",
          "cm5faW5fc3RhdHVzGAIgAygNEhQKDGFsYXJtX3N0YXR1cxgDIAEoDRIuChNh",
          "bGFybV90aW1lX2Zyb21fcmVnGAQgASgLMhEuVGltZUNsb2NrTWVzc2FnZRIV",
          "Cg1zZW5zb3Jfc3RhdHVzGAUgAygNIncKHUFkbWluTmV0d29ya1Byb3BlcnRp",
          "ZXNNZXNzYWdlEgwKBERIQ1AYASABKAgSCgoCSVAYAiABKAkSCwoDTUFDGAMg",
          "ASgJEg8KB2dhdGV3YXkYBCABKAkSEQoJTlRQU2VydmVyGAUgASgJEgsKA05U",
          "UBgGIAEoCCI3ChtBZG1pbkNvbnRyb2xsZXJMaW5lc01lc3NhZ2USGAoFbGlu",
          "ZXMYASADKA4yCS5MaW5lVHlwZSJAChhBZG1pbkRldmljZVN0YXR1c01lc3Nh",
          "Z2USEwoLdGVtcGVyYXR1cmUYASABKAISDwoHYmF0dGVyeRgCIAEoAiJJChdB",
          "ZG1pblNlY3VyZUxvZ2luTWVzc2FnZRIQCgh1c2VybmFtZRgBIAEoCRIOCgZj",
          "bm9uY2UYAiABKAkSDAoEaGFzaBgDIAMoDSI7ChpBZG1pbkRBTElTZW5zb3JU",
          "eXBlTWVzc2FnZRIdCgR0eXBlGAEgASgOMg8uREFMSVNlbnNvclR5cGUihAQK",
          "DEFkbWluTWVzc2FnZRIiCgdjb21tYW5kGAEgASgOMhEuQWRtaW5Db21tYW5k",
          "VHlwZRIiCgZ0YXJnZXQYAiABKA4yEi5BZG1pblByb3BlcnR5VHlwZRIfCgRk",
          "YXRhGAMgASgLMg8uUGF5bG9hZE1lc3NhZ2VIABI8ChJuZXR3b3JrX3Byb3Bl",
          "cnRpZXMYBCABKAsyHi5BZG1pbk5ldHdvcmtQcm9wZXJ0aWVzTWVzc2FnZUgA",
          "EjwKEnByb2plY3RfcHJvcGVydGllcxgFIAEoCzIeLkFkbWluUHJvamVjdFBy",
          "b3BlcnRpZXNNZXNzYWdlSAASOAoQY29udHJvbGxlcl9saW5lcxgGIAEoCzIc",
          "LkFkbWluQ29udHJvbGxlckxpbmVzTWVzc2FnZUgAEjIKDWRldmljZV9zdGF0",
          "dXMYByABKAsyGS5BZG1pbkRldmljZVN0YXR1c01lc3NhZ2VIABIyCg1jb25m",
          "aWdfc3RhdHVzGAggASgLMhkuQWRtaW5Db25maWdTdGF0dXNNZXNzYWdlSAAS",
          "KQoLZGV2aWNlX3RpbWUYCSABKAsyEi5VcGRhdGVUaW1lTWVzc2FnZUgAEjcK",
          "EGRhbGlfc2Vuc29yX3R5cGUYCiABKAsyGy5BZG1pbkRBTElTZW5zb3JUeXBl",
          "TWVzc2FnZUgAQgkKB3BheWxvYWQiSwoLRGF0YU1lc3NhZ2USEgoKaWRlbnRp",
          "ZmllchgBIAEoDRILCgNzZXEYAiABKA0SDQoFY291bnQYAyABKA0SDAoEZGF0",
          "YRgEIAMoDSLaAQoTRmlybXdhcmVNZXRhTWVzc2FnZRIYChBmaXJtd2FyZV92",
          "ZXJzaW9uGAEgASgNEhUKDWZpcm13YXJlX2RhdGUYAiABKA0SHAoUZmlybXdh",
          "cmVfZGF0ZV91cGxvYWQYAyABKA0SGQoRZmlybXdhcmVfY2hlY2tzdW0YBCAB",
          "KA0SHAoUZmlybXdhcmVfY2h1bmtfY291bnQYBSABKA0SHQoVZmlybXdhcmVf",
          "YmFzZV9hZGRyZXNzGAYgASgNEhwKFGZpcm13YXJlX2VuZF9hZGRyZXNzGAcg",
          "ASgNIjsKFkZpcm13YXJlQ29udHJvbE1lc3NhZ2USIQoDY21kGAEgASgOMhQu",
          "RmlybXdhcmVDb21tYW5kVHlwZSJkChRGaXJtd2FyZUNodW5rTWVzc2FnZRIY",
          "ChBmaXJtd2FyZV9hZGRyZXNzGAEgASgNEhMKC3RvdGFsX2J5dGVzGAIgASgN",
          "Eh0KB3BheWxvYWQYAyABKAsyDC5EYXRhTWVzc2FnZSJqChRTeXN0ZW1Mb2dS",
          "ZWFkTWVzc2FnZRIZChFsb2dfc3RhcnRfYWRkcmVzcxgBIAEoDRIWCg5sb2dz",
          "X3JlcXVlc3RlZBgCIAEoDRIfCgRsb2dzGAMgAygLMhEuU3lzdGVtTG9nTWVz",
          "c2FnZSK3AgoQU3lzdGVtTG9nTWVzc2FnZRIXCg90aW1lX3NpbmNlX2Jvb3QY",
          "ASABKA0SHgoEYm9vdBgCIAEoCzIOLlN5c3RlbUxvZ0Jvb3RIABIkCgduZXRs",
          "aW5rGAMgASgLMhEuU3lzdGVtTG9nTmV0TGlua0gAEhwKA250cBgEIAEoCzIN",
          "LlN5c3RlbUxvZ05UUEgAEiQKB3RyaWdnZXIYBSABKAsyES5TeXN0ZW1Mb2dU",
          "cmlnZ2VySAASJAoHc3Bla3RyYRgGIAEoCzIRLlN5c3RlbUxvZ1NwZWt0cmFI",
          "ABImCghzY2hlZHVsZRgHIAEoCzISLlN5c3RlbUxvZ1NjaGVkdWxlSAASKAoJ",
          "dXNlcnN0YXJ0GAggASgLMhMuU3lzdGVtTG9nVXNlclN0YXJ0SABCCAoGcGFj",
          "a2V0IkQKDVN5c3RlbUxvZ0Jvb3QSJAoJdGltZWNsb2NrGAEgASgLMhEuVGlt",
          "ZUNsb2NrTWVzc2FnZRINCgVmbGFncxgCIAEoDSIlChBTeXN0ZW1Mb2dOZXRM",
          "aW5rEhEKCWlzX2xpbmtlZBgBIAEoCCI0CgxTeXN0ZW1Mb2dOVFASJAoJdGlt",
          "ZWNsb2NrGAEgASgLMhEuVGltZUNsb2NrTWVzc2FnZSJPChBTeXN0ZW1Mb2dU",
          "cmlnZ2VyEiAKB3RyaWdnZXIYASABKAsyDy5UcmlnZ2VyTWVzc2FnZRIZCgZz",
          "b3VyY2UYAiABKA4yCS5SZWFkVHlwZSJnChBTeXN0ZW1Mb2dTcGVrdHJhEiIK",
          "BmFjdGlvbhgBIAEoDjISLlNwZWt0cmFBY3Rpb25UeXBlEiAKBHR5cGUYAiAB",
          "KA4yEi5TcGVrdHJhVGFyZ2V0VHlwZRINCgVpbmRleBgDIAEoDSJhChFTeXN0",
          "ZW1Mb2dTY2hlZHVsZRINCgVpbmRleBgBIAEoDRIPCgdpc1N0YXJ0GAIgASgN",
          "Eg4KBnNlY29uZBgDIAEoDRIOCgZtaW51dGUYBCABKA0SDAoEaG91chgFIAEo",
          "DSI6ChJTeXN0ZW1Mb2dVc2VyU3RhcnQSJAoJdGltZWNsb2NrGAEgASgLMhEu",
          "VGltZUNsb2NrTWVzc2FnZSLTAQoZU3lzdGVtTWV0YURhdGFSZWFkTWVzc2Fn",
          "ZRIbChNpbnB1dF9wcmVzc19jb3VudGVyGAEgAygNEhoKEmxpc3Rfc3RhcnRf",
          "Y291bnRlchgCIAMoDRIZChFzY2hlZHVsZXNfY291bnRlchgDIAMoDRIWCg5z",
          "Y3JlZW5fb25fdGltZRgEIAEoDRIXCg9zY3JlZW5fZGltX3RpbWUYBSABKA0S",
          "GQoRc2NyZWVuX3NhdmVyX3RpbWUYBiABKA0SFgoOcmVib290X2NvdW50ZXIY",
          "ByABKA0imwEKDFRyaWdnZXJFdmVudBIaCgR0eXBlGAEgASgOMgwuVHJpZ2dl",
          "clR5cGUSDwoFbGV2ZWwYAiABKA1IABIoCgxkYWxpX2NvbW1hbmQYAyABKA4y",
          "EC5EQUxJQ29tbWFuZFR5cGVIABIWCg50YXJnZXRfYWRkcmVzcxgEIAEoDRIR",
          "CglsaW5lX21hc2sYBSABKA1CCQoHcGF5bG9hZCLRAQoMRXZlbnRNZXNzYWdl",
          "EhkKBWV2ZW50GAEgASgOMgouRXZlbnRUeXBlEiAKB3RyaWdnZXIYAiABKAsy",
          "DS5UcmlnZ2VyRXZlbnRIABIlCgZpbnB1dHMYAyABKAsyEy5JbnB1dFN0YXRl",
          "UmVzcG9uc2VIABIiCgdwYXlsb2FkGAQgASgLMg8uUGF5bG9hZE1lc3NhZ2VI",
          "ABIrCgxqb2luZWRfcm9vbXMYBSABKAsyEy5Kb2luZWRSb29tc01lc3NhZ2VI",
          "AEIMCgpldmVudF9kYXRhIuQSCg1FZGlkaW9NZXNzYWdlEhIKCm1lc3NhZ2Vf",
          "aWQYASABKA0SGgoDYWNrGAIgASgLMgsuQWNrTWVzc2FnZUgAEiQKBmlucHV0",
          "cxgDIAEoCzISLklucHV0TXVsdGlNZXNzYWdlSAASJgoHb3V0cHV0cxgEIAEo",
          "CzITLk91dHB1dE11bHRpTWVzc2FnZUgAEh4KA2lycxgFIAEoCzIPLklSTXVs",
          "dGlNZXNzYWdlSAASIAoGc2Vuc29yGAYgASgLMg4uU2Vuc29yTWVzc2FnZUgA",
          "EhwKBGxpc3QYCCABKAsyDC5MaXN0TWVzc2FnZUgAEh4KBWFsYXJtGAogASgL",
          "Mg0uQWxhcm1NZXNzYWdlSAASJAoGYWxhcm1zGAsgASgLMhIuQWxhcm1NdWx0",
          "aU1lc3NhZ2VIABInCghidXJuX2lucxgMIAEoCzITLkJ1cm5Jbk11bHRpTWVz",
          "c2FnZUgAEi8KDnNlbnNvcl9jb21tYW5kGA0gASgLMhUuU2Vuc29yQ29tbWFu",
          "ZE1lc3NhZ2VIABIvCg5jaGFuZ2VfcHJvZmlsZRgOIAEoCzIVLkNoYW5nZVBy",
          "b2ZpbGVNZXNzYWdlSAASLAoQaWRlbnRpZnlfbWVzc2FnZRgPIAEoCzIQLklk",
          "ZW50aWZ5TWVzc2FnZUgAEikKC3VwZGF0ZV90aW1lGBAgASgLMhIuVXBkYXRl",
          "VGltZU1lc3NhZ2VIABIpCgtyZWFkX2RldmljZRgRIAEoCzISLlJlYWREZXZp",
          "Y2VNZXNzYWdlSAASJAoMZGFsaV9tZXNzYWdlGBIgASgLMgwuREFMSU1lc3Nh",
          "Z2VIABIoCgpkYWxpX3F1ZXJ5GBMgASgLMhIuREFMSVF1ZXJ5UmVzcG9uc2VI",
          "ABIiCgtkbXhfbWVzc2FnZRgUIAEoCzILLkRNWE1lc3NhZ2VIABIzChBleHRl",
          "cm5hbF90cmlnZ2VyGBUgASgLMhcuRXh0ZXJuYWxUcmlnZ2VyTWVzc2FnZUgA",
          "EjIKEHNwZWt0cmFfc2V0dGluZ3MYFiABKAsyFi5TcGVrdHJhU2V0dGluZ01l",
          "c3NhZ2VIABI5ChBzcGVrdHJhX3NlcXVlbmNlGBcgASgLMh0uU3Bla3RyYVNl",
          "cXVlbmNlQ29uZmlnTWVzc2FnZUgAEjMKEHNwZWt0cmFfY2FsZW5kYXIYGCAB",
          "KAsyFy5TcGVrdHJhQ2FsZW5kYXJNZXNzYWdlSAASMwoNc3Bla3RyYV90aGVt",
          "ZRgZIAEoCzIaLlNwZWt0cmFUaGVtZUNvbmZpZ01lc3NhZ2VIABIrCgxzcGVr",
          "dHJhX3JlYWQYGiABKAsyEy5TcGVrdHJhUmVhZE1lc3NhZ2VIABIxCg9zcGVr",
          "dHJhX2NvbnRyb2wYGyABKAsyFi5TcGVrdHJhQ29udHJvbE1lc3NhZ2VIABIx",
          "Cg5kbXhfdHJhbnNsYXRvchgcIAEoCzIXLkRNWFByb3RvY29sVHJhbnNsYXRp",
          "b25IABIrCg1pbnB1dF9yZXF1ZXN0GB0gASgLMhIuSW5wdXRTdGF0ZU1lc3Nh",
          "Z2VIABItCg5pbnB1dF9yZXNwb25zZRgeIAEoCzITLklucHV0U3RhdGVSZXNw",
          "b25zZUgAEjQKC2RpYWdfc3lzdGVtGB8gASgLMh0uRGlhZ25vc3RpY1N5c3Rl",
          "bUluZm9SZXNwb25zZUgAEioKDGRpYWdfbWVzc2FnZRggIAEoCzISLkRpYWdu",
          "b3N0aWNNZXNzYWdlSAASJgoNYWRtaW5fbWVzc2FnZRghIAEoCzINLkFkbWlu",
          "TWVzc2FnZUgAEh4KBWV2ZW50GCIgASgLMg0uRXZlbnRNZXNzYWdlSAASPgoW",
          "c2VjdXJlX2RldmljZV9zZXR0aW5ncxgjIAEoCzIcLlNlY3VyZURldmljZVNl",
          "dHRpbmdzTWVzc2FnZUgAEiwKDGZpcm13YXJlX25ldxgkIAEoCzIULkZpcm13",
          "YXJlTWV0YU1lc3NhZ2VIABIzChBmaXJtd2FyZV9jb250cm9sGCUgASgLMhcu",
          "RmlybXdhcmVDb250cm9sTWVzc2FnZUgAEi8KDmZpcm13YXJlX2NodW5rGCYg",
          "ASgLMhUuRmlybXdhcmVDaHVua01lc3NhZ2VIABIzChRsZXZlbF9jYWNoZV9y",
          "ZXNwb25zZRgnIAEoCzITLkxldmVsQ2FjaGVSZXNwb25zZUgAEisKDGpvaW5l",
          "ZF9yb29tcxgoIAEoCzITLkpvaW5lZFJvb21zTWVzc2FnZUgAEi0KDWxpc3Rf",
          "ZXh0ZW5kZWQYKSABKAsyFC5FeHRlbmRlZExpc3RNZXNzYWdlSAASIgoLYXl0",
          "X21lc3NhZ2UYKiABKAsyCy5BeXRNZXNzYWdlSAASIgoLcmRtX21lc3NhZ2UY",
          "KyABKAsyCy5SRE1NZXNzYWdlSAASMwoUcmRtX3Jlc3BvbnNlX21lc3NhZ2UY",
          "LCABKAsyEy5SRE1SZXNwb25zZU1lc3NhZ2VIABIrCg1sb2dpY19tZXNzYWdl",
          "GC0gASgLMhIuTG9naWNNdWx0aU1lc3NhZ2VIABIwCgxzZWN1cmVfbG9naW4Y",
          "LiABKAsyGC5BZG1pblNlY3VyZUxvZ2luTWVzc2FnZUgAEjMKFGRldmljZV9z",
          "dGF0ZV9tZXNzYWdlGC8gASgLMhMuRGV2aWNlU3RhdGVNZXNzYWdlSAASOgoU",
          "c3Bla3RyYV9jYWxlbmRhcl9kYXkYMCABKAsyGi5TcGVrdHJhQ2FsZW5kYXJE",
          "YXlNZXNzYWdlSAASRAoZc3Bla3RyYV9jYWxlbmRhcl9vdmVydmlldxgxIAEo",
          "CzIfLlNwZWt0cmFDYWxlbmRhck92ZXJ2aWV3TWVzc2FnZUgAEi0KC2lucHV0",
          "c19kYWxpGDIgASgLMhYuREFMSUlucHV0TXVsdGlNZXNzYWdlSAASKgoJbG9n",
          "c19yZWFkGDMgASgLMhUuU3lzdGVtTG9nUmVhZE1lc3NhZ2VIABIzCg1tZXRh",
          "ZGF0YV9yZWFkGDQgASgLMhouU3lzdGVtTWV0YURhdGFSZWFkTWVzc2FnZUgA",
          "EjkKF2RhbGlfYWRkcmVzc2luZ19tZXNzYWdlGDUgASgLMhYuREFMSUFkZHJl",
          "c3NpbmdNZXNzYWdlSAASNwoWZGFsaV9yZW1hcHBpbmdfbWVzc2FnZRg2IAEo",
          "CzIVLkRBTElSZW1hcHBpbmdNZXNzYWdlSABCCQoHcGF5bG9hZCqbAQoUVHJp",
          "Z2dlck9wZXJhdGlvblR5cGUSDQoJTU9NRU5UQVJZEAASDAoITEFUQ0hJTkcQ",
          "ARIUChBNT01FTlRBUllfT1VUUFVUEAISEwoPTEFUQ0hJTkdfT1VUUFVUEAMS",
          "CgoGUk9UQVJZEAQSFwoSTU9NRU5UQVJZX0RJU0FCTEVEEIABEhYKEUxBVENI",
          "SU5HX0RJU0FCTEVEEIEBKpkLCgtUcmlnZ2VyVHlwZRIMCghEQUxJX0FSQxAA",
          "EhAKDERBTElfQ09NTUFORBABEhoKFkRNWF9DSEFOTkVMU19TUExJVF9MT1cQ",
          "AhIbChdETVhfQ0hBTk5FTFNfU1BMSVRfSElHSBADEiQKIERNWF9NVUxUSUNB",
          "U1RfQ0hBTk5FTFNfU1BMSVRfTE9XEAQSJQohRE1YX01VTFRJQ0FTVF9DSEFO",
          "TkVMU19TUExJVF9ISUdIEAUSEQoNRE1YX0JST0FEQ0FTVBAGEgkKBURJRElP",
          "EAcSFAoQRkFERV9VUF9XSVRIX01JThAIEg4KCkxJU1RfU1RBUlQQCRIZChVM",
          "SVNUX1NUQVJUX0NPTlRJTlVPVVMQChINCglMSVNUX1NUT1AQCxIVChFTUEVL",
          "VFJBX1NUQVJUX1NFURAMEhQKEFNQRUtUUkFfU1RPUF9TRVEQDRIRCg1TUEVL",
          "VFJBX1RIRU1FEA4SEgoOU1BFS1RSQV9TVEFUSUMQDxIUChBTUEVLVFJBX1ND",
          "SEVEVUxFEBASDgoKTElOS19TVEFSVBAREg0KCUxJTktfU1RPUBASEhAKDERJ",
          "U0FCTEVfQlVSThATEg8KC0VOQUJMRV9CVVJOEBQSDgoKT05fT0ZGX1RPRxAV",
          "Eg8KC01JTl9NQVhfVE9HEBYSEAoMRU5BQkxFX0lOUFVUEBcSEQoNRElTQUJM",
          "RV9JTlBVVBAYEhQKEEVOQUJMRV9UT0dfSU5QVVQQGRIOCgpPVVRQVVRfVE9H",
          "EBoSDwoLT1VUUFVUX0hJR0gQGxIOCgpPVVRQVVRfTE9XEBwSDwoLT1VUUFVU",
          "X1RSSUcQHRISCg5QUk9GSUxFX0NIQU5HRRAeEhMKD0ZBREVfTE9OR19QUkVT",
          "UxAfEgoKBlNZTkNSTxAgEg8KC1BSRVNFVF9DT0RFECESDwoLQ1VTVE9NX0NP",
          "REUQIhIRCg1TUEVLVFJBX1NMRUVQECMSEgoOU1BFS1RSQV9SRVNVTUUQJBIQ",
          "CgxERVZJQ0VfUkVTRVQQJRIPCgtERVZJQ0VfU0FWRRAmEhgKFFVTRVJfTEVW",
          "RUxfU1RPUkVfTkVXECcSGgoWVVNFUl9MRVZFTF9TRVRfREVGQVVMVBAoEhUK",
          "EVVTRVJfTEVWRUxfUkVDQUxMECkSDQoJUk9PTV9KT0lOECsSDwoLUk9PTV9V",
          "TkpPSU4QLBITCg9UWVBFOF9UQ19XQVJNRVIQLRITCg9UWVBFOF9UQ19DT09M",
          "RVIQLhITCg9UWVBFOF9UQ19BQ1RVQUwQLxITCg9MT0dJQ19PUEVSQVRJT04Q",
          "MBIQCgxBTEFSTV9FTkFCTEUQMRIRCg1BTEFSTV9ESVNBQkxFEDISIAocREFM",
          "SV9DT05UUk9MX1NFTlNPUl9PVkVSUklERRAzEiQKIERBTElfQ09OVFJPTF9T",
          "RU5TT1JfVEVNUF9ESVNBQkxFEDQSHgoaREFMSV9DT05UUk9MX1NFTlNPUl9S",
          "RVNVTUUQNRIVChFEQUxJX0FSQ19PVkVSUklERRA2EhkKFURBTElfQ09NTUFO",
          "RF9PVkVSUklERRA3Eh0KGUZBREVfVVBfV0lUSF9NSU5fT1ZFUlJJREUQOBIX",
          "ChNPTl9PRkZfVE9HX09WRVJSSURFEDkSGAoUTUlOX01BWF9UT0dfT1ZFUlJJ",
          "REUQOhIPCgtNQVhfT0ZGX1RPRxA7EhgKFE1BWF9PRkZfVE9HX09WRVJSSURF",
          "EDwSHAoYRkFERV9MT05HX1BSRVNTX09WRVJSSURFED0SHgoaVVNFUl9MRVZF",
          "TF9SRUNBTExfT1ZFUlJJREUQPhIUChBETVhfWk9ORV9GQURFX1VQED8SFgoS",
          "RE1YX1pPTkVfRkFERV9ET1dOEEASEQoNTE9HR0lOR19MRVZFTBBBEg8KCk5P",
          "X0NPTU1BTkQQ/gEqvgEKCFJlYWRUeXBlEgoKBklOUFVUUxAAEgsKB09VVFBV",
          "VFMQARIGCgJJUhACEgoKBlNFTlNPUhADEggKBExJU1QQBRIKCgZBTEFSTVMQ",
          "BxILCgdCVVJOX0lOEAgSCwoHUFJPSkVDVBAJEgsKB05FVFdPUksQChIKCgZE",
          "RVZJQ0UQCxINCglQT0xMX0RBVEEQDBIRCg1MSVNUX0VYVEVOREVEEA0SCQoF",
          "TE9HSUMQDhIPCgtEQUxJX0lOUFVUUxAPKowBCg9BbGFybVJlcGVhdFR5cGUS",
          "EwoPQUxBUk1fTk9fUkVQRUFUEAASFgoSQUxBUk1fUkVQRUFUX0RBSUxZEAES",
          "GQoVQUxBUk1fUkVQRUFUX1dPUktfREFZEAISFwoTQUxBUk1fUkVQRUFUX1dF",
          "RUtMWRADEhgKFEFMQVJNX1JFUEVBVF9NT05USExZEAQqSQoOQWxhcm1Bc3Ry",
          "b1R5cGUSEgoOQUxBUk1fTk9fQVNUUk8QABIRCg1BTEFSTV9TVU5SVVNFEAES",
          "EAoMQUxBUk1fU1VOU0VUEAIqVAoRU3Bla3RyYVRhcmdldFR5cGUSDAoIU0VU",
          "VElOR1MQABIMCghTRVFVRU5DRRABEgkKBVRIRU1FEAISCgoGU1RBVElDEAMS",
          "DAoIQ0FMRU5EQVIQBCo9ChFTcGVrdHJhQWN0aW9uVHlwZRIJCgVTVEFSVBAA",
          "EggKBFNUT1AQARIJCgVQQVVTRRACEggKBFNBVkUQAyp9Ch9TcGVrdHJhVW5z",
          "Y2hlZHVsZWRCZWhhdmlvdXJUeXBlEiAKHFJVTl9SQU5ET01fQ09MT1VSRURf",
          "U0VRVUVOQ0UQABISCg5SVU5fU0VRVUVOQ0VfMRABEhMKD1JFU1VNRV9QUkVW",
          "SU9VUxACEg8KCkRPX05PVEhJTkcQ/gEqNgoSTGluZUFkZHJlc3NpbmdUeXBl",
          "Eg8KC0lOREVQRU5ERU5UEAASDwoLQ09OU0VDVVRJVkUQASrXAgoOQWNrTWVz",
          "c2FnZVR5cGUSEQoNREVDT0RFX0ZBSUxFRBAAEhcKE0lOREVYX09VVF9PRl9C",
          "T1VORFMQARITCg9VTkVYUEVDVEVEX1RZUEUQAhIRCg1FTkNPREVfRkFJTEVE",
          "EAMSEAoMS0VZX01JU01BVENIEAQSCwoHU1VDQ0VTUxAFEhIKDklOVkFMSURf",
          "UEFSQU1TEAYSFgoSVU5FWFBFQ1RFRF9DT01NQU5EEAcSGAoUQ09NTVVOSUNB",
          "VElPTl9GQUlMRUQQCBIZChVDT01NVU5JQ0FUSU9OX1RJTUVPVVQQCRIRCg1E",
          "QVRBX1RPT19MT05HEAoSEwoPVU5FWFBFQ1RFRF9DQVNFEAsSDgoKU0xPVFNf",
          "RlVMTBAMEhAKDFVOQVVUSE9SSVNFRBANEhMKD1BBUlRJQUxfU1VDQ0VTUxAO",
          "EhIKDkNPTU1BTkRfRkFJTEVEEA8q0wQKEFR5cGU4Q29tbWFuZFR5cGUSFAoQ",
          "U0VUX1RFTVBfWF9DT09SRBAAEhQKEFNFVF9URU1QX1lfQ09PUkQQARIMCghB",
          "Q1RJVkFURRACEhMKD1hfQ09PUkRfU1RFUF9VUBADEhUKEVhfQ09PUkRfU1RF",
          "UF9ET1dOEAQSEwoPWV9DT09SRF9TVEVQX1VQEAUSFQoRWV9DT09SRF9TVEVQ",
          "X0RPV04QBhIfChtTRVRfVEVNUF9DT0xPVVJfVEVNUEVSQVRVUkUQBxIiCh5D",
          "T0xPVVJfVEVNUEVSQVRVUkVfU1RFUF9DT09MRVIQCBIiCh5DT0xPVVJfVEVN",
          "UEVSQVRVUkVfU1RFUF9XQVJNRVIQCRIbChdTRVRfVEVNUF9QUklfTl9ESU1M",
          "RVZFTBAKEhkKFVNFVF9URU1QX1JHQl9ESU1MRVZFTBALEhkKFVNFVF9URU1Q",
          "X1dBRl9ESU1MRVZFTBAMEhsKF1NFVF9URU1QX1JHQldBRl9DT05UUk9MEA0S",
          "GQoVQ09QWV9SRVBPUlRfVEVNUE9SQVJZEA4SEgoOU1RPUkVfVFlfUFJJX04Q",
          "EBIYChRTVE9SRV9YWV9DT09SRF9QUklfThAREiIKHlNUT1JFX0NPTE9VUl9U",
          "RU1QRVJBVFVSRV9MSU1JVBASEh4KGlNUT1JFX0dFQVJfRkVBVFVSRVNfU1RB",
          "VFVTEBMSGgoWQVNTSUdOX0NPTE9SX0xJTktFRF9DSBAVEhIKDlNUQVJUX0FV",
          "VE9fQ0FMEBYSFwoTRU5BQkxFX0RFVklDRV9UWVBFOBAwKpgCCg5UeXBlOFF1",
          "ZXJ5VHlwZRIUChBUWVBFOF9RVUVSWV9OVUxMEAASJQogVFlQRThfUVVFUllf",
          "R0VBUl9GRUFUVVJFU19TVEFUVVMQ9wESHgoZVFlQRThfUVVFUllfQ09MT1VS",
          "X1NUQVRVUxD4ARIlCiBUWVBFOF9RVUVSWV9DT0xPVVJfVFlQRV9GRUFUVVJF",
          "UxD5ARIdChhUWVBFOF9RVUVSWV9DT0xPVVJfVkFMVUUQ+gESHwoaVFlQRThf",
          "UVVFUllfUkdCV0FGX0NPTlRST0wQ+wESIAobVFlQRThfUVVFUllfQVNTSUdO",
          "RURfQ09MT1VSEPwBEiAKG1RZUEU4X1FVRVJZX0VYVF9WRVJTSU9OX05VTRD+",
          "ASpICghMaW5lVHlwZRIOCgpMSU5FX0VNUFRZEAASDQoJTElORV9EQUxJEAES",
          "DAoITElORV9ETVgQAhIPCgtMSU5FX0RNWF9JThADKncKCUV2ZW50VHlwZRIM",
          "CghSRUdJU1RFUhAAEhEKDVRSSUdHRVJfRVZFTlQQARIPCgtJTlBVVF9FVkVO",
          "VBACEhAKDFNFTlNPUl9FVkVOVBADEhEKDUNPTlRST0xfRVZFTlQQBBITCg9S",
          "T09NX0pPSU5fRVZFTlQQBSrGCQoNREFMSVF1ZXJ5VHlwZRITCg9EQUxJX1FV",
          "RVJZX05VTEwQABIWChFEQUxJX1FVRVJZX1NUQVRVUxCQARIXChJEQUxJX1FV",
          "RVJZX0JBTExBU1QQkQESHAoXREFMSV9RVUVSWV9MQU1QX0ZBSUxVUkUQkgES",
          "HQoYREFMSV9RVUVSWV9MQU1QX1BPV0VSX09OEJMBEhsKFkRBTElfUVVFUllf",
          "TElNSVRfRVJST1IQlAESGwoWREFMSV9RVUVSWV9SRVNFVF9TVEFURRCVARIl",
          "CiBEQUxJX1FVRVJZX01JU1NJTkdfU0hPUlRfQUREUkVTUxCWARIeChlEQUxJ",
          "X1FVRVJZX1ZFUlNJT05fTlVNQkVSEJcBEhQKD0RBTElfUVVFUllfRFRSMBCY",
          "ARIbChZEQUxJX1FVRVJZX0RFVklDRV9UWVBFEJkBEhwKF0RBTElfUVVFUllf",
          "UEhZU0lDQUxfTUlOEJoBEh0KGERBTElfUVVFUllfUE9XRVJfRkFJTFVSRRCb",
          "ARIUCg9EQUxJX1FVRVJZX0RUUjEQnAESFAoPREFMSV9RVUVSWV9EVFIyEJ0B",
          "Eh4KGURBTElfUVVFUllfT1BFUkFUSU5HX01PREUQngESIAobREFMSV9RVUVS",
          "WV9MSUdIVFNPVVJDRV9UWVBFEJ8BEhwKF0RBTElfUVVFUllfQUNUVUFMX0xF",
          "VkVMEKABEhkKFERBTElfUVVFUllfTUFYX0xFVkVMEKEBEhkKFERBTElfUVVF",
          "UllfTUlOX0xFVkVMEKIBEh4KGURBTElfUVVFUllfUE9XRVJfT05fTEVWRUwQ",
          "owESJAofREFMSV9RVUVSWV9TWVNURU1fRkFJTFVSRV9MRVZFTBCkARIhChxE",
          "QUxJX1FVRVJZX0ZBREVUSU1FX0ZBREVSQVRFEKUBEioKJURBTElfUVVFUllf",
          "TUFOVUZBQ1RVUkVSX1NQRUNJRklDX01PREUQpgESIAobREFMSV9RVUVSWV9O",
          "RVhUX0RFVklDRV9UWVBFEKcBEiIKHURBTElfUVVFUllfRVhURU5ERURfRkFE",
          "RV9USU1FEKgBEiQKH0RBTElfUVVFUllfQ09OVFJPTF9HRUFSX0ZBSUxVUkUQ",
          "qgESHQoYREFMSV9RVUVSWV9TQ0VORV9YX0xFVkVMELABEhoKFURBTElfUVVF",
          "UllfR1JPVVBTXzBfNxDAARIbChZEQUxJX1FVRVJZX0dST1VQU184XzE1EMEB",
          "EiAKG0RBTElfUVVFUllfUkFORE9NX0FERFJFU1NfSBDCARIgChtEQUxJX1FV",
          "RVJZX1JBTkRPTV9BRERSRVNTX00QwwESIAobREFMSV9RVUVSWV9SQU5ET01f",
          "QUREUkVTU19MEMQBEhwKF0RBTElfUVVFUllfUkVBRF9EVFJfMF8xEMUBEiAK",
          "G0RBTElfUVVFUllfQVBQX0VYVF9DT01NQU5EUxDgARIiCh1EQUxJX1FVRVJZ",
          "X0VYVF9WRVJTSU9OX05VTUJFUhD/ARIXChJEQUxJX1FVRVJZX0NPTVBBUkUQ",
          "hAISJAofREFMSV9RVUVSWV9WRVJJRllfU0hPUlRfQUREUkVTUxCMAhIdChhE",
          "QUxJX1FVRVJZX1NIT1JUX0FERFJFU1MQjQIq3QcKD0RBTElDb21tYW5kVHlw",
          "ZRIMCghEQUxJX09GRhAAEhAKDERBTElfRkFERV9VUBABEhIKDkRBTElfRkFE",
          "RV9ET1dOEAISEAoMREFMSV9TVEVQX1VQEAMSEgoOREFMSV9TVEVQX0RPV04Q",
          "BBISCg5EQUxJX01BWF9MRVZFTBAFEhIKDkRBTElfTUlOX0xFVkVMEAYSFgoS",
          "REFMSV9TVEVQX0RPV05fT0ZGEAcSEwoPREFMSV9PTl9TVEVQX1VQEAgSGAoU",
          "REFMSV9FTkFCTEVfREFQQ19TRVEQCRIhCh1EQUxJX1JFQ0FMTF9MQVNUX0FD",
          "VElWRV9MRVZFTBAKEhcKE0RBTElfUkVDQUxMX1NDRU5FX1gQEBIOCgpEQUxJ",
          "X1JFU0VUECASIAocREFMSV9TVE9SRV9BQ1RVQUxfTEVWRUxfRFRSMBAhEh0K",
          "GURBTElfU0FWRV9QRVJTSVNURU5UX1ZBUlMQIhIbChdEQUxJX1NFVF9PUEVS",
          "QVRJTkdfTU9ERRAjEhoKFkRBTElfUkVTRVRfTUVNT1JZX0JBTksQJBIYChRE",
          "QUxJX0lERU5USUZZX0RFVklDRRAlEhYKEkRBTElfU0VUX01BWF9MRVZFTBAq",
          "EhYKEkRBTElfU0VUX01JTl9MRVZFTBArEiEKHURBTElfU0VUX1NZU1RFTV9G",
          "QUlMVVJFX0xFVkVMECwSGwoXREFMSV9TRVRfUE9XRVJfT05fTEVWRUwQLRIW",
          "ChJEQUxJX1NFVF9GQURFX1RJTUUQLhIWChJEQUxJX1NFVF9GQURFX1JBVEUQ",
          "LxIaChZEQUxJX1NFVF9FWFRfRkFERV9USU1FEDASFAoQREFMSV9TRVRfU0NF",
          "TkVfWBBAEhwKGERBTElfUkVNT1ZFX0ZST01fU0NFTkVfWBBQEhcKE0RBTElf",
          "QUREX1RPX0dST1VQX1gQYBIcChhEQUxJX1JFTU9WRV9GUk9NX0dST1VQX1gQ",
          "cBIbChZEQUxJX1NFVF9TSE9SVF9BRERSRVNTEIABEh0KGERBTElfRU5BQkxF",
          "X1dSSVRFX01FTU9SWRCBARITCg5EQUxJX1RFUk1JTkFURRD/ARIUCg9EQUxJ",
          "X0lOSVRJQUxJU0UQggISEwoOREFMSV9SQU5ET01JU0UQgwISEgoNREFMSV9X",
          "SVRIRFJBVxCFAhIXChJEQUxJX1NFQVJDSF9BRERSX0gQiAISFwoSREFMSV9T",
          "RUFSQ0hfQUREUl9NEIkCEhcKEkRBTElfU0VBUkNIX0FERFJfTBCKAhIfChpE",
          "QUxJX1BST0dSQU1fU0hPUlRfQUREUkVTUxCLAiqoAQoVQ3VzdG9tREFMSUNv",
          "bW1hbmRUeXBlEhIKDkRBTElfQVJDX0xFVkVMEAASEwoPREFMSV9EQVBDX0xF",
          "VkVMEAESGAoUREFMSV9HUk9VUF9BUkNfTEVWRUwQAhIYChREQUxJX0JST0FE",
          "Q0FTVF9TQ0VORRADEhcKE0RBTElfU0NFTkVfT05fR1JPVVAQBBIZChVEQUxJ",
          "X1NDRU5FX09OX0FERFJFU1MQBSqGBAoRQWRtaW5Qcm9wZXJ0eVR5cGUSDwoL",
          "REVWSUNFX05BTUUQABIQCgxQUk9KRUNUX05BTUUQARINCglMT05HSVRVREUQ",
          "AhIMCghMQVRJVFVERRADEhQKEExPQ0FMX1VUQ19PRkZTRVQQBBIUChBEQVlM",
          "SUdIVF9TQVZJTkdTEAUSDwoLUE9MTF9BQ1RJVkUQBhIQCgxESENQX0VOQUJM",
          "RUQQBxILCgdJUF9BRERSEAgSDAoITUFDX0FERFIQCRIOCgpHQVRFV0FZX0lQ",
          "EAoSFgoSTkVUV09SS19QUk9QRVJUSUVTEAsSFQoRU1lTVEVNX1BST1BFUlRJ",
          "RVMQDBIUChBDT05UUk9MTEVSX0xJTkVTEA0SFAoQRUVQUk9NX0ZVTExfQ0hJ",
          "UBAOEg8KC0NPTkZJR19EQVRBEA8SEAoMU1BFS1RSQV9EQVRBEBASEQoNREVW",
          "SUNFX1NUQVRVUxAREhEKDUNPTkZJR19TVEFUVVMQEhIPCgtERVZJQ0VfVElN",
          "RRATEg8KC05UUF9ERVRBSUxTEBQSFQoRVFJJRE9OSUNfTVNFTlNPUlMQFRIS",
          "Cg5TRUNVUkVfU0VTU0lPThAWEgkKBU5PTkNFEBcSFAoQREFMSV9TRU5TT1Jf",
          "VFlQRRAYEhEKDURFVklDRV9SRUJPT1QQGRISCg5TWVNURU1fTE9HR0lORxAa",
          "Kk0KEEFkbWluQ29tbWFuZFR5cGUSBwoDU0VUEAASBwoDR0VUEAESBwoDQURE",
          "EAISCgoGUkVNT1ZFEAMSCQoFUkVTRVQQBBIHCgNSVU4QBSq1AQoOREFMSVN0",
          "YXR1c1R5cGUSDAoITEFNUF9PRkYQABIYChRDT05UUk9MX0dFQVJfRkFJTFVS",
          "RRABEhAKDExBTVBfRkFJTFVSRRACEgsKB0xBTVBfT04QBBIPCgtMSU1JVF9F",
          "UlJPUhAIEhAKDEZBREVfUlVOTklORxAQEg8KC1JFU0VUX1NUQVRFECASEQoN",
          "U0hPUlRfQUREUkVTUxBAEhUKEFBPV0VSX0NZQ0xFX1NFRU4QgAEqiAIKEERB",
          "TElSWFN0YXR1c0ZsYWcSCwoHV0FJVElORxAAEhMKD1JFQ0VJVklOR19GUkFN",
          "RRABEhUKEU5PX1JFQ0VJVkVEX0ZSQU1FEAISGAoUUkVDRUlWRURfOF9CSVRf",
          "RlJBTUUQAxIZChVSRUNFSVZFRF8xNl9CSVRfRlJBTUUQBBIZChVSRUNFSVZF",
          "RF8yNF9CSVRfRlJBTUUQBRIaChZSRUNFSVZFRF9QQVJUSUFMX0ZSQU1FEAYS",
          "CAoESURMRRAHEg8KC0NBTElCUkFUSU9OEAgSGAoTRVJST1JfV0hJTEVfU0VO",
          "RElORxD+ARIaChVFUlJPUl9XSElMRV9SRUNFSVZJTkcQ/wEqiwEKFURpYWdu",
          "b3N0aWNNZXNzYWdlVHlwZRIaChZESUFHTk9TVElDX1NZU1RFTV9JTkZPEAAS",
          "GwoXRElBR05PU1RJQ19JTlBVVF9TVEFUVVMQARIUChBEQUxJX0xFVkVMX0NB",
          "Q0hFEAISEwoPRE1YX0xFVkVMX0NBQ0hFEAMSDgoKUk9PTV9KT0lOUxAEKnoK",
          "E0Zpcm13YXJlQ29tbWFuZFR5cGUSDAoIRldfUkVBRFkQABIMCghGV19BUFBM",
          "WRABEg0KCUZXX1ZFUklGWRACEhQKEEZXX1ZFUklGWV9GQUlMRUQQAxIVChFG",
          "V19WRVJJRllfU1VDQ0VTUxAEEgsKB0ZXX1JFQUQQBSo/ChVTcGVrdHJhVHJh",
          "bnNpdGlvblR5cGUSCQoFQkxFTkQQABIICgRTTkFQEAESEQoNRkFERV9UT19C",
          "TEFDSxACKpwBCglMb2dpY1R5cGUSDgoKREFMSV9MRVZFTBAAEg8KC0lOUFVU",
          "X1NUQVRFEAESEAoMTElTVF9SVU5OSU5HEAISFgoST0NDVVBBTkNZX0RFVEVD",
          "VEVEEAMSDwoLRE1YX1BSRVNFTlQQBBIPCgtDQUxfV0VFS0RBWRAFEg0KCUNB",
          "TF9NT05USBAGEhMKD0FMQVJNX1NDSEVEVUxFRBAHKoABChNMb2dpY0NvbXBh",
          "cmlzb25UeXBlEg0KCUxFU1NfVEhBThAAEhcKE0xFU1NfVEhBTl9PUl9FUVVB",
          "TFMQARIKCgZFUVVBTFMQAhINCglNT1JFX1RIQU4QAxIXChNNT1JFX1RIQU5f",
          "T1JfRVFVQUxTEAQSDQoJTk9UX0VRVUFMEAUqOAoOREFMSVNlbnNvclR5cGUS",
          "EgoOVFJJRE9OSUNfRURBTEkQABISCg5TVEFOREFSRF9FREFMSRABKkcKEVNl",
          "bnNvckNvbW1hbmRUeXBlEg4KCklOSVRJQUxJU0UQABIICgRNVVRFEAESCgoG",
          "VU5NVVRFEAISDAoIT1ZFUlJJREUQAypiCg1TeXN0ZW1Mb2dUeXBlEggKBEJP",
          "T1QQABIMCghORVRfTElOSxABEgcKA05UUBACEgsKB1RSSUdHRVIQAxILCgdT",
          "UEVLVFJBEAQSDAoIU0NIRURVTEUQBRIICgRVU0VSEAYqTgoTREFMSUFkZHJl",
          "c3NpbmdFcnJvchIMCghOT19FUlJPUhAAEgoKBlZFUklGWRABEgoKBlNFQVJD",
          "SBACEhEKDU5PX05FV19ERVZJQ0UQAyo4ChJEQUxJQWRkcmVzc2luZ1R5cGUS",
          "DwoLQUREUkVTU19ORVcQABIRCg1SRUFERFJFU1NfQUxMEAFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TriggerOperationType), typeof(global::TriggerType), typeof(global::ReadType), typeof(global::AlarmRepeatType), typeof(global::AlarmAstroType), typeof(global::SpektraTargetType), typeof(global::SpektraActionType), typeof(global::SpektraUnscheduledBehaviourType), typeof(global::LineAddressingType), typeof(global::AckMessageType), typeof(global::Type8CommandType), typeof(global::Type8QueryType), typeof(global::LineType), typeof(global::EventType), typeof(global::DALIQueryType), typeof(global::DALICommandType), typeof(global::CustomDALICommandType), typeof(global::AdminPropertyType), typeof(global::AdminCommandType), typeof(global::DALIStatusType), typeof(global::DALIRXStatusFlag), typeof(global::DiagnosticMessageType), typeof(global::FirmwareCommandType), typeof(global::SpektraTransitionType), typeof(global::LogicType), typeof(global::LogicComparisonType), typeof(global::DALISensorType), typeof(global::SensorCommandType), typeof(global::SystemLogType), typeof(global::DALIAddressingError), typeof(global::DALIAddressingType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::AckMessage), global::AckMessage.Parser, new[]{ "Payload" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PayloadMessage), global::PayloadMessage.Parser, new[]{ "UintData", "FloatData", "StringData" }, new[]{ "Data" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AytMessage), global::AytMessage.Parser, new[]{ "Timesinceboot", "Temperature", "Time" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceStateMessage), global::DeviceStateMessage.Parser, new[]{ "Uptime", "Temp", "Vbat", "Clock", "NextAlarm", "NextAlarmTime", "InputState", "ListStates", "BurnInStates", "SensorStates", "ZoneStates", "ZoneSleepStates", "ZoneIndexes", "DaliInputState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TriggerMessage), global::TriggerMessage.Parser, new[]{ "Type", "Zone", "LineMask", "TargetIndex", "Value", "QueryIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TimeClockMessage), global::TimeClockMessage.Parser, new[]{ "Date", "Time" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BurnInBitsMessage), global::BurnInBitsMessage.Parser, new[]{ "LightState", "RunningFlag", "EnableFlag" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IOInputMessage), global::IOInputMessage.Parser, new[]{ "Index", "ButtonState", "ShortPress", "LongPress" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IOOutputMessage), global::IOOutputMessage.Parser, new[]{ "Index", "InitialLevel", "TimeTriggerIsActive", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DALIInputMessage), global::DALIInputMessage.Parser, new[]{ "Index", "Address", "DaliLine", "ButtonState", "ShortPress", "LongPress" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IOIRMessage), global::IOIRMessage.Parser, new[]{ "Index", "Action", "Codes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SensorMessage), global::SensorMessage.Parser, new[]{ "Profile", "Index", "SensorAddress", "SensorDaliLine", "AddressQuery", "ControlDaliLine", "ControlGroup", "LightSetpoint", "WarningSetpoint", "MotionOnly", "TimeoutValues", "WarningValues", "DisableValues", "Input1Pm", "Input2Pm", "SensorStates", "MotionSensors", "LuxSensors", "OffFlag", "IsProgrammed", "DetectionTrigger", "WarningTrigger", "IdleTrigger" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListStepMessage), global::ListStepMessage.Parser, new[]{ "StepIndex", "Action", "TimeSeconds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AlarmMessage), global::AlarmMessage.Parser, new[]{ "Index", "Enabled", "StartTime", "EndTime", "StartTrigger", "EndTrigger", "AstroStart", "AstroEnd", "Repeat", "RepeatDayBitmask", "RepeatMonthBitmask", "Yearly", "StartOffsetIsBefore", "EndOffsetIsBefore" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BurnInMessage), global::BurnInMessage.Parser, new[]{ "Index", "Line", "Address", "QueryAddress", "Time", "Remaining", "States" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ExternalTriggerMessage), global::ExternalTriggerMessage.Parser, new[]{ "Trigger" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InputMultiMessage), global::InputMultiMessage.Parser, new[]{ "Profile", "Inputs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OutputMultiMessage), global::OutputMultiMessage.Parser, new[]{ "Profile", "Outputs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DALIInputMultiMessage), global::DALIInputMultiMessage.Parser, new[]{ "Profile", "InputIndexOffset", "Inputs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IRMultiMessage), global::IRMultiMessage.Parser, new[]{ "Profile", "Irs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListMessage), global::ListMessage.Parser, new[]{ "ListIndex", "Step", "ListState", "TotalStepCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ExtendedListMessage), global::ExtendedListMessage.Parser, new[]{ "ListIndex", "StepIndexOffset", "Step" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AlarmMultiMessage), global::AlarmMultiMessage.Parser, new[]{ "Alarm" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BurnInMultiMessage), global::BurnInMultiMessage.Parser, new[]{ "Burnin" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LogicMessage), global::LogicMessage.Parser, new[]{ "Index", "Enabled", "ComparisonObject", "ComparisonValue", "ComparisonType", "ActionA", "ActionB" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LogicMultiMessage), global::LogicMultiMessage.Parser, new[]{ "Logic" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SensorCommandMessage), global::SensorCommandMessage.Parser, new[]{ "Command", "Index", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeProfileMessage), global::ChangeProfileMessage.Parser, new[]{ "Profile" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IdentifyMessage), global::IdentifyMessage.Parser, new[]{ "MAC", "IP" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateTimeMessage), global::UpdateTimeMessage.Parser, new[]{ "Time" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReadDeviceMessage), global::ReadDeviceMessage.Parser, new[]{ "Profile", "Type", "Index", "SecondaryIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SecureDeviceSettingsMessage), global::SecureDeviceSettingsMessage.Parser, new[]{ "Payload" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DTRPayloadMessage), global::DTRPayloadMessage.Parser, new[]{ "Dtr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DALIMessage), global::DALIMessage.Parser, new[]{ "LineMask", "Address", "Frame25Bit", "Frame25BitReply", "Command", "CustomCommand", "Query", "Type8", "Frame16Bit", "Frame16BitReply", "Frame24Bit", "Frame24BitReply", "Arg", "Dtr" }, new[]{ "Action", "Params" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DALIStatusFlagMessage), global::DALIStatusFlagMessage.Parser, new[]{ "Flags" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DALIQueryResponse), global::DALIQueryResponse.Parser, new[]{ "StatusFlags", "Data", "DaliFlag", "ReponseData" }, new[]{ "Payload" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DALIAddressingMessage), global::DALIAddressingMessage.Parser, new[]{ "Type", "Initialisation", "LineMask", "Is24Bit", "Error", "Index" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DALIRemappingMessage), global::DALIRemappingMessage.Parser, new[]{ "FromAddress", "ToAddress", "LineMask", "Is24Bit" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DMXMessage), global::DMXMessage.Parser, new[]{ "Zone", "UniverseMask", "Channel", "Repeat", "Level", "FadeTimeBy10Ms" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RDMMessage), global::RDMMessage.Parser, new[]{ "UniverseMask", "Uid", "Pid", "Getset", "Datalength", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RDMResponseMessage), global::RDMResponseMessage.Parser, new[]{ "Uid", "Pid", "Datalength", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpektraSettingMessage), global::SpektraSettingMessage.Parser, new[]{ "Zone", "StartAddress", "LineOrUniverseMask", "Protocol", "NumberOfLights", "ChannelsPerLight", "ChannelColours", "UnscheduledBehaviour", "ChannelMapping", "LineAddressing", "ZoneScaleFactor" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpektraColourConfigMessage), global::SpektraColourConfigMessage.Parser, new[]{ "ChannelValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpektraSequenceConfigMessage), global::SpektraSequenceConfigMessage.Parser, new[]{ "Index", "Type", "Transition", "FadeTimeBy10Ms", "TimePerColour", "TimePerColourUnit", "TimePerStep", "TimePerStepUnit", "Range", "Colour", "IsRandomisedType", "RandomTypesMask", "IsReverseDirection", "IsCycleDirection", "Title", "HasRandomColourOrder", "Colours", "Args" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpektraCalendarMessage), global::SpektraCalendarMessage.Parser, new[]{ "Type", "Index", "Days" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpektraCalendarDayMessage), global::SpektraCalendarDayMessage.Parser, new[]{ "DayIndex", "Type", "TargetIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpektraCalendarOverviewMessage), global::SpektraCalendarOverviewMessage.Parser, new[]{ "DayOffset", "Days" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpektraThemeConfigMessage), global::SpektraThemeConfigMessage.Parser, new[]{ "Index", "Colour", "Title", "Colours" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpektraReadMessage), global::SpektraReadMessage.Parser, new[]{ "Type", "Index" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpektraControlMessage), global::SpektraControlMessage.Parser, new[]{ "Type", "Zone", "Index", "Action" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DMXTranslationObject), global::DMXTranslationObject.Parser, new[]{ "LineIn", "LineOut", "DmxStartAddress", "ChannelCount", "DaliArray", "AffectedInput", "Blocking", "Enabled" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DMXProtocolTranslation), global::DMXProtocolTranslation.Parser, new[]{ "Object" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InputStateMessage), global::InputStateMessage.Parser, new[]{ "UseMask" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InputStateResponse), global::InputStateResponse.Parser, new[]{ "Inputs", "InputMask" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LevelCacheResponse), global::LevelCacheResponse.Parser, new[]{ "Levels", "Line", "Page" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinedRoomsMessage), global::JoinedRoomsMessage.Parser, new[]{ "Pairs", "Joined", "ClearJoins" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DiagnosticSystemInfoResponse), global::DiagnosticSystemInfoResponse.Parser, new[]{ "Firmware", "Hardware", "Error", "InputCount", "OutputCount", "IrCount", "ListStepCount", "ListCount", "AlarmCount", "BurninCount", "SpektraSeqCount", "SpektraSeqStepCount", "SpektraThemeCount", "SpektraStaticCount", "ProtoVersion", "LineCount", "Lines", "ProfileCount", "PresetCodeCount", "UserLevelCount", "DmxToDaliCount", "SpektraZoneCount", "LogicCount", "InputDaliCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DiagnosticMessage), global::DiagnosticMessage.Parser, new[]{ "Type", "Page", "Line" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdminProjectPropertiesMessage), global::AdminProjectPropertiesMessage.Parser, new[]{ "DeviceName", "ProjectName", "Longitude", "Latitude", "LocalOffset", "DaylightSavings", "DaylightSavingsStart", "DaylightSavingsEnd", "PollActive" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdminConfigStatusMessage), global::AdminConfigStatusMessage.Parser, new[]{ "ListStatus", "BurnInStatus", "AlarmStatus", "AlarmTimeFromReg", "SensorStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdminNetworkPropertiesMessage), global::AdminNetworkPropertiesMessage.Parser, new[]{ "DHCP", "IP", "MAC", "Gateway", "NTPServer", "NTP" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdminControllerLinesMessage), global::AdminControllerLinesMessage.Parser, new[]{ "Lines" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdminDeviceStatusMessage), global::AdminDeviceStatusMessage.Parser, new[]{ "Temperature", "Battery" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdminSecureLoginMessage), global::AdminSecureLoginMessage.Parser, new[]{ "Username", "Cnonce", "Hash" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdminDALISensorTypeMessage), global::AdminDALISensorTypeMessage.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdminMessage), global::AdminMessage.Parser, new[]{ "Command", "Target", "Data", "NetworkProperties", "ProjectProperties", "ControllerLines", "DeviceStatus", "ConfigStatus", "DeviceTime", "DaliSensorType" }, new[]{ "Payload" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DataMessage), global::DataMessage.Parser, new[]{ "Identifier", "Seq", "Count", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FirmwareMetaMessage), global::FirmwareMetaMessage.Parser, new[]{ "FirmwareVersion", "FirmwareDate", "FirmwareDateUpload", "FirmwareChecksum", "FirmwareChunkCount", "FirmwareBaseAddress", "FirmwareEndAddress" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FirmwareControlMessage), global::FirmwareControlMessage.Parser, new[]{ "Cmd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FirmwareChunkMessage), global::FirmwareChunkMessage.Parser, new[]{ "FirmwareAddress", "TotalBytes", "Payload" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemLogReadMessage), global::SystemLogReadMessage.Parser, new[]{ "LogStartAddress", "LogsRequested", "Logs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemLogMessage), global::SystemLogMessage.Parser, new[]{ "TimeSinceBoot", "Boot", "Netlink", "Ntp", "Trigger", "Spektra", "Schedule", "Userstart" }, new[]{ "Packet" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemLogBoot), global::SystemLogBoot.Parser, new[]{ "Timeclock", "Flags" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemLogNetLink), global::SystemLogNetLink.Parser, new[]{ "IsLinked" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemLogNTP), global::SystemLogNTP.Parser, new[]{ "Timeclock" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemLogTrigger), global::SystemLogTrigger.Parser, new[]{ "Trigger", "Source" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemLogSpektra), global::SystemLogSpektra.Parser, new[]{ "Action", "Type", "Index" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemLogSchedule), global::SystemLogSchedule.Parser, new[]{ "Index", "IsStart", "Second", "Minute", "Hour" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemLogUserStart), global::SystemLogUserStart.Parser, new[]{ "Timeclock" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SystemMetaDataReadMessage), global::SystemMetaDataReadMessage.Parser, new[]{ "InputPressCounter", "ListStartCounter", "SchedulesCounter", "ScreenOnTime", "ScreenDimTime", "ScreenSaverTime", "RebootCounter" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TriggerEvent), global::TriggerEvent.Parser, new[]{ "Type", "Level", "DaliCommand", "TargetAddress", "LineMask" }, new[]{ "Payload" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EventMessage), global::EventMessage.Parser, new[]{ "Event", "Trigger", "Inputs", "Payload", "JoinedRooms" }, new[]{ "EventData" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EdidioMessage), global::EdidioMessage.Parser, new[]{ "MessageId", "Ack", "Inputs", "Outputs", "Irs", "Sensor", "List", "Alarm", "Alarms", "BurnIns", "SensorCommand", "ChangeProfile", "IdentifyMessage", "UpdateTime", "ReadDevice", "DaliMessage", "DaliQuery", "DmxMessage", "ExternalTrigger", "SpektraSettings", "SpektraSequence", "SpektraCalendar", "SpektraTheme", "SpektraRead", "SpektraControl", "DmxTranslator", "InputRequest", "InputResponse", "DiagSystem", "DiagMessage", "AdminMessage", "Event", "SecureDeviceSettings", "FirmwareNew", "FirmwareControl", "FirmwareChunk", "LevelCacheResponse", "JoinedRooms", "ListExtended", "AytMessage", "RdmMessage", "RdmResponseMessage", "LogicMessage", "SecureLogin", "DeviceStateMessage", "SpektraCalendarDay", "SpektraCalendarOverview", "InputsDali", "LogsRead", "MetadataRead", "DaliAddressingMessage", "DaliRemappingMessage" }, new[]{ "Payload" }, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
///********** ENUMERATIONS/Types ***********
/// </summary>
public enum TriggerOperationType {
  /// <summary>
  /// A Short Press occurs when a button is pressed for less than 250ms (and at least 50ms). A Long Press occurs when a button is pressed for longer than 650ms. Holding the button down will repeat the Long Press action every 400ms.
  /// </summary>
  [pbr::OriginalName("MOMENTARY")] Momentary = 0,
  /// <summary>
  /// Instantaneous on short to ground (debounced to 50ms). Trigger occurs once upon entering this state (LOW) and once upon leaving this state (HIGH).
  /// </summary>
  [pbr::OriginalName("LATCHING")] Latching = 1,
  /// <summary>
  /// A temporary output signal
  /// </summary>
  [pbr::OriginalName("MOMENTARY_OUTPUT")] MomentaryOutput = 2,
  /// <summary>
  /// A continous output signal
  /// </summary>
  [pbr::OriginalName("LATCHING_OUTPUT")] LatchingOutput = 3,
  /// <summary>
  /// Rotary device, DALI input device
  /// </summary>
  [pbr::OriginalName("ROTARY")] Rotary = 4,
  /// <summary>
  /// Used to track the enabled/disabled state of an I/O
  /// </summary>
  [pbr::OriginalName("MOMENTARY_DISABLED")] MomentaryDisabled = 128,
  /// <summary>
  /// Used to track the enabled/disabled state of an I/O
  /// </summary>
  [pbr::OriginalName("LATCHING_DISABLED")] LatchingDisabled = 129,
}

public enum TriggerType {
  /// <summary>
  /// For controlling DALI Arc Levels (0 to 254) and 255 for MASK
  /// </summary>
  [pbr::OriginalName("DALI_ARC")] DaliArc = 0,
  /// <summary>
  /// See (https://en.wikipedia.org/wiki/Digital_Addressable_Lighting_Interface#Commands_for_control_gear) for a list of common DALI commands
  /// </summary>
  [pbr::OriginalName("DALI_COMMAND")] DaliCommand = 1,
  /// <summary>
  /// NOTE: Expects the channel number (not zero-based)
  /// </summary>
  [pbr::OriginalName("DMX_CHANNELS_SPLIT_LOW")] DmxChannelsSplitLow = 2,
  /// <summary>
  /// NOTE: Expects the channel number (not zero-based)
  /// </summary>
  [pbr::OriginalName("DMX_CHANNELS_SPLIT_HIGH")] DmxChannelsSplitHigh = 3,
  /// <summary>
  /// NOTE: Expects the channel INDEX to start from, as it takes into account the start address set from Spektra
  /// </summary>
  [pbr::OriginalName("DMX_MULTICAST_CHANNELS_SPLIT_LOW")] DmxMulticastChannelsSplitLow = 4,
  /// <summary>
  /// NOTE: Expects the channel INDEX to start from, as it takes into account the start address set from Spektra
  /// </summary>
  [pbr::OriginalName("DMX_MULTICAST_CHANNELS_SPLIT_HIGH")] DmxMulticastChannelsSplitHigh = 5,
  /// <summary>
  /// Affects all DMX lights as per the Spektra Settings (number of lights and channels per light)
  /// </summary>
  [pbr::OriginalName("DMX_BROADCAST")] DmxBroadcast = 6,
  [pbr::OriginalName("DIDIO")] Didio = 7,
  [pbr::OriginalName("FADE_UP_WITH_MIN")] FadeUpWithMin = 8,
  [pbr::OriginalName("LIST_START")] ListStart = 9,
  [pbr::OriginalName("LIST_START_CONTINUOUS")] ListStartContinuous = 10,
  [pbr::OriginalName("LIST_STOP")] ListStop = 11,
  [pbr::OriginalName("SPEKTRA_START_SEQ")] SpektraStartSeq = 12,
  [pbr::OriginalName("SPEKTRA_STOP_SEQ")] SpektraStopSeq = 13,
  [pbr::OriginalName("SPEKTRA_THEME")] SpektraTheme = 14,
  [pbr::OriginalName("SPEKTRA_STATIC")] SpektraStatic = 15,
  [pbr::OriginalName("SPEKTRA_SCHEDULE")] SpektraSchedule = 16,
  [pbr::OriginalName("LINK_START")] LinkStart = 17,
  [pbr::OriginalName("LINK_STOP")] LinkStop = 18,
  [pbr::OriginalName("DISABLE_BURN")] DisableBurn = 19,
  [pbr::OriginalName("ENABLE_BURN")] EnableBurn = 20,
  [pbr::OriginalName("ON_OFF_TOG")] OnOffTog = 21,
  [pbr::OriginalName("MIN_MAX_TOG")] MinMaxTog = 22,
  [pbr::OriginalName("ENABLE_INPUT")] EnableInput = 23,
  [pbr::OriginalName("DISABLE_INPUT")] DisableInput = 24,
  [pbr::OriginalName("ENABLE_TOG_INPUT")] EnableTogInput = 25,
  [pbr::OriginalName("OUTPUT_TOG")] OutputTog = 26,
  [pbr::OriginalName("OUTPUT_HIGH")] OutputHigh = 27,
  [pbr::OriginalName("OUTPUT_LOW")] OutputLow = 28,
  [pbr::OriginalName("OUTPUT_TRIG")] OutputTrig = 29,
  [pbr::OriginalName("PROFILE_CHANGE")] ProfileChange = 30,
  [pbr::OriginalName("FADE_LONG_PRESS")] FadeLongPress = 31,
  [pbr::OriginalName("SYNCRO")] Syncro = 32,
  [pbr::OriginalName("PRESET_CODE")] PresetCode = 33,
  [pbr::OriginalName("CUSTOM_CODE")] CustomCode = 34,
  [pbr::OriginalName("SPEKTRA_SLEEP")] SpektraSleep = 35,
  [pbr::OriginalName("SPEKTRA_RESUME")] SpektraResume = 36,
  [pbr::OriginalName("DEVICE_RESET")] DeviceReset = 37,
  [pbr::OriginalName("DEVICE_SAVE")] DeviceSave = 38,
  [pbr::OriginalName("USER_LEVEL_STORE_NEW")] UserLevelStoreNew = 39,
  [pbr::OriginalName("USER_LEVEL_SET_DEFAULT")] UserLevelSetDefault = 40,
  [pbr::OriginalName("USER_LEVEL_RECALL")] UserLevelRecall = 41,
  [pbr::OriginalName("ROOM_JOIN")] RoomJoin = 43,
  [pbr::OriginalName("ROOM_UNJOIN")] RoomUnjoin = 44,
  [pbr::OriginalName("TYPE8_TC_WARMER")] Type8TcWarmer = 45,
  [pbr::OriginalName("TYPE8_TC_COOLER")] Type8TcCooler = 46,
  [pbr::OriginalName("TYPE8_TC_ACTUAL")] Type8TcActual = 47,
  [pbr::OriginalName("LOGIC_OPERATION")] LogicOperation = 48,
  [pbr::OriginalName("ALARM_ENABLE")] AlarmEnable = 49,
  [pbr::OriginalName("ALARM_DISABLE")] AlarmDisable = 50,
  /// <summary>
  /// Puts the DALI Sensor in 'override mode', which means it will no longer control the lighting until occupancy has timed-out or control is manually resumed
  /// </summary>
  [pbr::OriginalName("DALI_CONTROL_SENSOR_OVERRIDE")] DaliControlSensorOverride = 51,
  /// <summary>
  /// Sets the occupancy timer to zero and puts the DALI Sensor in a temporary 'disable mode' (duration depends on Sensor configuration: 'Disable Period')
  /// </summary>
  [pbr::OriginalName("DALI_CONTROL_SENSOR_TEMP_DISABLE")] DaliControlSensorTempDisable = 52,
  /// <summary>
  /// Takes the DALI Sensor out of 'override mode'
  /// </summary>
  [pbr::OriginalName("DALI_CONTROL_SENSOR_RESUME")] DaliControlSensorResume = 53,
  /// <summary>
  /// For controlling DALI Arc Levels (0 to 254) and 255 for MASK - Sets associated group to override mode
  /// </summary>
  [pbr::OriginalName("DALI_ARC_OVERRIDE")] DaliArcOverride = 54,
  /// <summary>
  /// For sending DALI commands - Sets associated group to override mode
  /// </summary>
  [pbr::OriginalName("DALI_COMMAND_OVERRIDE")] DaliCommandOverride = 55,
  /// <summary>
  /// Non-native DALI command override (sets associated group to override mode)
  /// </summary>
  [pbr::OriginalName("FADE_UP_WITH_MIN_OVERRIDE")] FadeUpWithMinOverride = 56,
  /// <summary>
  /// Non-native DALI command override (sets associated group to override mode)
  /// </summary>
  [pbr::OriginalName("ON_OFF_TOG_OVERRIDE")] OnOffTogOverride = 57,
  /// <summary>
  /// Non-native DALI command override (sets associated group to override mode)
  /// </summary>
  [pbr::OriginalName("MIN_MAX_TOG_OVERRIDE")] MinMaxTogOverride = 58,
  [pbr::OriginalName("MAX_OFF_TOG")] MaxOffTog = 59,
  /// <summary>
  /// Non-native DALI command override (sets associated group to override mode)
  /// </summary>
  [pbr::OriginalName("MAX_OFF_TOG_OVERRIDE")] MaxOffTogOverride = 60,
  /// <summary>
  /// Non-native DALI command override (sets associated group to override mode)
  /// </summary>
  [pbr::OriginalName("FADE_LONG_PRESS_OVERRIDE")] FadeLongPressOverride = 61,
  /// <summary>
  /// Non-native DALI command override (sets associated group to override mode)
  /// </summary>
  [pbr::OriginalName("USER_LEVEL_RECALL_OVERRIDE")] UserLevelRecallOverride = 62,
  /// <summary>
  /// DMX Spektra Zone Fade UP
  /// </summary>
  [pbr::OriginalName("DMX_ZONE_FADE_UP")] DmxZoneFadeUp = 63,
  /// <summary>
  /// DMX Spektra Zone Fade DOWN
  /// </summary>
  [pbr::OriginalName("DMX_ZONE_FADE_DOWN")] DmxZoneFadeDown = 64,
  /// <summary>
  /// Enable Logging to EEPROM to be read by configurator
  /// </summary>
  [pbr::OriginalName("LOGGING_LEVEL")] LoggingLevel = 65,
  /// <summary>
  /// This TriggerType should always be at the bottom of the list. Add any new TriggerTypes above it (up to 253).
  /// </summary>
  [pbr::OriginalName("NO_COMMAND")] NoCommand = 254,
}

public enum ReadType {
  [pbr::OriginalName("INPUTS")] Inputs = 0,
  [pbr::OriginalName("OUTPUTS")] Outputs = 1,
  [pbr::OriginalName("IR")] Ir = 2,
  [pbr::OriginalName("SENSOR")] Sensor = 3,
  /// <summary>
  /// DEPRECATED: SENSORS (4)
  /// </summary>
  [pbr::OriginalName("LIST")] List = 5,
  /// <summary>
  /// DEPRECATED: LISTS (6)
  /// </summary>
  [pbr::OriginalName("ALARMS")] Alarms = 7,
  [pbr::OriginalName("BURN_IN")] BurnIn = 8,
  [pbr::OriginalName("PROJECT")] Project = 9,
  [pbr::OriginalName("NETWORK")] Network = 10,
  [pbr::OriginalName("DEVICE")] Device = 11,
  [pbr::OriginalName("POLL_DATA")] PollData = 12,
  [pbr::OriginalName("LIST_EXTENDED")] ListExtended = 13,
  [pbr::OriginalName("LOGIC")] Logic = 14,
  [pbr::OriginalName("DALI_INPUTS")] DaliInputs = 15,
}

public enum AlarmRepeatType {
  [pbr::OriginalName("ALARM_NO_REPEAT")] AlarmNoRepeat = 0,
  [pbr::OriginalName("ALARM_REPEAT_DAILY")] AlarmRepeatDaily = 1,
  [pbr::OriginalName("ALARM_REPEAT_WORK_DAY")] AlarmRepeatWorkDay = 2,
  [pbr::OriginalName("ALARM_REPEAT_WEEKLY")] AlarmRepeatWeekly = 3,
  [pbr::OriginalName("ALARM_REPEAT_MONTHLY")] AlarmRepeatMonthly = 4,
}

public enum AlarmAstroType {
  [pbr::OriginalName("ALARM_NO_ASTRO")] AlarmNoAstro = 0,
  [pbr::OriginalName("ALARM_SUNRUSE")] AlarmSunruse = 1,
  [pbr::OriginalName("ALARM_SUNSET")] AlarmSunset = 2,
}

public enum SpektraTargetType {
  [pbr::OriginalName("SETTINGS")] Settings = 0,
  [pbr::OriginalName("SEQUENCE")] Sequence = 1,
  [pbr::OriginalName("THEME")] Theme = 2,
  [pbr::OriginalName("STATIC")] Static = 3,
  [pbr::OriginalName("CALENDAR")] Calendar = 4,
}

public enum SpektraActionType {
  [pbr::OriginalName("START")] Start = 0,
  [pbr::OriginalName("STOP")] Stop = 1,
  [pbr::OriginalName("PAUSE")] Pause = 2,
  [pbr::OriginalName("SAVE")] Save = 3,
}

public enum SpektraUnscheduledBehaviourType {
  /// <summary>
  /// Unless otherwise specified, this is a rotate sequence with random colours rotating every 5 seconds
  /// </summary>
  [pbr::OriginalName("RUN_RANDOM_COLOURED_SEQUENCE")] RunRandomColouredSequence = 0,
  /// <summary>
  /// Can be used to set a 'Default Sequence' with a known pattern and colour combination
  /// </summary>
  [pbr::OriginalName("RUN_SEQUENCE_1")] RunSequence1 = 1,
  /// <summary>
  /// Resume the last Sequence or Theme that Spektra had active
  /// </summary>
  [pbr::OriginalName("RESUME_PREVIOUS")] ResumePrevious = 2,
  /// <summary>
  /// Left as the last possible type, fill between 0 and 253 as necessary
  /// </summary>
  [pbr::OriginalName("DO_NOTHING")] DoNothing = 254,
}

public enum LineAddressingType {
  /// <summary>
  /// Control Lines are independently adddressed (e.g. DMX 1 to 512 per line)
  /// </summary>
  [pbr::OriginalName("INDEPENDENT")] Independent = 0,
  /// <summary>
  /// Control Lines are consecutively addressed (e.g. DMX 1 to 512 on the first line, 513 to 1024 on the next, etc.)
  /// </summary>
  [pbr::OriginalName("CONSECUTIVE")] Consecutive = 1,
}

public enum AckMessageType {
  /// <summary>
  /// May indicate an issue with the protocol (e.g. a mismatch in expected fields between clients). Ensure both parties are using the latest version.
  /// </summary>
  [pbr::OriginalName("DECODE_FAILED")] DecodeFailed = 0,
  /// <summary>
  /// A resource was requested beyond the amount available.
  /// </summary>
  [pbr::OriginalName("INDEX_OUT_OF_BOUNDS")] IndexOutOfBounds = 1,
  /// <summary>
  /// The provided message was not able to be handled or processed (likely due to a lack of enough information or incorrect values).
  /// </summary>
  [pbr::OriginalName("UNEXPECTED_TYPE")] UnexpectedType = 2,
  /// <summary>
  /// Not currently in use.
  /// </summary>
  [pbr::OriginalName("ENCODE_FAILED")] EncodeFailed = 3,
  /// <summary>
  /// Not currently in use.
  /// </summary>
  [pbr::OriginalName("KEY_MISMATCH")] KeyMismatch = 4,
  /// <summary>
  /// The message was decoded and handled successfully.
  /// </summary>
  [pbr::OriginalName("SUCCESS")] Success = 5,
  /// <summary>
  /// The message was decoded but had invalid data for the intended outcome.
  /// </summary>
  [pbr::OriginalName("INVALID_PARAMS")] InvalidParams = 6,
  /// <summary>
  /// The message was decoded but the requested action was not valid for current the state of the device.
  /// </summary>
  [pbr::OriginalName("UNEXPECTED_COMMAND")] UnexpectedCommand = 7,
  /// <summary>
  /// The message could not be received or sent due to an internal issue.
  /// </summary>
  [pbr::OriginalName("COMMUNICATION_FAILED")] CommunicationFailed = 8,
  /// <summary>
  /// May indicate contention for a shared resource or that an existing task is taking longer than expected and the latest request has timed-out.
  /// </summary>
  [pbr::OriginalName("COMMUNICATION_TIMEOUT")] CommunicationTimeout = 9,
  /// <summary>
  /// May indicate too much data was in the request or the required reply would be too big to handle.
  /// </summary>
  [pbr::OriginalName("DATA_TOO_LONG")] DataTooLong = 10,
  /// <summary>
  /// May indicate that the message is out of context (e.g. an "end" command for a process that is not running) or that the message requests a feature that is not yet implemented.
  /// </summary>
  [pbr::OriginalName("UNEXPECTED_CASE")] UnexpectedCase = 11,
  /// <summary>
  /// Typically indicates that a request was valid, but the relevant content is "full" and thus elements must be removed before continuing.
  /// </summary>
  [pbr::OriginalName("SLOTS_FULL")] SlotsFull = 12,
  /// <summary>
  /// The message could not be actioned because the connection has not been authorised.
  /// </summary>
  [pbr::OriginalName("UNAUTHORISED")] Unauthorised = 13,
  /// <summary>
  /// Can be returned in the case where some but not all Lines in a line_mask successfully sent
  /// </summary>
  [pbr::OriginalName("PARTIAL_SUCCESS")] PartialSuccess = 14,
  /// <summary>
  /// For whatever reason, the intended command did not complete
  /// </summary>
  [pbr::OriginalName("COMMAND_FAILED")] CommandFailed = 15,
}

public enum Type8CommandType {
  [pbr::OriginalName("SET_TEMP_X_COORD")] SetTempXCoord = 0,
  [pbr::OriginalName("SET_TEMP_Y_COORD")] SetTempYCoord = 1,
  [pbr::OriginalName("ACTIVATE")] Activate = 2,
  [pbr::OriginalName("X_COORD_STEP_UP")] XCoordStepUp = 3,
  [pbr::OriginalName("X_COORD_STEP_DOWN")] XCoordStepDown = 4,
  [pbr::OriginalName("Y_COORD_STEP_UP")] YCoordStepUp = 5,
  [pbr::OriginalName("Y_COORD_STEP_DOWN")] YCoordStepDown = 6,
  [pbr::OriginalName("SET_TEMP_COLOUR_TEMPERATURE")] SetTempColourTemperature = 7,
  [pbr::OriginalName("COLOUR_TEMPERATURE_STEP_COOLER")] ColourTemperatureStepCooler = 8,
  [pbr::OriginalName("COLOUR_TEMPERATURE_STEP_WARMER")] ColourTemperatureStepWarmer = 9,
  [pbr::OriginalName("SET_TEMP_PRI_N_DIMLEVEL")] SetTempPriNDimlevel = 10,
  [pbr::OriginalName("SET_TEMP_RGB_DIMLEVEL")] SetTempRgbDimlevel = 11,
  [pbr::OriginalName("SET_TEMP_WAF_DIMLEVEL")] SetTempWafDimlevel = 12,
  [pbr::OriginalName("SET_TEMP_RGBWAF_CONTROL")] SetTempRgbwafControl = 13,
  [pbr::OriginalName("COPY_REPORT_TEMPORARY")] CopyReportTemporary = 14,
  [pbr::OriginalName("STORE_TY_PRI_N")] StoreTyPriN = 16,
  [pbr::OriginalName("STORE_XY_COORD_PRI_N")] StoreXyCoordPriN = 17,
  [pbr::OriginalName("STORE_COLOUR_TEMPERATURE_LIMIT")] StoreColourTemperatureLimit = 18,
  [pbr::OriginalName("STORE_GEAR_FEATURES_STATUS")] StoreGearFeaturesStatus = 19,
  [pbr::OriginalName("ASSIGN_COLOR_LINKED_CH")] AssignColorLinkedCh = 21,
  [pbr::OriginalName("START_AUTO_CAL")] StartAutoCal = 22,
  [pbr::OriginalName("ENABLE_DEVICE_TYPE8")] EnableDeviceType8 = 48,
}

public enum Type8QueryType {
  /// <summary>
  /// Required as the first "default" element for the Protocol. Will not perform any action.
  /// </summary>
  [pbr::OriginalName("TYPE8_QUERY_NULL")] Type8QueryNull = 0,
  [pbr::OriginalName("TYPE8_QUERY_GEAR_FEATURES_STATUS")] Type8QueryGearFeaturesStatus = 247,
  [pbr::OriginalName("TYPE8_QUERY_COLOUR_STATUS")] Type8QueryColourStatus = 248,
  [pbr::OriginalName("TYPE8_QUERY_COLOUR_TYPE_FEATURES")] Type8QueryColourTypeFeatures = 249,
  [pbr::OriginalName("TYPE8_QUERY_COLOUR_VALUE")] Type8QueryColourValue = 250,
  [pbr::OriginalName("TYPE8_QUERY_RGBWAF_CONTROL")] Type8QueryRgbwafControl = 251,
  [pbr::OriginalName("TYPE8_QUERY_ASSIGNED_COLOUR")] Type8QueryAssignedColour = 252,
  [pbr::OriginalName("TYPE8_QUERY_EXT_VERSION_NUM")] Type8QueryExtVersionNum = 254,
}

public enum LineType {
  [pbr::OriginalName("LINE_EMPTY")] LineEmpty = 0,
  [pbr::OriginalName("LINE_DALI")] LineDali = 1,
  [pbr::OriginalName("LINE_DMX")] LineDmx = 2,
  /// <summary>
  /// Must be set in the case of DMX to DALI Translation.
  /// </summary>
  [pbr::OriginalName("LINE_DMX_IN")] LineDmxIn = 3,
}

public enum EventType {
  /// <summary>
  /// Sent by the client to register for events.
  /// </summary>
  [pbr::OriginalName("REGISTER")] Register = 0,
  /// <summary>
  /// Emitted when trigger runs an action listed in TriggerType.
  /// </summary>
  [pbr::OriginalName("TRIGGER_EVENT")] TriggerEvent = 1,
  /// <summary>
  /// Emitted when an input is triggered.
  /// </summary>
  [pbr::OriginalName("INPUT_EVENT")] InputEvent = 2,
  /// <summary>
  /// Emitted when a sensor is triggered.
  /// </summary>
  [pbr::OriginalName("SENSOR_EVENT")] SensorEvent = 3,
  /// <summary>
  /// Emitted when an DALI/DMX/phyiscal output type event is done. References an action in TriggerType.
  /// </summary>
  [pbr::OriginalName("CONTROL_EVENT")] ControlEvent = 4,
  /// <summary>
  /// Emitted when rooms are joined/unjoined.
  /// </summary>
  [pbr::OriginalName("ROOM_JOIN_EVENT")] RoomJoinEvent = 5,
}

public enum DALIQueryType {
  /// <summary>
  /// Required as the first "default" element for the Protocol. Will not perform any action.
  /// </summary>
  [pbr::OriginalName("DALI_QUERY_NULL")] DaliQueryNull = 0,
  [pbr::OriginalName("DALI_QUERY_STATUS")] DaliQueryStatus = 144,
  [pbr::OriginalName("DALI_QUERY_BALLAST")] DaliQueryBallast = 145,
  [pbr::OriginalName("DALI_QUERY_LAMP_FAILURE")] DaliQueryLampFailure = 146,
  [pbr::OriginalName("DALI_QUERY_LAMP_POWER_ON")] DaliQueryLampPowerOn = 147,
  [pbr::OriginalName("DALI_QUERY_LIMIT_ERROR")] DaliQueryLimitError = 148,
  [pbr::OriginalName("DALI_QUERY_RESET_STATE")] DaliQueryResetState = 149,
  [pbr::OriginalName("DALI_QUERY_MISSING_SHORT_ADDRESS")] DaliQueryMissingShortAddress = 150,
  [pbr::OriginalName("DALI_QUERY_VERSION_NUMBER")] DaliQueryVersionNumber = 151,
  [pbr::OriginalName("DALI_QUERY_DTR0")] DaliQueryDtr0 = 152,
  [pbr::OriginalName("DALI_QUERY_DEVICE_TYPE")] DaliQueryDeviceType = 153,
  [pbr::OriginalName("DALI_QUERY_PHYSICAL_MIN")] DaliQueryPhysicalMin = 154,
  [pbr::OriginalName("DALI_QUERY_POWER_FAILURE")] DaliQueryPowerFailure = 155,
  [pbr::OriginalName("DALI_QUERY_DTR1")] DaliQueryDtr1 = 156,
  [pbr::OriginalName("DALI_QUERY_DTR2")] DaliQueryDtr2 = 157,
  [pbr::OriginalName("DALI_QUERY_OPERATING_MODE")] DaliQueryOperatingMode = 158,
  [pbr::OriginalName("DALI_QUERY_LIGHTSOURCE_TYPE")] DaliQueryLightsourceType = 159,
  [pbr::OriginalName("DALI_QUERY_ACTUAL_LEVEL")] DaliQueryActualLevel = 160,
  [pbr::OriginalName("DALI_QUERY_MAX_LEVEL")] DaliQueryMaxLevel = 161,
  [pbr::OriginalName("DALI_QUERY_MIN_LEVEL")] DaliQueryMinLevel = 162,
  [pbr::OriginalName("DALI_QUERY_POWER_ON_LEVEL")] DaliQueryPowerOnLevel = 163,
  [pbr::OriginalName("DALI_QUERY_SYSTEM_FAILURE_LEVEL")] DaliQuerySystemFailureLevel = 164,
  [pbr::OriginalName("DALI_QUERY_FADETIME_FADERATE")] DaliQueryFadetimeFaderate = 165,
  [pbr::OriginalName("DALI_QUERY_MANUFACTURER_SPECIFIC_MODE")] DaliQueryManufacturerSpecificMode = 166,
  [pbr::OriginalName("DALI_QUERY_NEXT_DEVICE_TYPE")] DaliQueryNextDeviceType = 167,
  [pbr::OriginalName("DALI_QUERY_EXTENDED_FADE_TIME")] DaliQueryExtendedFadeTime = 168,
  [pbr::OriginalName("DALI_QUERY_CONTROL_GEAR_FAILURE")] DaliQueryControlGearFailure = 170,
  [pbr::OriginalName("DALI_QUERY_SCENE_X_LEVEL")] DaliQuerySceneXLevel = 176,
  [pbr::OriginalName("DALI_QUERY_GROUPS_0_7")] DaliQueryGroups07 = 192,
  [pbr::OriginalName("DALI_QUERY_GROUPS_8_15")] DaliQueryGroups815 = 193,
  [pbr::OriginalName("DALI_QUERY_RANDOM_ADDRESS_H")] DaliQueryRandomAddressH = 194,
  [pbr::OriginalName("DALI_QUERY_RANDOM_ADDRESS_M")] DaliQueryRandomAddressM = 195,
  [pbr::OriginalName("DALI_QUERY_RANDOM_ADDRESS_L")] DaliQueryRandomAddressL = 196,
  [pbr::OriginalName("DALI_QUERY_READ_DTR_0_1")] DaliQueryReadDtr01 = 197,
  [pbr::OriginalName("DALI_QUERY_APP_EXT_COMMANDS")] DaliQueryAppExtCommands = 224,
  [pbr::OriginalName("DALI_QUERY_EXT_VERSION_NUMBER")] DaliQueryExtVersionNumber = 255,
  [pbr::OriginalName("DALI_QUERY_COMPARE")] DaliQueryCompare = 260,
  [pbr::OriginalName("DALI_QUERY_VERIFY_SHORT_ADDRESS")] DaliQueryVerifyShortAddress = 268,
  [pbr::OriginalName("DALI_QUERY_SHORT_ADDRESS")] DaliQueryShortAddress = 269,
}

/// <summary>
/// Standard DALI commands.
/// </summary>
public enum DALICommandType {
  [pbr::OriginalName("DALI_OFF")] DaliOff = 0,
  [pbr::OriginalName("DALI_FADE_UP")] DaliFadeUp = 1,
  [pbr::OriginalName("DALI_FADE_DOWN")] DaliFadeDown = 2,
  [pbr::OriginalName("DALI_STEP_UP")] DaliStepUp = 3,
  [pbr::OriginalName("DALI_STEP_DOWN")] DaliStepDown = 4,
  [pbr::OriginalName("DALI_MAX_LEVEL")] DaliMaxLevel = 5,
  [pbr::OriginalName("DALI_MIN_LEVEL")] DaliMinLevel = 6,
  [pbr::OriginalName("DALI_STEP_DOWN_OFF")] DaliStepDownOff = 7,
  [pbr::OriginalName("DALI_ON_STEP_UP")] DaliOnStepUp = 8,
  [pbr::OriginalName("DALI_ENABLE_DAPC_SEQ")] DaliEnableDapcSeq = 9,
  [pbr::OriginalName("DALI_RECALL_LAST_ACTIVE_LEVEL")] DaliRecallLastActiveLevel = 10,
  [pbr::OriginalName("DALI_RECALL_SCENE_X")] DaliRecallSceneX = 16,
  [pbr::OriginalName("DALI_RESET")] DaliReset = 32,
  [pbr::OriginalName("DALI_STORE_ACTUAL_LEVEL_DTR0")] DaliStoreActualLevelDtr0 = 33,
  [pbr::OriginalName("DALI_SAVE_PERSISTENT_VARS")] DaliSavePersistentVars = 34,
  [pbr::OriginalName("DALI_SET_OPERATING_MODE")] DaliSetOperatingMode = 35,
  [pbr::OriginalName("DALI_RESET_MEMORY_BANK")] DaliResetMemoryBank = 36,
  [pbr::OriginalName("DALI_IDENTIFY_DEVICE")] DaliIdentifyDevice = 37,
  [pbr::OriginalName("DALI_SET_MAX_LEVEL")] DaliSetMaxLevel = 42,
  [pbr::OriginalName("DALI_SET_MIN_LEVEL")] DaliSetMinLevel = 43,
  [pbr::OriginalName("DALI_SET_SYSTEM_FAILURE_LEVEL")] DaliSetSystemFailureLevel = 44,
  [pbr::OriginalName("DALI_SET_POWER_ON_LEVEL")] DaliSetPowerOnLevel = 45,
  [pbr::OriginalName("DALI_SET_FADE_TIME")] DaliSetFadeTime = 46,
  [pbr::OriginalName("DALI_SET_FADE_RATE")] DaliSetFadeRate = 47,
  [pbr::OriginalName("DALI_SET_EXT_FADE_TIME")] DaliSetExtFadeTime = 48,
  [pbr::OriginalName("DALI_SET_SCENE_X")] DaliSetSceneX = 64,
  [pbr::OriginalName("DALI_REMOVE_FROM_SCENE_X")] DaliRemoveFromSceneX = 80,
  [pbr::OriginalName("DALI_ADD_TO_GROUP_X")] DaliAddToGroupX = 96,
  [pbr::OriginalName("DALI_REMOVE_FROM_GROUP_X")] DaliRemoveFromGroupX = 112,
  [pbr::OriginalName("DALI_SET_SHORT_ADDRESS")] DaliSetShortAddress = 128,
  [pbr::OriginalName("DALI_ENABLE_WRITE_MEMORY")] DaliEnableWriteMemory = 129,
  [pbr::OriginalName("DALI_TERMINATE")] DaliTerminate = 255,
  [pbr::OriginalName("DALI_INITIALISE")] DaliInitialise = 258,
  [pbr::OriginalName("DALI_RANDOMISE")] DaliRandomise = 259,
  [pbr::OriginalName("DALI_WITHDRAW")] DaliWithdraw = 261,
  [pbr::OriginalName("DALI_SEARCH_ADDR_H")] DaliSearchAddrH = 264,
  [pbr::OriginalName("DALI_SEARCH_ADDR_M")] DaliSearchAddrM = 265,
  [pbr::OriginalName("DALI_SEARCH_ADDR_L")] DaliSearchAddrL = 266,
  [pbr::OriginalName("DALI_PROGRAM_SHORT_ADDRESS")] DaliProgramShortAddress = 267,
}

/// <summary>
/// Non-native DALI Commands provided as quality-of-life functions.
/// </summary>
public enum CustomDALICommandType {
  /// <summary>
  /// DALI Arc level (0 - 254)
  /// </summary>
  [pbr::OriginalName("DALI_ARC_LEVEL")] DaliArcLevel = 0,
  /// <summary>
  /// Runs a DALI_ENABLE_DAPC_SEQUENCE if needed.
  /// </summary>
  [pbr::OriginalName("DALI_DAPC_LEVEL")] DaliDapcLevel = 1,
  /// <summary>
  /// Specified by Group ID (0 - 15)
  /// </summary>
  [pbr::OriginalName("DALI_GROUP_ARC_LEVEL")] DaliGroupArcLevel = 2,
  /// <summary>
  /// No specific Address required, sent to all Devices
  /// </summary>
  [pbr::OriginalName("DALI_BROADCAST_SCENE")] DaliBroadcastScene = 3,
  /// <summary>
  /// Specified by Group ID (0 - 15)
  /// </summary>
  [pbr::OriginalName("DALI_SCENE_ON_GROUP")] DaliSceneOnGroup = 4,
  /// <summary>
  /// Specified by Address (0 - 63)
  /// </summary>
  [pbr::OriginalName("DALI_SCENE_ON_ADDRESS")] DaliSceneOnAddress = 5,
}

public enum AdminPropertyType {
  /// <summary>
  /// The device name that appears on the network. Limited to 16 characters.
  /// </summary>
  [pbr::OriginalName("DEVICE_NAME")] DeviceName = 0,
  /// <summary>
  /// Used for documentation. Limited to 32 characters.
  /// </summary>
  [pbr::OriginalName("PROJECT_NAME")] ProjectName = 1,
  /// <summary>
  /// Used for calculating astronomical sunrise / sunset.
  /// </summary>
  [pbr::OriginalName("LONGITUDE")] Longitude = 2,
  /// <summary>
  /// Used for calculating astronomical sunrise / sunset.
  /// </summary>
  [pbr::OriginalName("LATITUDE")] Latitude = 3,
  /// <summary>
  /// Used for calculating astronomical sunrise / sunset.
  /// </summary>
  [pbr::OriginalName("LOCAL_UTC_OFFSET")] LocalUtcOffset = 4,
  /// <summary>
  /// Used for calculating astronomical sunrise / sunset.
  /// </summary>
  [pbr::OriginalName("DAYLIGHT_SAVINGS")] DaylightSavings = 5,
  /// <summary>
  /// Whether or not to poll the current level of DALI devices to keep an in-memory cache up-to-date.
  /// </summary>
  [pbr::OriginalName("POLL_ACTIVE")] PollActive = 6,
  /// <summary>
  /// Whether or not the device should use a static IP or expect a DHCP server to provide it with an IP.
  /// </summary>
  [pbr::OriginalName("DHCP_ENABLED")] DhcpEnabled = 7,
  /// <summary>
  /// The static IP address to use if DHCP_ENABLED is FALSE.
  /// </summary>
  [pbr::OriginalName("IP_ADDR")] IpAddr = 8,
  /// <summary>
  /// The MAC Address of the device. Expected format: [40:D8:55:1B:XX:XX]
  /// </summary>
  [pbr::OriginalName("MAC_ADDR")] MacAddr = 9,
  /// <summary>
  /// The IP address of the gateway for the network this device will be installed on.
  /// </summary>
  [pbr::OriginalName("GATEWAY_IP")] GatewayIp = 10,
  /// <summary>
  /// Contains numerous properties such as DHCP, NTP, Gateway, IP, MAC
  /// </summary>
  [pbr::OriginalName("NETWORK_PROPERTIES")] NetworkProperties = 11,
  /// <summary>
  /// Contains numerous properties such as Device Name (documentation only; not network hostname), Project Name, Latitude, Longitude, UTC Offset, DLS, Polling
  /// </summary>
  [pbr::OriginalName("SYSTEM_PROPERTIES")] SystemProperties = 12,
  /// <summary>
  /// Allows you to specify the daughterboards installed in the device [NONE, DALI, DMX, DMX_IN]
  /// </summary>
  [pbr::OriginalName("CONTROLLER_LINES")] ControllerLines = 13,
  /// <summary>
  /// Allows you to request a reset to default values for all data stored in EEPROM
  /// </summary>
  [pbr::OriginalName("EEPROM_FULL_CHIP")] EepromFullChip = 14,
  /// <summary>
  /// Allows you to request a reset to default values for the Config Data stored in EEPROM
  /// </summary>
  [pbr::OriginalName("CONFIG_DATA")] ConfigData = 15,
  /// <summary>
  /// Allows you to request a reset to default values for the Spektra Data stored in EEPROM
  /// </summary>
  [pbr::OriginalName("SPEKTRA_DATA")] SpektraData = 16,
  /// <summary>
  /// Can be used to request the Device Status: Temperature and Battery Voltage
  /// </summary>
  [pbr::OriginalName("DEVICE_STATUS")] DeviceStatus = 17,
  /// <summary>
  /// Can be used to request the Config Status: Active Alarm, List States, Sensor States, Burn-in States
  /// </summary>
  [pbr::OriginalName("CONFIG_STATUS")] ConfigStatus = 18,
  /// <summary>
  /// Get or Set the RTC time on the device
  /// </summary>
  [pbr::OriginalName("DEVICE_TIME")] DeviceTime = 19,
  /// <summary>
  /// Allows you to Get or Set the NTP parameters (i.e. NTP Server) used for maintaining the RTC via NTP updates.
  /// </summary>
  [pbr::OriginalName("NTP_DETAILS")] NtpDetails = 20,
  /// <summary>
  /// Provides actions for Tridonic MSensor control: "ADD" to un-mute all. "REMOVE" to mute all. "RESET" to remove all.
  /// </summary>
  [pbr::OriginalName("TRIDONIC_MSENSORS")] TridonicMsensors = 21,
  /// <summary>
  /// Allows you to Get or Set the "Secure Session" status of the device
  /// </summary>
  [pbr::OriginalName("SECURE_SESSION")] SecureSession = 22,
  /// <summary>
  /// Allows you to request a Nonce to perform a Secure Login
  /// </summary>
  [pbr::OriginalName("NONCE")] Nonce = 23,
  /// <summary>
  /// The type of DALI frame (24 or 25-bit) for eDALI packets to/from motion sensors
  /// </summary>
  [pbr::OriginalName("DALI_SENSOR_TYPE")] DaliSensorType = 24,
  /// <summary>
  /// Will reboot the device when used with the 'RUN' AdminCommandType
  /// </summary>
  [pbr::OriginalName("DEVICE_REBOOT")] DeviceReboot = 25,
  /// <summary>
  /// Will reset the system logs when used with a 'RESET' AdminCommandTyppe
  /// </summary>
  [pbr::OriginalName("SYSTEM_LOGGING")] SystemLogging = 26,
}

public enum AdminCommandType {
  [pbr::OriginalName("SET")] Set = 0,
  [pbr::OriginalName("GET")] Get = 1,
  [pbr::OriginalName("ADD")] Add = 2,
  [pbr::OriginalName("REMOVE")] Remove = 3,
  [pbr::OriginalName("RESET")] Reset = 4,
  [pbr::OriginalName("RUN")] Run = 5,
}

/// <summary>
/// DALI status query response bitmask values
/// </summary>
public enum DALIStatusType {
  /// <summary>
  /// Not technically in DALI. But this is the default when mask = 0b00000000
  /// </summary>
  [pbr::OriginalName("LAMP_OFF")] LampOff = 0,
  [pbr::OriginalName("CONTROL_GEAR_FAILURE")] ControlGearFailure = 1,
  [pbr::OriginalName("LAMP_FAILURE")] LampFailure = 2,
  [pbr::OriginalName("LAMP_ON")] LampOn = 4,
  [pbr::OriginalName("LIMIT_ERROR")] LimitError = 8,
  /// <summary>
  /// 
  /// </summary>
  [pbr::OriginalName("FADE_RUNNING")] FadeRunning = 16,
  [pbr::OriginalName("RESET_STATE")] ResetState = 32,
  [pbr::OriginalName("SHORT_ADDRESS")] ShortAddress = 64,
  [pbr::OriginalName("POWER_CYCLE_SEEN")] PowerCycleSeen = 128,
}

public enum DALIRXStatusFlag {
  [pbr::OriginalName("WAITING")] Waiting = 0,
  [pbr::OriginalName("RECEIVING_FRAME")] ReceivingFrame = 1,
  [pbr::OriginalName("NO_RECEIVED_FRAME")] NoReceivedFrame = 2,
  [pbr::OriginalName("RECEIVED_8_BIT_FRAME")] Received8BitFrame = 3,
  [pbr::OriginalName("RECEIVED_16_BIT_FRAME")] Received16BitFrame = 4,
  [pbr::OriginalName("RECEIVED_24_BIT_FRAME")] Received24BitFrame = 5,
  [pbr::OriginalName("RECEIVED_PARTIAL_FRAME")] ReceivedPartialFrame = 6,
  [pbr::OriginalName("IDLE")] Idle = 7,
  [pbr::OriginalName("CALIBRATION")] Calibration = 8,
  [pbr::OriginalName("ERROR_WHILE_SENDING")] ErrorWhileSending = 254,
  [pbr::OriginalName("ERROR_WHILE_RECEIVING")] ErrorWhileReceiving = 255,
}

public enum DiagnosticMessageType {
  /// <summary>
  /// Can be used to retrieve a large number of properties that describe the capabilities of the device. (Number of supported Lists, Alarms, etc.).
  /// </summary>
  [pbr::OriginalName("DIAGNOSTIC_SYSTEM_INFO")] DiagnosticSystemInfo = 0,
  /// <summary>
  /// Not currently supported (will default to SYSTEM_INFO).
  /// </summary>
  [pbr::OriginalName("DIAGNOSTIC_INPUT_STATUS")] DiagnosticInputStatus = 1,
  /// <summary>
  /// Can be used to retrieve the current entries of the in-memory DALI values cache.
  /// </summary>
  [pbr::OriginalName("DALI_LEVEL_CACHE")] DaliLevelCache = 2,
  /// <summary>
  /// Can be used to retrieve the current entries of the in-memory DMX levels cache. Results must be paginated due to size of DMX universe (512).
  /// </summary>
  [pbr::OriginalName("DMX_LEVEL_CACHE")] DmxLevelCache = 3,
  /// <summary>
  /// Can be used to manipulate the "Joined Rooms" state.
  /// </summary>
  [pbr::OriginalName("ROOM_JOINS")] RoomJoins = 4,
}

public enum FirmwareCommandType {
  [pbr::OriginalName("FW_READY")] FwReady = 0,
  [pbr::OriginalName("FW_APPLY")] FwApply = 1,
  [pbr::OriginalName("FW_VERIFY")] FwVerify = 2,
  [pbr::OriginalName("FW_VERIFY_FAILED")] FwVerifyFailed = 3,
  [pbr::OriginalName("FW_VERIFY_SUCCESS")] FwVerifySuccess = 4,
  [pbr::OriginalName("FW_READ")] FwRead = 5,
}

public enum SpektraTransitionType {
  /// <summary>
  /// Blended colour transitions. Example: Transition between red and green will go through yellow.
  /// </summary>
  [pbr::OriginalName("BLEND")] Blend = 0,
  /// <summary>
  /// Instant colour transitions.
  /// </summary>
  [pbr::OriginalName("SNAP")] Snap = 1,
  /// <summary>
  /// Example: Transition between red and green will fade the light off then on between colours. Not currently supported.
  /// </summary>
  [pbr::OriginalName("FADE_TO_BLACK")] FadeToBlack = 2,
}

public enum LogicType {
  [pbr::OriginalName("DALI_LEVEL")] DaliLevel = 0,
  [pbr::OriginalName("INPUT_STATE")] InputState = 1,
  [pbr::OriginalName("LIST_RUNNING")] ListRunning = 2,
  [pbr::OriginalName("OCCUPANCY_DETECTED")] OccupancyDetected = 3,
  [pbr::OriginalName("DMX_PRESENT")] DmxPresent = 4,
  [pbr::OriginalName("CAL_WEEKDAY")] CalWeekday = 5,
  [pbr::OriginalName("CAL_MONTH")] CalMonth = 6,
  [pbr::OriginalName("ALARM_SCHEDULED")] AlarmScheduled = 7,
}

public enum LogicComparisonType {
  [pbr::OriginalName("LESS_THAN")] LessThan = 0,
  [pbr::OriginalName("LESS_THAN_OR_EQUALS")] LessThanOrEquals = 1,
  [pbr::OriginalName("EQUALS")] Equals = 2,
  [pbr::OriginalName("MORE_THAN")] MoreThan = 3,
  [pbr::OriginalName("MORE_THAN_OR_EQUALS")] MoreThanOrEquals = 4,
  [pbr::OriginalName("NOT_EQUAL")] NotEqual = 5,
}

public enum DALISensorType {
  /// <summary>
  /// Specific 25-bit frame type for Tridonic pre-configured MSensors
  /// </summary>
  [pbr::OriginalName("TRIDONIC_EDALI")] TridonicEdali = 0,
  /// <summary>
  /// Standard 24-bit 'eDALI' frames
  /// </summary>
  [pbr::OriginalName("STANDARD_EDALI")] StandardEdali = 1,
}

public enum SensorCommandType {
  /// <summary>
  /// Applies default settings to all known (programmed) Sensors and resets their state
  /// </summary>
  [pbr::OriginalName("INITIALISE")] Initialise = 0,
  /// <summary>
  /// Stops a Sensor from sending DALI packets
  /// </summary>
  [pbr::OriginalName("MUTE")] Mute = 1,
  /// <summary>
  /// Allows a Sensor to send DALI packets
  /// </summary>
  [pbr::OriginalName("UNMUTE")] Unmute = 2,
  /// <summary>
  /// Puts a Sensor in 'Override Mode' which prevents it from adjusting the Light Level (until after the occupancy timeout occurs)
  /// </summary>
  [pbr::OriginalName("OVERRIDE")] Override = 3,
}

public enum SystemLogType {
  [pbr::OriginalName("BOOT")] Boot = 0,
  [pbr::OriginalName("NET_LINK")] NetLink = 1,
  [pbr::OriginalName("NTP")] Ntp = 2,
  [pbr::OriginalName("TRIGGER")] Trigger = 3,
  [pbr::OriginalName("SPEKTRA")] Spektra = 4,
  [pbr::OriginalName("SCHEDULE")] Schedule = 5,
  [pbr::OriginalName("USER")] User = 6,
}

public enum DALIAddressingError {
  [pbr::OriginalName("NO_ERROR")] NoError = 0,
  [pbr::OriginalName("VERIFY")] Verify = 1,
  [pbr::OriginalName("SEARCH")] Search = 2,
  [pbr::OriginalName("NO_NEW_DEVICE")] NoNewDevice = 3,
}

public enum DALIAddressingType {
  [pbr::OriginalName("ADDRESS_NEW")] AddressNew = 0,
  [pbr::OriginalName("READDRESS_ALL")] ReaddressAll = 1,
}

#endregion

#region Messages
/// <summary>
/// Sent in Response to another message.
/// </summary>
public sealed partial class AckMessage : pb::IMessage<AckMessage> {
  private static readonly pb::MessageParser<AckMessage> _parser = new pb::MessageParser<AckMessage>(() => new AckMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AckMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckMessage(AckMessage other) : this() {
    payload_ = other.payload_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AckMessage Clone() {
    return new AckMessage(this);
  }

  /// <summary>Field number for the "payload" field.</summary>
  public const int PayloadFieldNumber = 1;
  private global::AckMessageType payload_ = 0;
  /// <summary>
  /// Will either indicate 'Success' or a particular Error as specified by "AckMessageType"
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AckMessageType Payload {
    get { return payload_; }
    set {
      payload_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AckMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AckMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Payload != other.Payload) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Payload != 0) hash ^= Payload.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Payload != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Payload);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Payload != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Payload);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AckMessage other) {
    if (other == null) {
      return;
    }
    if (other.Payload != 0) {
      Payload = other.Payload;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          payload_ = (global::AckMessageType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Contains a payload.
/// </summary>
public sealed partial class PayloadMessage : pb::IMessage<PayloadMessage> {
  private static readonly pb::MessageParser<PayloadMessage> _parser = new pb::MessageParser<PayloadMessage>(() => new PayloadMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PayloadMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadMessage(PayloadMessage other) : this() {
    stringData_ = other.stringData_;
    switch (other.DataCase) {
      case DataOneofCase.UintData:
        UintData = other.UintData;
        break;
      case DataOneofCase.FloatData:
        FloatData = other.FloatData;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadMessage Clone() {
    return new PayloadMessage(this);
  }

  /// <summary>Field number for the "uint_data" field.</summary>
  public const int UintDataFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UintData {
    get { return dataCase_ == DataOneofCase.UintData ? (uint) data_ : 0; }
    set {
      data_ = value;
      dataCase_ = DataOneofCase.UintData;
    }
  }

  /// <summary>Field number for the "float_data" field.</summary>
  public const int FloatDataFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float FloatData {
    get { return dataCase_ == DataOneofCase.FloatData ? (float) data_ : 0F; }
    set {
      data_ = value;
      dataCase_ = DataOneofCase.FloatData;
    }
  }

  /// <summary>Field number for the "string_data" field.</summary>
  public const int StringDataFieldNumber = 3;
  private string stringData_ = "";
  /// <summary>
  /// Every PayloadMessage will contain String data, with optional uint or float data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StringData {
    get { return stringData_; }
    set {
      stringData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  private object data_;
  /// <summary>Enum of possible cases for the "data" oneof.</summary>
  public enum DataOneofCase {
    None = 0,
    UintData = 1,
    FloatData = 2,
  }
  private DataOneofCase dataCase_ = DataOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataOneofCase DataCase {
    get { return dataCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearData() {
    dataCase_ = DataOneofCase.None;
    data_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PayloadMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PayloadMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UintData != other.UintData) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatData, other.FloatData)) return false;
    if (StringData != other.StringData) return false;
    if (DataCase != other.DataCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (dataCase_ == DataOneofCase.UintData) hash ^= UintData.GetHashCode();
    if (dataCase_ == DataOneofCase.FloatData) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatData);
    if (StringData.Length != 0) hash ^= StringData.GetHashCode();
    hash ^= (int) dataCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (dataCase_ == DataOneofCase.UintData) {
      output.WriteRawTag(8);
      output.WriteUInt32(UintData);
    }
    if (dataCase_ == DataOneofCase.FloatData) {
      output.WriteRawTag(21);
      output.WriteFloat(FloatData);
    }
    if (StringData.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(StringData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (dataCase_ == DataOneofCase.UintData) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UintData);
    }
    if (dataCase_ == DataOneofCase.FloatData) {
      size += 1 + 4;
    }
    if (StringData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StringData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PayloadMessage other) {
    if (other == null) {
      return;
    }
    if (other.StringData.Length != 0) {
      StringData = other.StringData;
    }
    switch (other.DataCase) {
      case DataOneofCase.UintData:
        UintData = other.UintData;
        break;
      case DataOneofCase.FloatData:
        FloatData = other.FloatData;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UintData = input.ReadUInt32();
          break;
        }
        case 21: {
          FloatData = input.ReadFloat();
          break;
        }
        case 26: {
          StringData = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// "Are You There" Message with some supplementary values for debugging
/// </summary>
public sealed partial class AytMessage : pb::IMessage<AytMessage> {
  private static readonly pb::MessageParser<AytMessage> _parser = new pb::MessageParser<AytMessage>(() => new AytMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AytMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AytMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AytMessage(AytMessage other) : this() {
    timesinceboot_ = other.timesinceboot_;
    temperature_ = other.temperature_;
    time_ = other.time_ != null ? other.time_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AytMessage Clone() {
    return new AytMessage(this);
  }

  /// <summary>Field number for the "timesinceboot" field.</summary>
  public const int TimesincebootFieldNumber = 1;
  private uint timesinceboot_;
  /// <summary>
  /// Device uptime in seconds
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Timesinceboot {
    get { return timesinceboot_; }
    set {
      timesinceboot_ = value;
    }
  }

  /// <summary>Field number for the "temperature" field.</summary>
  public const int TemperatureFieldNumber = 2;
  private float temperature_;
  /// <summary>
  /// Current Temp on the device internals
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Temperature {
    get { return temperature_; }
    set {
      temperature_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 3;
  private global::TimeClockMessage time_;
  /// <summary>
  /// Current Time of the RTC
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AytMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AytMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Timesinceboot != other.Timesinceboot) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
    if (!object.Equals(Time, other.Time)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Timesinceboot != 0) hash ^= Timesinceboot.GetHashCode();
    if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
    if (time_ != null) hash ^= Time.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Timesinceboot != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Timesinceboot);
    }
    if (Temperature != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Temperature);
    }
    if (time_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Time);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Timesinceboot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timesinceboot);
    }
    if (Temperature != 0F) {
      size += 1 + 4;
    }
    if (time_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AytMessage other) {
    if (other == null) {
      return;
    }
    if (other.Timesinceboot != 0) {
      Timesinceboot = other.Timesinceboot;
    }
    if (other.Temperature != 0F) {
      Temperature = other.Temperature;
    }
    if (other.time_ != null) {
      if (time_ == null) {
        time_ = new global::TimeClockMessage();
      }
      Time.MergeFrom(other.Time);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Timesinceboot = input.ReadUInt32();
          break;
        }
        case 21: {
          Temperature = input.ReadFloat();
          break;
        }
        case 26: {
          if (time_ == null) {
            time_ = new global::TimeClockMessage();
          }
          input.ReadMessage(time_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// This message contains the 'variable state' for the Device
/// </summary>
public sealed partial class DeviceStateMessage : pb::IMessage<DeviceStateMessage> {
  private static readonly pb::MessageParser<DeviceStateMessage> _parser = new pb::MessageParser<DeviceStateMessage>(() => new DeviceStateMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeviceStateMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceStateMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceStateMessage(DeviceStateMessage other) : this() {
    uptime_ = other.uptime_;
    temp_ = other.temp_;
    vbat_ = other.vbat_;
    clock_ = other.clock_ != null ? other.clock_.Clone() : null;
    nextAlarm_ = other.nextAlarm_;
    nextAlarmTime_ = other.nextAlarmTime_ != null ? other.nextAlarmTime_.Clone() : null;
    inputState_ = other.inputState_;
    listStates_ = other.listStates_.Clone();
    burnInStates_ = other.burnInStates_.Clone();
    sensorStates_ = other.sensorStates_.Clone();
    zoneStates_ = other.zoneStates_.Clone();
    zoneSleepStates_ = other.zoneSleepStates_.Clone();
    zoneIndexes_ = other.zoneIndexes_.Clone();
    daliInputState_ = other.daliInputState_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceStateMessage Clone() {
    return new DeviceStateMessage(this);
  }

  /// <summary>Field number for the "uptime" field.</summary>
  public const int UptimeFieldNumber = 1;
  private uint uptime_;
  /// <summary>
  /// Uptime (seconds since boot)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Uptime {
    get { return uptime_; }
    set {
      uptime_ = value;
    }
  }

  /// <summary>Field number for the "temp" field.</summary>
  public const int TempFieldNumber = 2;
  private float temp_;
  /// <summary>
  /// Temperature
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Temp {
    get { return temp_; }
    set {
      temp_ = value;
    }
  }

  /// <summary>Field number for the "vbat" field.</summary>
  public const int VbatFieldNumber = 3;
  private float vbat_;
  /// <summary>
  /// Battery voltage
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Vbat {
    get { return vbat_; }
    set {
      vbat_ = value;
    }
  }

  /// <summary>Field number for the "clock" field.</summary>
  public const int ClockFieldNumber = 4;
  private global::TimeClockMessage clock_;
  /// <summary>
  /// RTC Time on device
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage Clock {
    get { return clock_; }
    set {
      clock_ = value;
    }
  }

  /// <summary>Field number for the "next_alarm" field.</summary>
  public const int NextAlarmFieldNumber = 5;
  private uint nextAlarm_;
  /// <summary>
  /// Index of next alarm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NextAlarm {
    get { return nextAlarm_; }
    set {
      nextAlarm_ = value;
    }
  }

  /// <summary>Field number for the "next_alarm_time" field.</summary>
  public const int NextAlarmTimeFieldNumber = 6;
  private global::TimeClockMessage nextAlarmTime_;
  /// <summary>
  /// Time of next alarm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage NextAlarmTime {
    get { return nextAlarmTime_; }
    set {
      nextAlarmTime_ = value;
    }
  }

  /// <summary>Field number for the "input_state" field.</summary>
  public const int InputStateFieldNumber = 7;
  private uint inputState_;
  /// <summary>
  /// Input state mask
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputState {
    get { return inputState_; }
    set {
      inputState_ = value;
    }
  }

  /// <summary>Field number for the "list_states" field.</summary>
  public const int ListStatesFieldNumber = 8;
  private static readonly pb::FieldCodec<uint> _repeated_listStates_codec
      = pb::FieldCodec.ForUInt32(66);
  private readonly pbc::RepeatedField<uint> listStates_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// State of each List (DISABLED / ENABLED / LOOPING)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ListStates {
    get { return listStates_; }
  }

  /// <summary>Field number for the "burn_in_states" field.</summary>
  public const int BurnInStatesFieldNumber = 9;
  private static readonly pb::FieldCodec<uint> _repeated_burnInStates_codec
      = pb::FieldCodec.ForUInt32(74);
  private readonly pbc::RepeatedField<uint> burnInStates_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// State of each Burn-in (RUNNING / NOT RUNNING)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> BurnInStates {
    get { return burnInStates_; }
  }

  /// <summary>Field number for the "sensor_states" field.</summary>
  public const int SensorStatesFieldNumber = 10;
  private static readonly pb::FieldCodec<uint> _repeated_sensorStates_codec
      = pb::FieldCodec.ForUInt32(82);
  private readonly pbc::RepeatedField<uint> sensorStates_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// State of each Tridonic MSensor (IDLE / DISABLED / WARNING / OCCUPANCY)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> SensorStates {
    get { return sensorStates_; }
  }

  /// <summary>Field number for the "zone_states" field.</summary>
  public const int ZoneStatesFieldNumber = 11;
  private static readonly pb::FieldCodec<uint> _repeated_zoneStates_codec
      = pb::FieldCodec.ForUInt32(90);
  private readonly pbc::RepeatedField<uint> zoneStates_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// State of each Spektra Zone (OFF / SEQUENCE / THEME / STATIC)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ZoneStates {
    get { return zoneStates_; }
  }

  /// <summary>Field number for the "zone_sleep_states" field.</summary>
  public const int ZoneSleepStatesFieldNumber = 12;
  private static readonly pb::FieldCodec<uint> _repeated_zoneSleepStates_codec
      = pb::FieldCodec.ForUInt32(98);
  private readonly pbc::RepeatedField<uint> zoneSleepStates_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Sleep State of each Spektra Zone (TRUE / FALSE)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ZoneSleepStates {
    get { return zoneSleepStates_; }
  }

  /// <summary>Field number for the "zone_indexes" field.</summary>
  public const int ZoneIndexesFieldNumber = 13;
  private static readonly pb::FieldCodec<uint> _repeated_zoneIndexes_codec
      = pb::FieldCodec.ForUInt32(106);
  private readonly pbc::RepeatedField<uint> zoneIndexes_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Index of the selected Sequence, Theme, or Static colour for each Zone
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ZoneIndexes {
    get { return zoneIndexes_; }
  }

  /// <summary>Field number for the "dali_input_state" field.</summary>
  public const int DaliInputStateFieldNumber = 14;
  private ulong daliInputState_;
  /// <summary>
  /// DALI Input state mask
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong DaliInputState {
    get { return daliInputState_; }
    set {
      daliInputState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeviceStateMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeviceStateMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uptime != other.Uptime) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temp, other.Temp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vbat, other.Vbat)) return false;
    if (!object.Equals(Clock, other.Clock)) return false;
    if (NextAlarm != other.NextAlarm) return false;
    if (!object.Equals(NextAlarmTime, other.NextAlarmTime)) return false;
    if (InputState != other.InputState) return false;
    if(!listStates_.Equals(other.listStates_)) return false;
    if(!burnInStates_.Equals(other.burnInStates_)) return false;
    if(!sensorStates_.Equals(other.sensorStates_)) return false;
    if(!zoneStates_.Equals(other.zoneStates_)) return false;
    if(!zoneSleepStates_.Equals(other.zoneSleepStates_)) return false;
    if(!zoneIndexes_.Equals(other.zoneIndexes_)) return false;
    if (DaliInputState != other.DaliInputState) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uptime != 0) hash ^= Uptime.GetHashCode();
    if (Temp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temp);
    if (Vbat != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vbat);
    if (clock_ != null) hash ^= Clock.GetHashCode();
    if (NextAlarm != 0) hash ^= NextAlarm.GetHashCode();
    if (nextAlarmTime_ != null) hash ^= NextAlarmTime.GetHashCode();
    if (InputState != 0) hash ^= InputState.GetHashCode();
    hash ^= listStates_.GetHashCode();
    hash ^= burnInStates_.GetHashCode();
    hash ^= sensorStates_.GetHashCode();
    hash ^= zoneStates_.GetHashCode();
    hash ^= zoneSleepStates_.GetHashCode();
    hash ^= zoneIndexes_.GetHashCode();
    if (DaliInputState != 0UL) hash ^= DaliInputState.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uptime != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Uptime);
    }
    if (Temp != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Temp);
    }
    if (Vbat != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Vbat);
    }
    if (clock_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Clock);
    }
    if (NextAlarm != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(NextAlarm);
    }
    if (nextAlarmTime_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(NextAlarmTime);
    }
    if (InputState != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(InputState);
    }
    listStates_.WriteTo(output, _repeated_listStates_codec);
    burnInStates_.WriteTo(output, _repeated_burnInStates_codec);
    sensorStates_.WriteTo(output, _repeated_sensorStates_codec);
    zoneStates_.WriteTo(output, _repeated_zoneStates_codec);
    zoneSleepStates_.WriteTo(output, _repeated_zoneSleepStates_codec);
    zoneIndexes_.WriteTo(output, _repeated_zoneIndexes_codec);
    if (DaliInputState != 0UL) {
      output.WriteRawTag(112);
      output.WriteUInt64(DaliInputState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uptime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uptime);
    }
    if (Temp != 0F) {
      size += 1 + 4;
    }
    if (Vbat != 0F) {
      size += 1 + 4;
    }
    if (clock_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clock);
    }
    if (NextAlarm != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextAlarm);
    }
    if (nextAlarmTime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextAlarmTime);
    }
    if (InputState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputState);
    }
    size += listStates_.CalculateSize(_repeated_listStates_codec);
    size += burnInStates_.CalculateSize(_repeated_burnInStates_codec);
    size += sensorStates_.CalculateSize(_repeated_sensorStates_codec);
    size += zoneStates_.CalculateSize(_repeated_zoneStates_codec);
    size += zoneSleepStates_.CalculateSize(_repeated_zoneSleepStates_codec);
    size += zoneIndexes_.CalculateSize(_repeated_zoneIndexes_codec);
    if (DaliInputState != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DaliInputState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeviceStateMessage other) {
    if (other == null) {
      return;
    }
    if (other.Uptime != 0) {
      Uptime = other.Uptime;
    }
    if (other.Temp != 0F) {
      Temp = other.Temp;
    }
    if (other.Vbat != 0F) {
      Vbat = other.Vbat;
    }
    if (other.clock_ != null) {
      if (clock_ == null) {
        clock_ = new global::TimeClockMessage();
      }
      Clock.MergeFrom(other.Clock);
    }
    if (other.NextAlarm != 0) {
      NextAlarm = other.NextAlarm;
    }
    if (other.nextAlarmTime_ != null) {
      if (nextAlarmTime_ == null) {
        nextAlarmTime_ = new global::TimeClockMessage();
      }
      NextAlarmTime.MergeFrom(other.NextAlarmTime);
    }
    if (other.InputState != 0) {
      InputState = other.InputState;
    }
    listStates_.Add(other.listStates_);
    burnInStates_.Add(other.burnInStates_);
    sensorStates_.Add(other.sensorStates_);
    zoneStates_.Add(other.zoneStates_);
    zoneSleepStates_.Add(other.zoneSleepStates_);
    zoneIndexes_.Add(other.zoneIndexes_);
    if (other.DaliInputState != 0UL) {
      DaliInputState = other.DaliInputState;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Uptime = input.ReadUInt32();
          break;
        }
        case 21: {
          Temp = input.ReadFloat();
          break;
        }
        case 29: {
          Vbat = input.ReadFloat();
          break;
        }
        case 34: {
          if (clock_ == null) {
            clock_ = new global::TimeClockMessage();
          }
          input.ReadMessage(clock_);
          break;
        }
        case 40: {
          NextAlarm = input.ReadUInt32();
          break;
        }
        case 50: {
          if (nextAlarmTime_ == null) {
            nextAlarmTime_ = new global::TimeClockMessage();
          }
          input.ReadMessage(nextAlarmTime_);
          break;
        }
        case 56: {
          InputState = input.ReadUInt32();
          break;
        }
        case 66:
        case 64: {
          listStates_.AddEntriesFrom(input, _repeated_listStates_codec);
          break;
        }
        case 74:
        case 72: {
          burnInStates_.AddEntriesFrom(input, _repeated_burnInStates_codec);
          break;
        }
        case 82:
        case 80: {
          sensorStates_.AddEntriesFrom(input, _repeated_sensorStates_codec);
          break;
        }
        case 90:
        case 88: {
          zoneStates_.AddEntriesFrom(input, _repeated_zoneStates_codec);
          break;
        }
        case 98:
        case 96: {
          zoneSleepStates_.AddEntriesFrom(input, _repeated_zoneSleepStates_codec);
          break;
        }
        case 106:
        case 104: {
          zoneIndexes_.AddEntriesFrom(input, _repeated_zoneIndexes_codec);
          break;
        }
        case 112: {
          DaliInputState = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Trigger
/// </summary>
public sealed partial class TriggerMessage : pb::IMessage<TriggerMessage> {
  private static readonly pb::MessageParser<TriggerMessage> _parser = new pb::MessageParser<TriggerMessage>(() => new TriggerMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TriggerMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TriggerMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TriggerMessage(TriggerMessage other) : this() {
    type_ = other.type_;
    zone_ = other.zone_;
    lineMask_ = other.lineMask_;
    targetIndex_ = other.targetIndex_;
    value_ = other.value_;
    queryIndex_ = other.queryIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TriggerMessage Clone() {
    return new TriggerMessage(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::TriggerType type_ = 0;
  /// <summary>
  /// The type of Trigger
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "zone" field.</summary>
  public const int ZoneFieldNumber = 2;
  private uint zone_;
  /// <summary>
  /// Which Zone (Spektra)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Zone {
    get { return zone_; }
    set {
      zone_ = value;
    }
  }

  /// <summary>Field number for the "line_mask" field.</summary>
  public const int LineMaskFieldNumber = 3;
  private uint lineMask_;
  /// <summary>
  /// Which Line(s) to perform this trigger on (if applicable)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LineMask {
    get { return lineMask_; }
    set {
      lineMask_ = value;
    }
  }

  /// <summary>Field number for the "target_index" field.</summary>
  public const int TargetIndexFieldNumber = 4;
  private uint targetIndex_;
  /// <summary>
  /// Index to target (context depends on TriggerType)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetIndex {
    get { return targetIndex_; }
    set {
      targetIndex_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 5;
  private uint value_;
  /// <summary>
  /// Value for this trigger (if applicable)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "query_index" field.</summary>
  public const int QueryIndexFieldNumber = 6;
  private uint queryIndex_;
  /// <summary>
  /// Index to query (if applicable)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint QueryIndex {
    get { return queryIndex_; }
    set {
      queryIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TriggerMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TriggerMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Zone != other.Zone) return false;
    if (LineMask != other.LineMask) return false;
    if (TargetIndex != other.TargetIndex) return false;
    if (Value != other.Value) return false;
    if (QueryIndex != other.QueryIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Zone != 0) hash ^= Zone.GetHashCode();
    if (LineMask != 0) hash ^= LineMask.GetHashCode();
    if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    if (QueryIndex != 0) hash ^= QueryIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Zone != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Zone);
    }
    if (LineMask != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(LineMask);
    }
    if (TargetIndex != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TargetIndex);
    }
    if (Value != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Value);
    }
    if (QueryIndex != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(QueryIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Zone != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Zone);
    }
    if (LineMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineMask);
    }
    if (TargetIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetIndex);
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
    }
    if (QueryIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueryIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TriggerMessage other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Zone != 0) {
      Zone = other.Zone;
    }
    if (other.LineMask != 0) {
      LineMask = other.LineMask;
    }
    if (other.TargetIndex != 0) {
      TargetIndex = other.TargetIndex;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
    if (other.QueryIndex != 0) {
      QueryIndex = other.QueryIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::TriggerType) input.ReadEnum();
          break;
        }
        case 16: {
          Zone = input.ReadUInt32();
          break;
        }
        case 24: {
          LineMask = input.ReadUInt32();
          break;
        }
        case 32: {
          TargetIndex = input.ReadUInt32();
          break;
        }
        case 40: {
          Value = input.ReadUInt32();
          break;
        }
        case 48: {
          QueryIndex = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Date/Time
/// </summary>
public sealed partial class TimeClockMessage : pb::IMessage<TimeClockMessage> {
  private static readonly pb::MessageParser<TimeClockMessage> _parser = new pb::MessageParser<TimeClockMessage>(() => new TimeClockMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TimeClockMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeClockMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeClockMessage(TimeClockMessage other) : this() {
    date_ = other.date_;
    time_ = other.time_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimeClockMessage Clone() {
    return new TimeClockMessage(this);
  }

  /// <summary>Field number for the "date" field.</summary>
  public const int DateFieldNumber = 1;
  private uint date_;
  /// <summary>
  /// Year | Month | Date | Day 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Date {
    get { return date_; }
    set {
      date_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 2;
  private uint time_;
  /// <summary>
  /// &lt;Empty> | Hour | Minute | Second
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TimeClockMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TimeClockMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Date != other.Date) return false;
    if (Time != other.Time) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Date != 0) hash ^= Date.GetHashCode();
    if (Time != 0) hash ^= Time.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Date != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Date);
    }
    if (Time != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Time);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Date != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Date);
    }
    if (Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TimeClockMessage other) {
    if (other == null) {
      return;
    }
    if (other.Date != 0) {
      Date = other.Date;
    }
    if (other.Time != 0) {
      Time = other.Time;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Date = input.ReadUInt32();
          break;
        }
        case 16: {
          Time = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Burn In Types
/// </summary>
public sealed partial class BurnInBitsMessage : pb::IMessage<BurnInBitsMessage> {
  private static readonly pb::MessageParser<BurnInBitsMessage> _parser = new pb::MessageParser<BurnInBitsMessage>(() => new BurnInBitsMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BurnInBitsMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BurnInBitsMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BurnInBitsMessage(BurnInBitsMessage other) : this() {
    lightState_ = other.lightState_;
    runningFlag_ = other.runningFlag_;
    enableFlag_ = other.enableFlag_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BurnInBitsMessage Clone() {
    return new BurnInBitsMessage(this);
  }

  /// <summary>Field number for the "light_state" field.</summary>
  public const int LightStateFieldNumber = 1;
  private uint lightState_;
  /// <summary>
  /// Tracks when a Light is 'On' and "burning in"
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LightState {
    get { return lightState_; }
    set {
      lightState_ = value;
    }
  }

  /// <summary>Field number for the "running_flag" field.</summary>
  public const int RunningFlagFieldNumber = 2;
  private uint runningFlag_;
  /// <summary>
  /// Whether or not the burn-in is currently counting down
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RunningFlag {
    get { return runningFlag_; }
    set {
      runningFlag_ = value;
    }
  }

  /// <summary>Field number for the "enable_flag" field.</summary>
  public const int EnableFlagFieldNumber = 3;
  private uint enableFlag_;
  /// <summary>
  /// Whether or not the burn-in should count down
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EnableFlag {
    get { return enableFlag_; }
    set {
      enableFlag_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BurnInBitsMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BurnInBitsMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LightState != other.LightState) return false;
    if (RunningFlag != other.RunningFlag) return false;
    if (EnableFlag != other.EnableFlag) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LightState != 0) hash ^= LightState.GetHashCode();
    if (RunningFlag != 0) hash ^= RunningFlag.GetHashCode();
    if (EnableFlag != 0) hash ^= EnableFlag.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LightState != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(LightState);
    }
    if (RunningFlag != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(RunningFlag);
    }
    if (EnableFlag != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(EnableFlag);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LightState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LightState);
    }
    if (RunningFlag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RunningFlag);
    }
    if (EnableFlag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnableFlag);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BurnInBitsMessage other) {
    if (other == null) {
      return;
    }
    if (other.LightState != 0) {
      LightState = other.LightState;
    }
    if (other.RunningFlag != 0) {
      RunningFlag = other.RunningFlag;
    }
    if (other.EnableFlag != 0) {
      EnableFlag = other.EnableFlag;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LightState = input.ReadUInt32();
          break;
        }
        case 16: {
          RunningFlag = input.ReadUInt32();
          break;
        }
        case 24: {
          EnableFlag = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Inputs
/// </summary>
public sealed partial class IOInputMessage : pb::IMessage<IOInputMessage> {
  private static readonly pb::MessageParser<IOInputMessage> _parser = new pb::MessageParser<IOInputMessage>(() => new IOInputMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IOInputMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IOInputMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IOInputMessage(IOInputMessage other) : this() {
    index_ = other.index_;
    buttonState_ = other.buttonState_;
    shortPress_ = other.shortPress_ != null ? other.shortPress_.Clone() : null;
    longPress_ = other.longPress_ != null ? other.longPress_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IOInputMessage Clone() {
    return new IOInputMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  /// <summary>
  /// Which Input is this (0 - 11) on 4 Pole and (0 - 23) on 9 Pole
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "button_state" field.</summary>
  public const int ButtonStateFieldNumber = 2;
  private global::TriggerOperationType buttonState_ = 0;
  /// <summary>
  /// How will this Input be triggered? Momentary (short/long press) or Latching (low/high)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerOperationType ButtonState {
    get { return buttonState_; }
    set {
      buttonState_ = value;
    }
  }

  /// <summary>Field number for the "short_press" field.</summary>
  public const int ShortPressFieldNumber = 3;
  private global::TriggerMessage shortPress_;
  /// <summary>
  /// What action should occur on short/low
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage ShortPress {
    get { return shortPress_; }
    set {
      shortPress_ = value;
    }
  }

  /// <summary>Field number for the "long_press" field.</summary>
  public const int LongPressFieldNumber = 4;
  private global::TriggerMessage longPress_;
  /// <summary>
  /// What action should occur on long/high
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage LongPress {
    get { return longPress_; }
    set {
      longPress_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IOInputMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IOInputMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (ButtonState != other.ButtonState) return false;
    if (!object.Equals(ShortPress, other.ShortPress)) return false;
    if (!object.Equals(LongPress, other.LongPress)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (ButtonState != 0) hash ^= ButtonState.GetHashCode();
    if (shortPress_ != null) hash ^= ShortPress.GetHashCode();
    if (longPress_ != null) hash ^= LongPress.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (ButtonState != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ButtonState);
    }
    if (shortPress_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ShortPress);
    }
    if (longPress_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LongPress);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (ButtonState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ButtonState);
    }
    if (shortPress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShortPress);
    }
    if (longPress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LongPress);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IOInputMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.ButtonState != 0) {
      ButtonState = other.ButtonState;
    }
    if (other.shortPress_ != null) {
      if (shortPress_ == null) {
        shortPress_ = new global::TriggerMessage();
      }
      ShortPress.MergeFrom(other.ShortPress);
    }
    if (other.longPress_ != null) {
      if (longPress_ == null) {
        longPress_ = new global::TriggerMessage();
      }
      LongPress.MergeFrom(other.LongPress);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          buttonState_ = (global::TriggerOperationType) input.ReadEnum();
          break;
        }
        case 26: {
          if (shortPress_ == null) {
            shortPress_ = new global::TriggerMessage();
          }
          input.ReadMessage(shortPress_);
          break;
        }
        case 34: {
          if (longPress_ == null) {
            longPress_ = new global::TriggerMessage();
          }
          input.ReadMessage(longPress_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Outputs
/// </summary>
public sealed partial class IOOutputMessage : pb::IMessage<IOOutputMessage> {
  private static readonly pb::MessageParser<IOOutputMessage> _parser = new pb::MessageParser<IOOutputMessage>(() => new IOOutputMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IOOutputMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IOOutputMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IOOutputMessage(IOOutputMessage other) : this() {
    index_ = other.index_;
    initialLevel_ = other.initialLevel_;
    timeTriggerIsActive_ = other.timeTriggerIsActive_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IOOutputMessage Clone() {
    return new IOOutputMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  /// <summary>
  /// Which Output is this? (0 - 3) on 4 Pole and (0 - 7) on 9 Pole. Note: Actual Pin numbers are (9 - 12) and (21 - 24) respectively.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "initial_level" field.</summary>
  public const int InitialLevelFieldNumber = 2;
  private uint initialLevel_;
  /// <summary>
  /// Will the Output be Low or High at startup?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InitialLevel {
    get { return initialLevel_; }
    set {
      initialLevel_ = value;
    }
  }

  /// <summary>Field number for the "time_trigger_is_active" field.</summary>
  public const int TimeTriggerIsActiveFieldNumber = 3;
  private uint timeTriggerIsActive_;
  /// <summary>
  /// How long should a 'Trigger Output' command last?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimeTriggerIsActive {
    get { return timeTriggerIsActive_; }
    set {
      timeTriggerIsActive_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private global::TriggerOperationType type_ = 0;
  /// <summary>
  /// Is this a continuous (latching) trigger or momentary output?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerOperationType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IOOutputMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IOOutputMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (InitialLevel != other.InitialLevel) return false;
    if (TimeTriggerIsActive != other.TimeTriggerIsActive) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (InitialLevel != 0) hash ^= InitialLevel.GetHashCode();
    if (TimeTriggerIsActive != 0) hash ^= TimeTriggerIsActive.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (InitialLevel != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(InitialLevel);
    }
    if (TimeTriggerIsActive != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TimeTriggerIsActive);
    }
    if (Type != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (InitialLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InitialLevel);
    }
    if (TimeTriggerIsActive != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeTriggerIsActive);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IOOutputMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.InitialLevel != 0) {
      InitialLevel = other.InitialLevel;
    }
    if (other.TimeTriggerIsActive != 0) {
      TimeTriggerIsActive = other.TimeTriggerIsActive;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          InitialLevel = input.ReadUInt32();
          break;
        }
        case 24: {
          TimeTriggerIsActive = input.ReadUInt32();
          break;
        }
        case 32: {
          type_ = (global::TriggerOperationType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// DALI Inputs
/// </summary>
public sealed partial class DALIInputMessage : pb::IMessage<DALIInputMessage> {
  private static readonly pb::MessageParser<DALIInputMessage> _parser = new pb::MessageParser<DALIInputMessage>(() => new DALIInputMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DALIInputMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIInputMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIInputMessage(DALIInputMessage other) : this() {
    index_ = other.index_;
    address_ = other.address_;
    daliLine_ = other.daliLine_;
    buttonState_ = other.buttonState_;
    shortPress_ = other.shortPress_ != null ? other.shortPress_.Clone() : null;
    longPress_ = other.longPress_ != null ? other.longPress_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIInputMessage Clone() {
    return new DALIInputMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  /// <summary>
  /// Which index for this Input
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private uint address_;
  /// <summary>
  /// The eDALI Address of this Input
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "dali_line" field.</summary>
  public const int DaliLineFieldNumber = 3;
  private uint daliLine_;
  /// <summary>
  /// The DALI Line this Input is on
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DaliLine {
    get { return daliLine_; }
    set {
      daliLine_ = value;
    }
  }

  /// <summary>Field number for the "button_state" field.</summary>
  public const int ButtonStateFieldNumber = 4;
  private global::TriggerOperationType buttonState_ = 0;
  /// <summary>
  /// How will this Input be triggered? Momentary (short/long press) or Latching (low/high)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerOperationType ButtonState {
    get { return buttonState_; }
    set {
      buttonState_ = value;
    }
  }

  /// <summary>Field number for the "short_press" field.</summary>
  public const int ShortPressFieldNumber = 5;
  private global::TriggerMessage shortPress_;
  /// <summary>
  /// What action should occur on short/low
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage ShortPress {
    get { return shortPress_; }
    set {
      shortPress_ = value;
    }
  }

  /// <summary>Field number for the "long_press" field.</summary>
  public const int LongPressFieldNumber = 6;
  private global::TriggerMessage longPress_;
  /// <summary>
  /// What action should occur on long/high
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage LongPress {
    get { return longPress_; }
    set {
      longPress_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DALIInputMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DALIInputMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Address != other.Address) return false;
    if (DaliLine != other.DaliLine) return false;
    if (ButtonState != other.ButtonState) return false;
    if (!object.Equals(ShortPress, other.ShortPress)) return false;
    if (!object.Equals(LongPress, other.LongPress)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Address != 0) hash ^= Address.GetHashCode();
    if (DaliLine != 0) hash ^= DaliLine.GetHashCode();
    if (ButtonState != 0) hash ^= ButtonState.GetHashCode();
    if (shortPress_ != null) hash ^= ShortPress.GetHashCode();
    if (longPress_ != null) hash ^= LongPress.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (Address != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Address);
    }
    if (DaliLine != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(DaliLine);
    }
    if (ButtonState != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) ButtonState);
    }
    if (shortPress_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ShortPress);
    }
    if (longPress_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(LongPress);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Address != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Address);
    }
    if (DaliLine != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DaliLine);
    }
    if (ButtonState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ButtonState);
    }
    if (shortPress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShortPress);
    }
    if (longPress_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LongPress);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DALIInputMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Address != 0) {
      Address = other.Address;
    }
    if (other.DaliLine != 0) {
      DaliLine = other.DaliLine;
    }
    if (other.ButtonState != 0) {
      ButtonState = other.ButtonState;
    }
    if (other.shortPress_ != null) {
      if (shortPress_ == null) {
        shortPress_ = new global::TriggerMessage();
      }
      ShortPress.MergeFrom(other.ShortPress);
    }
    if (other.longPress_ != null) {
      if (longPress_ == null) {
        longPress_ = new global::TriggerMessage();
      }
      LongPress.MergeFrom(other.LongPress);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          Address = input.ReadUInt32();
          break;
        }
        case 24: {
          DaliLine = input.ReadUInt32();
          break;
        }
        case 32: {
          buttonState_ = (global::TriggerOperationType) input.ReadEnum();
          break;
        }
        case 42: {
          if (shortPress_ == null) {
            shortPress_ = new global::TriggerMessage();
          }
          input.ReadMessage(shortPress_);
          break;
        }
        case 50: {
          if (longPress_ == null) {
            longPress_ = new global::TriggerMessage();
          }
          input.ReadMessage(longPress_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// IR
/// </summary>
public sealed partial class IOIRMessage : pb::IMessage<IOIRMessage> {
  private static readonly pb::MessageParser<IOIRMessage> _parser = new pb::MessageParser<IOIRMessage>(() => new IOIRMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IOIRMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IOIRMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IOIRMessage(IOIRMessage other) : this() {
    index_ = other.index_;
    action_ = other.action_ != null ? other.action_.Clone() : null;
    codes_ = other.codes_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IOIRMessage Clone() {
    return new IOIRMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 2;
  private global::TriggerMessage action_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  /// <summary>Field number for the "codes" field.</summary>
  public const int CodesFieldNumber = 3;
  private uint codes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Codes {
    get { return codes_; }
    set {
      codes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IOIRMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IOIRMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (!object.Equals(Action, other.Action)) return false;
    if (Codes != other.Codes) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (action_ != null) hash ^= Action.GetHashCode();
    if (Codes != 0) hash ^= Codes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (action_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Action);
    }
    if (Codes != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Codes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (action_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
    }
    if (Codes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Codes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IOIRMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.action_ != null) {
      if (action_ == null) {
        action_ = new global::TriggerMessage();
      }
      Action.MergeFrom(other.Action);
    }
    if (other.Codes != 0) {
      Codes = other.Codes;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 18: {
          if (action_ == null) {
            action_ = new global::TriggerMessage();
          }
          input.ReadMessage(action_);
          break;
        }
        case 24: {
          Codes = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Sensors
/// </summary>
public sealed partial class SensorMessage : pb::IMessage<SensorMessage> {
  private static readonly pb::MessageParser<SensorMessage> _parser = new pb::MessageParser<SensorMessage>(() => new SensorMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SensorMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SensorMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SensorMessage(SensorMessage other) : this() {
    profile_ = other.profile_;
    index_ = other.index_;
    sensorAddress_ = other.sensorAddress_;
    sensorDaliLine_ = other.sensorDaliLine_;
    addressQuery_ = other.addressQuery_;
    controlDaliLine_ = other.controlDaliLine_;
    controlGroup_ = other.controlGroup_;
    lightSetpoint_ = other.lightSetpoint_;
    warningSetpoint_ = other.warningSetpoint_;
    motionOnly_ = other.motionOnly_;
    timeoutValues_ = other.timeoutValues_;
    warningValues_ = other.warningValues_;
    disableValues_ = other.disableValues_;
    input1Pm_ = other.input1Pm_;
    input2Pm_ = other.input2Pm_;
    sensorStates_ = other.sensorStates_;
    motionSensors_ = other.motionSensors_;
    luxSensors_ = other.luxSensors_;
    offFlag_ = other.offFlag_;
    isProgrammed_ = other.isProgrammed_;
    detectionTrigger_ = other.detectionTrigger_ != null ? other.detectionTrigger_.Clone() : null;
    warningTrigger_ = other.warningTrigger_ != null ? other.warningTrigger_.Clone() : null;
    idleTrigger_ = other.idleTrigger_ != null ? other.idleTrigger_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SensorMessage Clone() {
    return new SensorMessage(this);
  }

  /// <summary>Field number for the "profile" field.</summary>
  public const int ProfileFieldNumber = 1;
  private uint profile_;
  /// <summary>
  /// Under which Profile is this Sensor active?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 2;
  private uint index_;
  /// <summary>
  /// The index for this Sensor
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "sensor_address" field.</summary>
  public const int SensorAddressFieldNumber = 3;
  private uint sensorAddress_;
  /// <summary>
  /// The eDALI Address of this Sensor (assumes address of "L" (Light) component with "M" (Motion) at L + 1)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SensorAddress {
    get { return sensorAddress_; }
    set {
      sensorAddress_ = value;
    }
  }

  /// <summary>Field number for the "sensor_dali_line" field.</summary>
  public const int SensorDaliLineFieldNumber = 4;
  private uint sensorDaliLine_;
  /// <summary>
  /// The DALI Line this Sensor is on
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SensorDaliLine {
    get { return sensorDaliLine_; }
    set {
      sensorDaliLine_ = value;
    }
  }

  /// <summary>Field number for the "address_query" field.</summary>
  public const int AddressQueryFieldNumber = 5;
  private uint addressQuery_;
  /// <summary>
  /// The DALI Address to query for Group-based control
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AddressQuery {
    get { return addressQuery_; }
    set {
      addressQuery_ = value;
    }
  }

  /// <summary>Field number for the "control_dali_line" field.</summary>
  public const int ControlDaliLineFieldNumber = 6;
  private uint controlDaliLine_;
  /// <summary>
  /// The DALI Line (mask) to control
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ControlDaliLine {
    get { return controlDaliLine_; }
    set {
      controlDaliLine_ = value;
    }
  }

  /// <summary>Field number for the "control_group" field.</summary>
  public const int ControlGroupFieldNumber = 7;
  private uint controlGroup_;
  /// <summary>
  /// The DALI Group Address to control
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ControlGroup {
    get { return controlGroup_; }
    set {
      controlGroup_ = value;
    }
  }

  /// <summary>Field number for the "light_setpoint" field.</summary>
  public const int LightSetpointFieldNumber = 8;
  private uint lightSetpoint_;
  /// <summary>
  /// The Lux level to maintain during Daylight Harvesting
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LightSetpoint {
    get { return lightSetpoint_; }
    set {
      lightSetpoint_ = value;
    }
  }

  /// <summary>Field number for the "warning_setpoint" field.</summary>
  public const int WarningSetpointFieldNumber = 9;
  private uint warningSetpoint_;
  /// <summary>
  /// The Arc level to set during the Warning Period
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WarningSetpoint {
    get { return warningSetpoint_; }
    set {
      warningSetpoint_ = value;
    }
  }

  /// <summary>Field number for the "motion_only" field.</summary>
  public const int MotionOnlyFieldNumber = 10;
  private uint motionOnly_;
  /// <summary>
  /// Is this Sensor used for motion detection only? If False, Daylight Harvesting will be in effect
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MotionOnly {
    get { return motionOnly_; }
    set {
      motionOnly_ = value;
    }
  }

  /// <summary>Field number for the "timeout_values" field.</summary>
  public const int TimeoutValuesFieldNumber = 11;
  private uint timeoutValues_;
  /// <summary>
  /// How long after the last occupancy detection before the Sensor will activate the Warning Period
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimeoutValues {
    get { return timeoutValues_; }
    set {
      timeoutValues_ = value;
    }
  }

  /// <summary>Field number for the "warning_values" field.</summary>
  public const int WarningValuesFieldNumber = 12;
  private uint warningValues_;
  /// <summary>
  /// How long after entering the Warning Period before the Sensor will activate the Disable Period
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WarningValues {
    get { return warningValues_; }
    set {
      warningValues_ = value;
    }
  }

  /// <summary>Field number for the "disable_values" field.</summary>
  public const int DisableValuesFieldNumber = 13;
  private uint disableValues_;
  /// <summary>
  /// How long after a complete timeout (after the Warning Period) should the Sensor wait before starting detection again?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DisableValues {
    get { return disableValues_; }
    set {
      disableValues_ = value;
    }
  }

  /// <summary>Field number for the "input_1_pm" field.</summary>
  public const int Input1PmFieldNumber = 14;
  private uint input1Pm_;
  /// <summary>
  /// The first Input button used for "Two-Button Programming"
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Input1Pm {
    get { return input1Pm_; }
    set {
      input1Pm_ = value;
    }
  }

  /// <summary>Field number for the "input_2_pm" field.</summary>
  public const int Input2PmFieldNumber = 15;
  private uint input2Pm_;
  /// <summary>
  /// The second Input button used for "Two-Button Programming:
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Input2Pm {
    get { return input2Pm_; }
    set {
      input2Pm_ = value;
    }
  }

  /// <summary>Field number for the "sensor_states" field.</summary>
  public const int SensorStatesFieldNumber = 16;
  private uint sensorStates_;
  /// <summary>
  /// Used to keep track of the Motion Sensor state
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SensorStates {
    get { return sensorStates_; }
    set {
      sensorStates_ = value;
    }
  }

  /// <summary>Field number for the "motion_sensors" field.</summary>
  public const int MotionSensorsFieldNumber = 17;
  private uint motionSensors_;
  /// <summary>
  /// A Bitmask of grouped Sensors
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MotionSensors {
    get { return motionSensors_; }
    set {
      motionSensors_ = value;
    }
  }

  /// <summary>Field number for the "lux_sensors" field.</summary>
  public const int LuxSensorsFieldNumber = 18;
  private uint luxSensors_;
  /// <summary>
  /// Used to keep track of the Light (Lux) Sensor state
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LuxSensors {
    get { return luxSensors_; }
    set {
      luxSensors_ = value;
    }
  }

  /// <summary>Field number for the "off_flag" field.</summary>
  public const int OffFlagFieldNumber = 19;
  private uint offFlag_;
  /// <summary>
  /// Used to keep track of the Control Group's state
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint OffFlag {
    get { return offFlag_; }
    set {
      offFlag_ = value;
    }
  }

  /// <summary>Field number for the "is_programmed" field.</summary>
  public const int IsProgrammedFieldNumber = 20;
  private bool isProgrammed_;
  /// <summary>
  /// Set to 'True' when the Firmware receives a SensorMessage with this Index
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsProgrammed {
    get { return isProgrammed_; }
    set {
      isProgrammed_ = value;
    }
  }

  /// <summary>Field number for the "detection_trigger" field.</summary>
  public const int DetectionTriggerFieldNumber = 21;
  private global::TriggerMessage detectionTrigger_;
  /// <summary>
  /// The action to perform upon initial detection
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage DetectionTrigger {
    get { return detectionTrigger_; }
    set {
      detectionTrigger_ = value;
    }
  }

  /// <summary>Field number for the "warning_trigger" field.</summary>
  public const int WarningTriggerFieldNumber = 22;
  private global::TriggerMessage warningTrigger_;
  /// <summary>
  /// The action to perform upon transitioning to the Warning Period
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage WarningTrigger {
    get { return warningTrigger_; }
    set {
      warningTrigger_ = value;
    }
  }

  /// <summary>Field number for the "idle_trigger" field.</summary>
  public const int IdleTriggerFieldNumber = 23;
  private global::TriggerMessage idleTrigger_;
  /// <summary>
  /// The action to perform upon transitioning to the Idle (disable) Period
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage IdleTrigger {
    get { return idleTrigger_; }
    set {
      idleTrigger_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SensorMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SensorMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Profile != other.Profile) return false;
    if (Index != other.Index) return false;
    if (SensorAddress != other.SensorAddress) return false;
    if (SensorDaliLine != other.SensorDaliLine) return false;
    if (AddressQuery != other.AddressQuery) return false;
    if (ControlDaliLine != other.ControlDaliLine) return false;
    if (ControlGroup != other.ControlGroup) return false;
    if (LightSetpoint != other.LightSetpoint) return false;
    if (WarningSetpoint != other.WarningSetpoint) return false;
    if (MotionOnly != other.MotionOnly) return false;
    if (TimeoutValues != other.TimeoutValues) return false;
    if (WarningValues != other.WarningValues) return false;
    if (DisableValues != other.DisableValues) return false;
    if (Input1Pm != other.Input1Pm) return false;
    if (Input2Pm != other.Input2Pm) return false;
    if (SensorStates != other.SensorStates) return false;
    if (MotionSensors != other.MotionSensors) return false;
    if (LuxSensors != other.LuxSensors) return false;
    if (OffFlag != other.OffFlag) return false;
    if (IsProgrammed != other.IsProgrammed) return false;
    if (!object.Equals(DetectionTrigger, other.DetectionTrigger)) return false;
    if (!object.Equals(WarningTrigger, other.WarningTrigger)) return false;
    if (!object.Equals(IdleTrigger, other.IdleTrigger)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Profile != 0) hash ^= Profile.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (SensorAddress != 0) hash ^= SensorAddress.GetHashCode();
    if (SensorDaliLine != 0) hash ^= SensorDaliLine.GetHashCode();
    if (AddressQuery != 0) hash ^= AddressQuery.GetHashCode();
    if (ControlDaliLine != 0) hash ^= ControlDaliLine.GetHashCode();
    if (ControlGroup != 0) hash ^= ControlGroup.GetHashCode();
    if (LightSetpoint != 0) hash ^= LightSetpoint.GetHashCode();
    if (WarningSetpoint != 0) hash ^= WarningSetpoint.GetHashCode();
    if (MotionOnly != 0) hash ^= MotionOnly.GetHashCode();
    if (TimeoutValues != 0) hash ^= TimeoutValues.GetHashCode();
    if (WarningValues != 0) hash ^= WarningValues.GetHashCode();
    if (DisableValues != 0) hash ^= DisableValues.GetHashCode();
    if (Input1Pm != 0) hash ^= Input1Pm.GetHashCode();
    if (Input2Pm != 0) hash ^= Input2Pm.GetHashCode();
    if (SensorStates != 0) hash ^= SensorStates.GetHashCode();
    if (MotionSensors != 0) hash ^= MotionSensors.GetHashCode();
    if (LuxSensors != 0) hash ^= LuxSensors.GetHashCode();
    if (OffFlag != 0) hash ^= OffFlag.GetHashCode();
    if (IsProgrammed != false) hash ^= IsProgrammed.GetHashCode();
    if (detectionTrigger_ != null) hash ^= DetectionTrigger.GetHashCode();
    if (warningTrigger_ != null) hash ^= WarningTrigger.GetHashCode();
    if (idleTrigger_ != null) hash ^= IdleTrigger.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Profile != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Profile);
    }
    if (Index != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Index);
    }
    if (SensorAddress != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(SensorAddress);
    }
    if (SensorDaliLine != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(SensorDaliLine);
    }
    if (AddressQuery != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(AddressQuery);
    }
    if (ControlDaliLine != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ControlDaliLine);
    }
    if (ControlGroup != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(ControlGroup);
    }
    if (LightSetpoint != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(LightSetpoint);
    }
    if (WarningSetpoint != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(WarningSetpoint);
    }
    if (MotionOnly != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(MotionOnly);
    }
    if (TimeoutValues != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(TimeoutValues);
    }
    if (WarningValues != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(WarningValues);
    }
    if (DisableValues != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(DisableValues);
    }
    if (Input1Pm != 0) {
      output.WriteRawTag(112);
      output.WriteUInt32(Input1Pm);
    }
    if (Input2Pm != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(Input2Pm);
    }
    if (SensorStates != 0) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(SensorStates);
    }
    if (MotionSensors != 0) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(MotionSensors);
    }
    if (LuxSensors != 0) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(LuxSensors);
    }
    if (OffFlag != 0) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(OffFlag);
    }
    if (IsProgrammed != false) {
      output.WriteRawTag(160, 1);
      output.WriteBool(IsProgrammed);
    }
    if (detectionTrigger_ != null) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(DetectionTrigger);
    }
    if (warningTrigger_ != null) {
      output.WriteRawTag(178, 1);
      output.WriteMessage(WarningTrigger);
    }
    if (idleTrigger_ != null) {
      output.WriteRawTag(186, 1);
      output.WriteMessage(IdleTrigger);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Profile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profile);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (SensorAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SensorAddress);
    }
    if (SensorDaliLine != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SensorDaliLine);
    }
    if (AddressQuery != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddressQuery);
    }
    if (ControlDaliLine != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControlDaliLine);
    }
    if (ControlGroup != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControlGroup);
    }
    if (LightSetpoint != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LightSetpoint);
    }
    if (WarningSetpoint != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarningSetpoint);
    }
    if (MotionOnly != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MotionOnly);
    }
    if (TimeoutValues != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutValues);
    }
    if (WarningValues != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WarningValues);
    }
    if (DisableValues != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisableValues);
    }
    if (Input1Pm != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Input1Pm);
    }
    if (Input2Pm != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Input2Pm);
    }
    if (SensorStates != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SensorStates);
    }
    if (MotionSensors != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MotionSensors);
    }
    if (LuxSensors != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LuxSensors);
    }
    if (OffFlag != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OffFlag);
    }
    if (IsProgrammed != false) {
      size += 2 + 1;
    }
    if (detectionTrigger_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DetectionTrigger);
    }
    if (warningTrigger_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(WarningTrigger);
    }
    if (idleTrigger_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(IdleTrigger);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SensorMessage other) {
    if (other == null) {
      return;
    }
    if (other.Profile != 0) {
      Profile = other.Profile;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.SensorAddress != 0) {
      SensorAddress = other.SensorAddress;
    }
    if (other.SensorDaliLine != 0) {
      SensorDaliLine = other.SensorDaliLine;
    }
    if (other.AddressQuery != 0) {
      AddressQuery = other.AddressQuery;
    }
    if (other.ControlDaliLine != 0) {
      ControlDaliLine = other.ControlDaliLine;
    }
    if (other.ControlGroup != 0) {
      ControlGroup = other.ControlGroup;
    }
    if (other.LightSetpoint != 0) {
      LightSetpoint = other.LightSetpoint;
    }
    if (other.WarningSetpoint != 0) {
      WarningSetpoint = other.WarningSetpoint;
    }
    if (other.MotionOnly != 0) {
      MotionOnly = other.MotionOnly;
    }
    if (other.TimeoutValues != 0) {
      TimeoutValues = other.TimeoutValues;
    }
    if (other.WarningValues != 0) {
      WarningValues = other.WarningValues;
    }
    if (other.DisableValues != 0) {
      DisableValues = other.DisableValues;
    }
    if (other.Input1Pm != 0) {
      Input1Pm = other.Input1Pm;
    }
    if (other.Input2Pm != 0) {
      Input2Pm = other.Input2Pm;
    }
    if (other.SensorStates != 0) {
      SensorStates = other.SensorStates;
    }
    if (other.MotionSensors != 0) {
      MotionSensors = other.MotionSensors;
    }
    if (other.LuxSensors != 0) {
      LuxSensors = other.LuxSensors;
    }
    if (other.OffFlag != 0) {
      OffFlag = other.OffFlag;
    }
    if (other.IsProgrammed != false) {
      IsProgrammed = other.IsProgrammed;
    }
    if (other.detectionTrigger_ != null) {
      if (detectionTrigger_ == null) {
        detectionTrigger_ = new global::TriggerMessage();
      }
      DetectionTrigger.MergeFrom(other.DetectionTrigger);
    }
    if (other.warningTrigger_ != null) {
      if (warningTrigger_ == null) {
        warningTrigger_ = new global::TriggerMessage();
      }
      WarningTrigger.MergeFrom(other.WarningTrigger);
    }
    if (other.idleTrigger_ != null) {
      if (idleTrigger_ == null) {
        idleTrigger_ = new global::TriggerMessage();
      }
      IdleTrigger.MergeFrom(other.IdleTrigger);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Profile = input.ReadUInt32();
          break;
        }
        case 16: {
          Index = input.ReadUInt32();
          break;
        }
        case 24: {
          SensorAddress = input.ReadUInt32();
          break;
        }
        case 32: {
          SensorDaliLine = input.ReadUInt32();
          break;
        }
        case 40: {
          AddressQuery = input.ReadUInt32();
          break;
        }
        case 48: {
          ControlDaliLine = input.ReadUInt32();
          break;
        }
        case 56: {
          ControlGroup = input.ReadUInt32();
          break;
        }
        case 64: {
          LightSetpoint = input.ReadUInt32();
          break;
        }
        case 72: {
          WarningSetpoint = input.ReadUInt32();
          break;
        }
        case 80: {
          MotionOnly = input.ReadUInt32();
          break;
        }
        case 88: {
          TimeoutValues = input.ReadUInt32();
          break;
        }
        case 96: {
          WarningValues = input.ReadUInt32();
          break;
        }
        case 104: {
          DisableValues = input.ReadUInt32();
          break;
        }
        case 112: {
          Input1Pm = input.ReadUInt32();
          break;
        }
        case 120: {
          Input2Pm = input.ReadUInt32();
          break;
        }
        case 128: {
          SensorStates = input.ReadUInt32();
          break;
        }
        case 136: {
          MotionSensors = input.ReadUInt32();
          break;
        }
        case 144: {
          LuxSensors = input.ReadUInt32();
          break;
        }
        case 152: {
          OffFlag = input.ReadUInt32();
          break;
        }
        case 160: {
          IsProgrammed = input.ReadBool();
          break;
        }
        case 170: {
          if (detectionTrigger_ == null) {
            detectionTrigger_ = new global::TriggerMessage();
          }
          input.ReadMessage(detectionTrigger_);
          break;
        }
        case 178: {
          if (warningTrigger_ == null) {
            warningTrigger_ = new global::TriggerMessage();
          }
          input.ReadMessage(warningTrigger_);
          break;
        }
        case 186: {
          if (idleTrigger_ == null) {
            idleTrigger_ = new global::TriggerMessage();
          }
          input.ReadMessage(idleTrigger_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// List Steps
/// </summary>
public sealed partial class ListStepMessage : pb::IMessage<ListStepMessage> {
  private static readonly pb::MessageParser<ListStepMessage> _parser = new pb::MessageParser<ListStepMessage>(() => new ListStepMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListStepMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListStepMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListStepMessage(ListStepMessage other) : this() {
    stepIndex_ = other.stepIndex_;
    action_ = other.action_ != null ? other.action_.Clone() : null;
    timeSeconds_ = other.timeSeconds_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListStepMessage Clone() {
    return new ListStepMessage(this);
  }

  /// <summary>Field number for the "step_index" field.</summary>
  public const int StepIndexFieldNumber = 1;
  private uint stepIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StepIndex {
    get { return stepIndex_; }
    set {
      stepIndex_ = value;
    }
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 2;
  private global::TriggerMessage action_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  /// <summary>Field number for the "time_seconds" field.</summary>
  public const int TimeSecondsFieldNumber = 3;
  private uint timeSeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimeSeconds {
    get { return timeSeconds_; }
    set {
      timeSeconds_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListStepMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListStepMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StepIndex != other.StepIndex) return false;
    if (!object.Equals(Action, other.Action)) return false;
    if (TimeSeconds != other.TimeSeconds) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StepIndex != 0) hash ^= StepIndex.GetHashCode();
    if (action_ != null) hash ^= Action.GetHashCode();
    if (TimeSeconds != 0) hash ^= TimeSeconds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StepIndex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(StepIndex);
    }
    if (action_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Action);
    }
    if (TimeSeconds != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TimeSeconds);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StepIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StepIndex);
    }
    if (action_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
    }
    if (TimeSeconds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeSeconds);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListStepMessage other) {
    if (other == null) {
      return;
    }
    if (other.StepIndex != 0) {
      StepIndex = other.StepIndex;
    }
    if (other.action_ != null) {
      if (action_ == null) {
        action_ = new global::TriggerMessage();
      }
      Action.MergeFrom(other.Action);
    }
    if (other.TimeSeconds != 0) {
      TimeSeconds = other.TimeSeconds;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          StepIndex = input.ReadUInt32();
          break;
        }
        case 18: {
          if (action_ == null) {
            action_ = new global::TriggerMessage();
          }
          input.ReadMessage(action_);
          break;
        }
        case 24: {
          TimeSeconds = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Alarms
/// </summary>
public sealed partial class AlarmMessage : pb::IMessage<AlarmMessage> {
  private static readonly pb::MessageParser<AlarmMessage> _parser = new pb::MessageParser<AlarmMessage>(() => new AlarmMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AlarmMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlarmMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlarmMessage(AlarmMessage other) : this() {
    index_ = other.index_;
    enabled_ = other.enabled_;
    startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
    endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
    startTrigger_ = other.startTrigger_ != null ? other.startTrigger_.Clone() : null;
    endTrigger_ = other.endTrigger_ != null ? other.endTrigger_.Clone() : null;
    astroStart_ = other.astroStart_;
    astroEnd_ = other.astroEnd_;
    repeat_ = other.repeat_;
    repeatDayBitmask_ = other.repeatDayBitmask_;
    repeatMonthBitmask_ = other.repeatMonthBitmask_;
    yearly_ = other.yearly_;
    startOffsetIsBefore_ = other.startOffsetIsBefore_;
    endOffsetIsBefore_ = other.endOffsetIsBefore_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlarmMessage Clone() {
    return new AlarmMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 2;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  /// <summary>Field number for the "start_time" field.</summary>
  public const int StartTimeFieldNumber = 3;
  private global::TimeClockMessage startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "end_time" field.</summary>
  public const int EndTimeFieldNumber = 4;
  private global::TimeClockMessage endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  /// <summary>Field number for the "start_trigger" field.</summary>
  public const int StartTriggerFieldNumber = 5;
  private global::TriggerMessage startTrigger_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage StartTrigger {
    get { return startTrigger_; }
    set {
      startTrigger_ = value;
    }
  }

  /// <summary>Field number for the "end_trigger" field.</summary>
  public const int EndTriggerFieldNumber = 6;
  private global::TriggerMessage endTrigger_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage EndTrigger {
    get { return endTrigger_; }
    set {
      endTrigger_ = value;
    }
  }

  /// <summary>Field number for the "astro_start" field.</summary>
  public const int AstroStartFieldNumber = 7;
  private global::AlarmAstroType astroStart_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AlarmAstroType AstroStart {
    get { return astroStart_; }
    set {
      astroStart_ = value;
    }
  }

  /// <summary>Field number for the "astro_end" field.</summary>
  public const int AstroEndFieldNumber = 8;
  private global::AlarmAstroType astroEnd_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AlarmAstroType AstroEnd {
    get { return astroEnd_; }
    set {
      astroEnd_ = value;
    }
  }

  /// <summary>Field number for the "repeat" field.</summary>
  public const int RepeatFieldNumber = 9;
  private global::AlarmRepeatType repeat_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AlarmRepeatType Repeat {
    get { return repeat_; }
    set {
      repeat_ = value;
    }
  }

  /// <summary>Field number for the "repeat_day_bitmask" field.</summary>
  public const int RepeatDayBitmaskFieldNumber = 10;
  private uint repeatDayBitmask_;
  /// <summary>
  /// 1 to trigger on this day. LSB (0) = Monday, MSB (6) = Sunday
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RepeatDayBitmask {
    get { return repeatDayBitmask_; }
    set {
      repeatDayBitmask_ = value;
    }
  }

  /// <summary>Field number for the "repeat_month_bitmask" field.</summary>
  public const int RepeatMonthBitmaskFieldNumber = 11;
  private uint repeatMonthBitmask_;
  /// <summary>
  /// 1 to trigger during this month. LSB (0) = January, MSB (11) = December
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RepeatMonthBitmask {
    get { return repeatMonthBitmask_; }
    set {
      repeatMonthBitmask_ = value;
    }
  }

  /// <summary>Field number for the "yearly" field.</summary>
  public const int YearlyFieldNumber = 12;
  private bool yearly_;
  /// <summary>
  /// Should this Alarm happen each year?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Yearly {
    get { return yearly_; }
    set {
      yearly_ = value;
    }
  }

  /// <summary>Field number for the "start_offset_is_before" field.</summary>
  public const int StartOffsetIsBeforeFieldNumber = 13;
  private bool startOffsetIsBefore_;
  /// <summary>
  /// E.g. 10 minutes BEFORE or AFTER the start astro event?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool StartOffsetIsBefore {
    get { return startOffsetIsBefore_; }
    set {
      startOffsetIsBefore_ = value;
    }
  }

  /// <summary>Field number for the "end_offset_is_before" field.</summary>
  public const int EndOffsetIsBeforeFieldNumber = 14;
  private bool endOffsetIsBefore_;
  /// <summary>
  /// E.g. 10 minutes BEFORE or AFTER the end astro event?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EndOffsetIsBefore {
    get { return endOffsetIsBefore_; }
    set {
      endOffsetIsBefore_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AlarmMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AlarmMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Enabled != other.Enabled) return false;
    if (!object.Equals(StartTime, other.StartTime)) return false;
    if (!object.Equals(EndTime, other.EndTime)) return false;
    if (!object.Equals(StartTrigger, other.StartTrigger)) return false;
    if (!object.Equals(EndTrigger, other.EndTrigger)) return false;
    if (AstroStart != other.AstroStart) return false;
    if (AstroEnd != other.AstroEnd) return false;
    if (Repeat != other.Repeat) return false;
    if (RepeatDayBitmask != other.RepeatDayBitmask) return false;
    if (RepeatMonthBitmask != other.RepeatMonthBitmask) return false;
    if (Yearly != other.Yearly) return false;
    if (StartOffsetIsBefore != other.StartOffsetIsBefore) return false;
    if (EndOffsetIsBefore != other.EndOffsetIsBefore) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (startTime_ != null) hash ^= StartTime.GetHashCode();
    if (endTime_ != null) hash ^= EndTime.GetHashCode();
    if (startTrigger_ != null) hash ^= StartTrigger.GetHashCode();
    if (endTrigger_ != null) hash ^= EndTrigger.GetHashCode();
    if (AstroStart != 0) hash ^= AstroStart.GetHashCode();
    if (AstroEnd != 0) hash ^= AstroEnd.GetHashCode();
    if (Repeat != 0) hash ^= Repeat.GetHashCode();
    if (RepeatDayBitmask != 0) hash ^= RepeatDayBitmask.GetHashCode();
    if (RepeatMonthBitmask != 0) hash ^= RepeatMonthBitmask.GetHashCode();
    if (Yearly != false) hash ^= Yearly.GetHashCode();
    if (StartOffsetIsBefore != false) hash ^= StartOffsetIsBefore.GetHashCode();
    if (EndOffsetIsBefore != false) hash ^= EndOffsetIsBefore.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (Enabled != false) {
      output.WriteRawTag(16);
      output.WriteBool(Enabled);
    }
    if (startTime_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(StartTime);
    }
    if (endTime_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(EndTime);
    }
    if (startTrigger_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(StartTrigger);
    }
    if (endTrigger_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(EndTrigger);
    }
    if (AstroStart != 0) {
      output.WriteRawTag(56);
      output.WriteEnum((int) AstroStart);
    }
    if (AstroEnd != 0) {
      output.WriteRawTag(64);
      output.WriteEnum((int) AstroEnd);
    }
    if (Repeat != 0) {
      output.WriteRawTag(72);
      output.WriteEnum((int) Repeat);
    }
    if (RepeatDayBitmask != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(RepeatDayBitmask);
    }
    if (RepeatMonthBitmask != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(RepeatMonthBitmask);
    }
    if (Yearly != false) {
      output.WriteRawTag(96);
      output.WriteBool(Yearly);
    }
    if (StartOffsetIsBefore != false) {
      output.WriteRawTag(104);
      output.WriteBool(StartOffsetIsBefore);
    }
    if (EndOffsetIsBefore != false) {
      output.WriteRawTag(112);
      output.WriteBool(EndOffsetIsBefore);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (startTime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
    }
    if (endTime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
    }
    if (startTrigger_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTrigger);
    }
    if (endTrigger_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTrigger);
    }
    if (AstroStart != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AstroStart);
    }
    if (AstroEnd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AstroEnd);
    }
    if (Repeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Repeat);
    }
    if (RepeatDayBitmask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RepeatDayBitmask);
    }
    if (RepeatMonthBitmask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RepeatMonthBitmask);
    }
    if (Yearly != false) {
      size += 1 + 1;
    }
    if (StartOffsetIsBefore != false) {
      size += 1 + 1;
    }
    if (EndOffsetIsBefore != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AlarmMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    if (other.startTime_ != null) {
      if (startTime_ == null) {
        startTime_ = new global::TimeClockMessage();
      }
      StartTime.MergeFrom(other.StartTime);
    }
    if (other.endTime_ != null) {
      if (endTime_ == null) {
        endTime_ = new global::TimeClockMessage();
      }
      EndTime.MergeFrom(other.EndTime);
    }
    if (other.startTrigger_ != null) {
      if (startTrigger_ == null) {
        startTrigger_ = new global::TriggerMessage();
      }
      StartTrigger.MergeFrom(other.StartTrigger);
    }
    if (other.endTrigger_ != null) {
      if (endTrigger_ == null) {
        endTrigger_ = new global::TriggerMessage();
      }
      EndTrigger.MergeFrom(other.EndTrigger);
    }
    if (other.AstroStart != 0) {
      AstroStart = other.AstroStart;
    }
    if (other.AstroEnd != 0) {
      AstroEnd = other.AstroEnd;
    }
    if (other.Repeat != 0) {
      Repeat = other.Repeat;
    }
    if (other.RepeatDayBitmask != 0) {
      RepeatDayBitmask = other.RepeatDayBitmask;
    }
    if (other.RepeatMonthBitmask != 0) {
      RepeatMonthBitmask = other.RepeatMonthBitmask;
    }
    if (other.Yearly != false) {
      Yearly = other.Yearly;
    }
    if (other.StartOffsetIsBefore != false) {
      StartOffsetIsBefore = other.StartOffsetIsBefore;
    }
    if (other.EndOffsetIsBefore != false) {
      EndOffsetIsBefore = other.EndOffsetIsBefore;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          Enabled = input.ReadBool();
          break;
        }
        case 26: {
          if (startTime_ == null) {
            startTime_ = new global::TimeClockMessage();
          }
          input.ReadMessage(startTime_);
          break;
        }
        case 34: {
          if (endTime_ == null) {
            endTime_ = new global::TimeClockMessage();
          }
          input.ReadMessage(endTime_);
          break;
        }
        case 42: {
          if (startTrigger_ == null) {
            startTrigger_ = new global::TriggerMessage();
          }
          input.ReadMessage(startTrigger_);
          break;
        }
        case 50: {
          if (endTrigger_ == null) {
            endTrigger_ = new global::TriggerMessage();
          }
          input.ReadMessage(endTrigger_);
          break;
        }
        case 56: {
          astroStart_ = (global::AlarmAstroType) input.ReadEnum();
          break;
        }
        case 64: {
          astroEnd_ = (global::AlarmAstroType) input.ReadEnum();
          break;
        }
        case 72: {
          repeat_ = (global::AlarmRepeatType) input.ReadEnum();
          break;
        }
        case 80: {
          RepeatDayBitmask = input.ReadUInt32();
          break;
        }
        case 88: {
          RepeatMonthBitmask = input.ReadUInt32();
          break;
        }
        case 96: {
          Yearly = input.ReadBool();
          break;
        }
        case 104: {
          StartOffsetIsBefore = input.ReadBool();
          break;
        }
        case 112: {
          EndOffsetIsBefore = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Burn_In
/// </summary>
public sealed partial class BurnInMessage : pb::IMessage<BurnInMessage> {
  private static readonly pb::MessageParser<BurnInMessage> _parser = new pb::MessageParser<BurnInMessage>(() => new BurnInMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BurnInMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BurnInMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BurnInMessage(BurnInMessage other) : this() {
    index_ = other.index_;
    line_ = other.line_;
    address_ = other.address_;
    queryAddress_ = other.queryAddress_;
    time_ = other.time_;
    remaining_ = other.remaining_;
    states_ = other.states_ != null ? other.states_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BurnInMessage Clone() {
    return new BurnInMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "line" field.</summary>
  public const int LineFieldNumber = 2;
  private uint line_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Line {
    get { return line_; }
    set {
      line_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 3;
  private uint address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "query_address" field.</summary>
  public const int QueryAddressFieldNumber = 4;
  private uint queryAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint QueryAddress {
    get { return queryAddress_; }
    set {
      queryAddress_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 5;
  private uint time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "remaining" field.</summary>
  public const int RemainingFieldNumber = 6;
  private uint remaining_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Remaining {
    get { return remaining_; }
    set {
      remaining_ = value;
    }
  }

  /// <summary>Field number for the "states" field.</summary>
  public const int StatesFieldNumber = 7;
  private global::BurnInBitsMessage states_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BurnInBitsMessage States {
    get { return states_; }
    set {
      states_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BurnInMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BurnInMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Line != other.Line) return false;
    if (Address != other.Address) return false;
    if (QueryAddress != other.QueryAddress) return false;
    if (Time != other.Time) return false;
    if (Remaining != other.Remaining) return false;
    if (!object.Equals(States, other.States)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Line != 0) hash ^= Line.GetHashCode();
    if (Address != 0) hash ^= Address.GetHashCode();
    if (QueryAddress != 0) hash ^= QueryAddress.GetHashCode();
    if (Time != 0) hash ^= Time.GetHashCode();
    if (Remaining != 0) hash ^= Remaining.GetHashCode();
    if (states_ != null) hash ^= States.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (Line != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Line);
    }
    if (Address != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Address);
    }
    if (QueryAddress != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(QueryAddress);
    }
    if (Time != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Time);
    }
    if (Remaining != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Remaining);
    }
    if (states_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(States);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Line != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Line);
    }
    if (Address != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Address);
    }
    if (QueryAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueryAddress);
    }
    if (Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
    }
    if (Remaining != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Remaining);
    }
    if (states_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(States);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BurnInMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Line != 0) {
      Line = other.Line;
    }
    if (other.Address != 0) {
      Address = other.Address;
    }
    if (other.QueryAddress != 0) {
      QueryAddress = other.QueryAddress;
    }
    if (other.Time != 0) {
      Time = other.Time;
    }
    if (other.Remaining != 0) {
      Remaining = other.Remaining;
    }
    if (other.states_ != null) {
      if (states_ == null) {
        states_ = new global::BurnInBitsMessage();
      }
      States.MergeFrom(other.States);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          Line = input.ReadUInt32();
          break;
        }
        case 24: {
          Address = input.ReadUInt32();
          break;
        }
        case 32: {
          QueryAddress = input.ReadUInt32();
          break;
        }
        case 40: {
          Time = input.ReadUInt32();
          break;
        }
        case 48: {
          Remaining = input.ReadUInt32();
          break;
        }
        case 58: {
          if (states_ == null) {
            states_ = new global::BurnInBitsMessage();
          }
          input.ReadMessage(states_);
          break;
        }
      }
    }
  }

}

public sealed partial class ExternalTriggerMessage : pb::IMessage<ExternalTriggerMessage> {
  private static readonly pb::MessageParser<ExternalTriggerMessage> _parser = new pb::MessageParser<ExternalTriggerMessage>(() => new ExternalTriggerMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ExternalTriggerMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExternalTriggerMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExternalTriggerMessage(ExternalTriggerMessage other) : this() {
    trigger_ = other.trigger_ != null ? other.trigger_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExternalTriggerMessage Clone() {
    return new ExternalTriggerMessage(this);
  }

  /// <summary>Field number for the "trigger" field.</summary>
  public const int TriggerFieldNumber = 1;
  private global::TriggerMessage trigger_;
  /// <summary>
  /// Can be used to action Triggers via the network instead of via a hardware input or on-board alarm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage Trigger {
    get { return trigger_; }
    set {
      trigger_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ExternalTriggerMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ExternalTriggerMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Trigger, other.Trigger)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (trigger_ != null) hash ^= Trigger.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (trigger_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Trigger);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (trigger_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trigger);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ExternalTriggerMessage other) {
    if (other == null) {
      return;
    }
    if (other.trigger_ != null) {
      if (trigger_ == null) {
        trigger_ = new global::TriggerMessage();
      }
      Trigger.MergeFrom(other.Trigger);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (trigger_ == null) {
            trigger_ = new global::TriggerMessage();
          }
          input.ReadMessage(trigger_);
          break;
        }
      }
    }
  }

}

public sealed partial class InputMultiMessage : pb::IMessage<InputMultiMessage> {
  private static readonly pb::MessageParser<InputMultiMessage> _parser = new pb::MessageParser<InputMultiMessage>(() => new InputMultiMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InputMultiMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputMultiMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputMultiMessage(InputMultiMessage other) : this() {
    profile_ = other.profile_;
    inputs_ = other.inputs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputMultiMessage Clone() {
    return new InputMultiMessage(this);
  }

  /// <summary>Field number for the "profile" field.</summary>
  public const int ProfileFieldNumber = 1;
  private uint profile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  /// <summary>Field number for the "inputs" field.</summary>
  public const int InputsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::IOInputMessage> _repeated_inputs_codec
      = pb::FieldCodec.ForMessage(18, global::IOInputMessage.Parser);
  private readonly pbc::RepeatedField<global::IOInputMessage> inputs_ = new pbc::RepeatedField<global::IOInputMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::IOInputMessage> Inputs {
    get { return inputs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InputMultiMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InputMultiMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Profile != other.Profile) return false;
    if(!inputs_.Equals(other.inputs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Profile != 0) hash ^= Profile.GetHashCode();
    hash ^= inputs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Profile != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Profile);
    }
    inputs_.WriteTo(output, _repeated_inputs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Profile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profile);
    }
    size += inputs_.CalculateSize(_repeated_inputs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InputMultiMessage other) {
    if (other == null) {
      return;
    }
    if (other.Profile != 0) {
      Profile = other.Profile;
    }
    inputs_.Add(other.inputs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Profile = input.ReadUInt32();
          break;
        }
        case 18: {
          inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class OutputMultiMessage : pb::IMessage<OutputMultiMessage> {
  private static readonly pb::MessageParser<OutputMultiMessage> _parser = new pb::MessageParser<OutputMultiMessage>(() => new OutputMultiMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OutputMultiMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OutputMultiMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OutputMultiMessage(OutputMultiMessage other) : this() {
    profile_ = other.profile_;
    outputs_ = other.outputs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OutputMultiMessage Clone() {
    return new OutputMultiMessage(this);
  }

  /// <summary>Field number for the "profile" field.</summary>
  public const int ProfileFieldNumber = 1;
  private uint profile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  /// <summary>Field number for the "outputs" field.</summary>
  public const int OutputsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::IOOutputMessage> _repeated_outputs_codec
      = pb::FieldCodec.ForMessage(18, global::IOOutputMessage.Parser);
  private readonly pbc::RepeatedField<global::IOOutputMessage> outputs_ = new pbc::RepeatedField<global::IOOutputMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::IOOutputMessage> Outputs {
    get { return outputs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OutputMultiMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OutputMultiMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Profile != other.Profile) return false;
    if(!outputs_.Equals(other.outputs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Profile != 0) hash ^= Profile.GetHashCode();
    hash ^= outputs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Profile != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Profile);
    }
    outputs_.WriteTo(output, _repeated_outputs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Profile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profile);
    }
    size += outputs_.CalculateSize(_repeated_outputs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OutputMultiMessage other) {
    if (other == null) {
      return;
    }
    if (other.Profile != 0) {
      Profile = other.Profile;
    }
    outputs_.Add(other.outputs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Profile = input.ReadUInt32();
          break;
        }
        case 18: {
          outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DALIInputMultiMessage : pb::IMessage<DALIInputMultiMessage> {
  private static readonly pb::MessageParser<DALIInputMultiMessage> _parser = new pb::MessageParser<DALIInputMultiMessage>(() => new DALIInputMultiMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DALIInputMultiMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIInputMultiMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIInputMultiMessage(DALIInputMultiMessage other) : this() {
    profile_ = other.profile_;
    inputIndexOffset_ = other.inputIndexOffset_;
    inputs_ = other.inputs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIInputMultiMessage Clone() {
    return new DALIInputMultiMessage(this);
  }

  /// <summary>Field number for the "profile" field.</summary>
  public const int ProfileFieldNumber = 1;
  private uint profile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  /// <summary>Field number for the "input_index_offset" field.</summary>
  public const int InputIndexOffsetFieldNumber = 2;
  private uint inputIndexOffset_;
  /// <summary>
  /// To support paginated results (0-9, 10-19, 20-29, 30-39)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputIndexOffset {
    get { return inputIndexOffset_; }
    set {
      inputIndexOffset_ = value;
    }
  }

  /// <summary>Field number for the "inputs" field.</summary>
  public const int InputsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::DALIInputMessage> _repeated_inputs_codec
      = pb::FieldCodec.ForMessage(26, global::DALIInputMessage.Parser);
  private readonly pbc::RepeatedField<global::DALIInputMessage> inputs_ = new pbc::RepeatedField<global::DALIInputMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DALIInputMessage> Inputs {
    get { return inputs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DALIInputMultiMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DALIInputMultiMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Profile != other.Profile) return false;
    if (InputIndexOffset != other.InputIndexOffset) return false;
    if(!inputs_.Equals(other.inputs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Profile != 0) hash ^= Profile.GetHashCode();
    if (InputIndexOffset != 0) hash ^= InputIndexOffset.GetHashCode();
    hash ^= inputs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Profile != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Profile);
    }
    if (InputIndexOffset != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(InputIndexOffset);
    }
    inputs_.WriteTo(output, _repeated_inputs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Profile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profile);
    }
    if (InputIndexOffset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputIndexOffset);
    }
    size += inputs_.CalculateSize(_repeated_inputs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DALIInputMultiMessage other) {
    if (other == null) {
      return;
    }
    if (other.Profile != 0) {
      Profile = other.Profile;
    }
    if (other.InputIndexOffset != 0) {
      InputIndexOffset = other.InputIndexOffset;
    }
    inputs_.Add(other.inputs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Profile = input.ReadUInt32();
          break;
        }
        case 16: {
          InputIndexOffset = input.ReadUInt32();
          break;
        }
        case 26: {
          inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class IRMultiMessage : pb::IMessage<IRMultiMessage> {
  private static readonly pb::MessageParser<IRMultiMessage> _parser = new pb::MessageParser<IRMultiMessage>(() => new IRMultiMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IRMultiMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IRMultiMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IRMultiMessage(IRMultiMessage other) : this() {
    profile_ = other.profile_;
    irs_ = other.irs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IRMultiMessage Clone() {
    return new IRMultiMessage(this);
  }

  /// <summary>Field number for the "profile" field.</summary>
  public const int ProfileFieldNumber = 1;
  private uint profile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  /// <summary>Field number for the "irs" field.</summary>
  public const int IrsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::IOIRMessage> _repeated_irs_codec
      = pb::FieldCodec.ForMessage(18, global::IOIRMessage.Parser);
  private readonly pbc::RepeatedField<global::IOIRMessage> irs_ = new pbc::RepeatedField<global::IOIRMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::IOIRMessage> Irs {
    get { return irs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IRMultiMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IRMultiMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Profile != other.Profile) return false;
    if(!irs_.Equals(other.irs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Profile != 0) hash ^= Profile.GetHashCode();
    hash ^= irs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Profile != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Profile);
    }
    irs_.WriteTo(output, _repeated_irs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Profile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profile);
    }
    size += irs_.CalculateSize(_repeated_irs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IRMultiMessage other) {
    if (other == null) {
      return;
    }
    if (other.Profile != 0) {
      Profile = other.Profile;
    }
    irs_.Add(other.irs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Profile = input.ReadUInt32();
          break;
        }
        case 18: {
          irs_.AddEntriesFrom(input, _repeated_irs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ListMessage : pb::IMessage<ListMessage> {
  private static readonly pb::MessageParser<ListMessage> _parser = new pb::MessageParser<ListMessage>(() => new ListMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListMessage(ListMessage other) : this() {
    listIndex_ = other.listIndex_;
    step_ = other.step_.Clone();
    listState_ = other.listState_;
    totalStepCount_ = other.totalStepCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListMessage Clone() {
    return new ListMessage(this);
  }

  /// <summary>Field number for the "list_index" field.</summary>
  public const int ListIndexFieldNumber = 1;
  private uint listIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ListIndex {
    get { return listIndex_; }
    set {
      listIndex_ = value;
    }
  }

  /// <summary>Field number for the "step" field.</summary>
  public const int StepFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ListStepMessage> _repeated_step_codec
      = pb::FieldCodec.ForMessage(18, global::ListStepMessage.Parser);
  private readonly pbc::RepeatedField<global::ListStepMessage> step_ = new pbc::RepeatedField<global::ListStepMessage>();
  /// <summary>
  /// Limited to 32 for this Message Type; you must use ExtendedListMessage to configure more than 32 steps per List
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListStepMessage> Step {
    get { return step_; }
  }

  /// <summary>Field number for the "list_state" field.</summary>
  public const int ListStateFieldNumber = 3;
  private uint listState_;
  /// <summary>
  /// Typically will be 'DISABLED' to start with (requires a 'START LIST' trigger to begin)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ListState {
    get { return listState_; }
    set {
      listState_ = value;
    }
  }

  /// <summary>Field number for the "total_step_count" field.</summary>
  public const int TotalStepCountFieldNumber = 4;
  private uint totalStepCount_;
  /// <summary>
  /// Can be greater than 32, but you must use ExtendedListMessage to send the rest
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TotalStepCount {
    get { return totalStepCount_; }
    set {
      totalStepCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ListIndex != other.ListIndex) return false;
    if(!step_.Equals(other.step_)) return false;
    if (ListState != other.ListState) return false;
    if (TotalStepCount != other.TotalStepCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ListIndex != 0) hash ^= ListIndex.GetHashCode();
    hash ^= step_.GetHashCode();
    if (ListState != 0) hash ^= ListState.GetHashCode();
    if (TotalStepCount != 0) hash ^= TotalStepCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ListIndex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ListIndex);
    }
    step_.WriteTo(output, _repeated_step_codec);
    if (ListState != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(ListState);
    }
    if (TotalStepCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TotalStepCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ListIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ListIndex);
    }
    size += step_.CalculateSize(_repeated_step_codec);
    if (ListState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ListState);
    }
    if (TotalStepCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalStepCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListMessage other) {
    if (other == null) {
      return;
    }
    if (other.ListIndex != 0) {
      ListIndex = other.ListIndex;
    }
    step_.Add(other.step_);
    if (other.ListState != 0) {
      ListState = other.ListState;
    }
    if (other.TotalStepCount != 0) {
      TotalStepCount = other.TotalStepCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ListIndex = input.ReadUInt32();
          break;
        }
        case 18: {
          step_.AddEntriesFrom(input, _repeated_step_codec);
          break;
        }
        case 24: {
          ListState = input.ReadUInt32();
          break;
        }
        case 32: {
          TotalStepCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// This Message must be used when the List has more than 32 steps
/// </summary>
public sealed partial class ExtendedListMessage : pb::IMessage<ExtendedListMessage> {
  private static readonly pb::MessageParser<ExtendedListMessage> _parser = new pb::MessageParser<ExtendedListMessage>(() => new ExtendedListMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ExtendedListMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExtendedListMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExtendedListMessage(ExtendedListMessage other) : this() {
    listIndex_ = other.listIndex_;
    stepIndexOffset_ = other.stepIndexOffset_;
    step_ = other.step_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExtendedListMessage Clone() {
    return new ExtendedListMessage(this);
  }

  /// <summary>Field number for the "list_index" field.</summary>
  public const int ListIndexFieldNumber = 1;
  private uint listIndex_;
  /// <summary>
  /// Which List do these steps belong to?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ListIndex {
    get { return listIndex_; }
    set {
      listIndex_ = value;
    }
  }

  /// <summary>Field number for the "step_index_offset" field.</summary>
  public const int StepIndexOffsetFieldNumber = 2;
  private uint stepIndexOffset_;
  /// <summary>
  /// 0 for the first ExtendedListMessage; offset by 32 for every ExtendedListMessage beyond the first
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StepIndexOffset {
    get { return stepIndexOffset_; }
    set {
      stepIndexOffset_ = value;
    }
  }

  /// <summary>Field number for the "step" field.</summary>
  public const int StepFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ListStepMessage> _repeated_step_codec
      = pb::FieldCodec.ForMessage(26, global::ListStepMessage.Parser);
  private readonly pbc::RepeatedField<global::ListStepMessage> step_ = new pbc::RepeatedField<global::ListStepMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListStepMessage> Step {
    get { return step_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ExtendedListMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ExtendedListMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ListIndex != other.ListIndex) return false;
    if (StepIndexOffset != other.StepIndexOffset) return false;
    if(!step_.Equals(other.step_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ListIndex != 0) hash ^= ListIndex.GetHashCode();
    if (StepIndexOffset != 0) hash ^= StepIndexOffset.GetHashCode();
    hash ^= step_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ListIndex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ListIndex);
    }
    if (StepIndexOffset != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(StepIndexOffset);
    }
    step_.WriteTo(output, _repeated_step_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ListIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ListIndex);
    }
    if (StepIndexOffset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StepIndexOffset);
    }
    size += step_.CalculateSize(_repeated_step_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ExtendedListMessage other) {
    if (other == null) {
      return;
    }
    if (other.ListIndex != 0) {
      ListIndex = other.ListIndex;
    }
    if (other.StepIndexOffset != 0) {
      StepIndexOffset = other.StepIndexOffset;
    }
    step_.Add(other.step_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ListIndex = input.ReadUInt32();
          break;
        }
        case 16: {
          StepIndexOffset = input.ReadUInt32();
          break;
        }
        case 26: {
          step_.AddEntriesFrom(input, _repeated_step_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AlarmMultiMessage : pb::IMessage<AlarmMultiMessage> {
  private static readonly pb::MessageParser<AlarmMultiMessage> _parser = new pb::MessageParser<AlarmMultiMessage>(() => new AlarmMultiMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AlarmMultiMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlarmMultiMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlarmMultiMessage(AlarmMultiMessage other) : this() {
    alarm_ = other.alarm_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AlarmMultiMessage Clone() {
    return new AlarmMultiMessage(this);
  }

  /// <summary>Field number for the "alarm" field.</summary>
  public const int AlarmFieldNumber = 1;
  private static readonly pb::FieldCodec<global::AlarmMessage> _repeated_alarm_codec
      = pb::FieldCodec.ForMessage(10, global::AlarmMessage.Parser);
  private readonly pbc::RepeatedField<global::AlarmMessage> alarm_ = new pbc::RepeatedField<global::AlarmMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AlarmMessage> Alarm {
    get { return alarm_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AlarmMultiMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AlarmMultiMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!alarm_.Equals(other.alarm_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= alarm_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    alarm_.WriteTo(output, _repeated_alarm_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += alarm_.CalculateSize(_repeated_alarm_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AlarmMultiMessage other) {
    if (other == null) {
      return;
    }
    alarm_.Add(other.alarm_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          alarm_.AddEntriesFrom(input, _repeated_alarm_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class BurnInMultiMessage : pb::IMessage<BurnInMultiMessage> {
  private static readonly pb::MessageParser<BurnInMultiMessage> _parser = new pb::MessageParser<BurnInMultiMessage>(() => new BurnInMultiMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BurnInMultiMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BurnInMultiMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BurnInMultiMessage(BurnInMultiMessage other) : this() {
    burnin_ = other.burnin_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BurnInMultiMessage Clone() {
    return new BurnInMultiMessage(this);
  }

  /// <summary>Field number for the "burnin" field.</summary>
  public const int BurninFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BurnInMessage> _repeated_burnin_codec
      = pb::FieldCodec.ForMessage(10, global::BurnInMessage.Parser);
  private readonly pbc::RepeatedField<global::BurnInMessage> burnin_ = new pbc::RepeatedField<global::BurnInMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BurnInMessage> Burnin {
    get { return burnin_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BurnInMultiMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BurnInMultiMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!burnin_.Equals(other.burnin_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= burnin_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    burnin_.WriteTo(output, _repeated_burnin_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += burnin_.CalculateSize(_repeated_burnin_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BurnInMultiMessage other) {
    if (other == null) {
      return;
    }
    burnin_.Add(other.burnin_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          burnin_.AddEntriesFrom(input, _repeated_burnin_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class LogicMessage : pb::IMessage<LogicMessage> {
  private static readonly pb::MessageParser<LogicMessage> _parser = new pb::MessageParser<LogicMessage>(() => new LogicMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LogicMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicMessage(LogicMessage other) : this() {
    index_ = other.index_;
    enabled_ = other.enabled_;
    comparisonObject_ = other.comparisonObject_ != null ? other.comparisonObject_.Clone() : null;
    comparisonValue_ = other.comparisonValue_;
    comparisonType_ = other.comparisonType_;
    actionA_ = other.actionA_ != null ? other.actionA_.Clone() : null;
    actionB_ = other.actionB_ != null ? other.actionB_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicMessage Clone() {
    return new LogicMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 2;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  /// <summary>Field number for the "comparison_object" field.</summary>
  public const int ComparisonObjectFieldNumber = 3;
  private global::TriggerMessage comparisonObject_;
  /// <summary>
  /// What to compare??
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage ComparisonObject {
    get { return comparisonObject_; }
    set {
      comparisonObject_ = value;
    }
  }

  /// <summary>Field number for the "comparison_value" field.</summary>
  public const int ComparisonValueFieldNumber = 4;
  private uint comparisonValue_;
  /// <summary>
  /// Setpoint for comparison
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ComparisonValue {
    get { return comparisonValue_; }
    set {
      comparisonValue_ = value;
    }
  }

  /// <summary>Field number for the "comparison_type" field.</summary>
  public const int ComparisonTypeFieldNumber = 5;
  private global::LogicComparisonType comparisonType_ = 0;
  /// <summary>
  /// Type to compare
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LogicComparisonType ComparisonType {
    get { return comparisonType_; }
    set {
      comparisonType_ = value;
    }
  }

  /// <summary>Field number for the "actionA" field.</summary>
  public const int ActionAFieldNumber = 6;
  private global::TriggerMessage actionA_;
  /// <summary>
  /// Action if True
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage ActionA {
    get { return actionA_; }
    set {
      actionA_ = value;
    }
  }

  /// <summary>Field number for the "actionB" field.</summary>
  public const int ActionBFieldNumber = 7;
  private global::TriggerMessage actionB_;
  /// <summary>
  /// Action if False
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage ActionB {
    get { return actionB_; }
    set {
      actionB_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LogicMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LogicMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Enabled != other.Enabled) return false;
    if (!object.Equals(ComparisonObject, other.ComparisonObject)) return false;
    if (ComparisonValue != other.ComparisonValue) return false;
    if (ComparisonType != other.ComparisonType) return false;
    if (!object.Equals(ActionA, other.ActionA)) return false;
    if (!object.Equals(ActionB, other.ActionB)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (comparisonObject_ != null) hash ^= ComparisonObject.GetHashCode();
    if (ComparisonValue != 0) hash ^= ComparisonValue.GetHashCode();
    if (ComparisonType != 0) hash ^= ComparisonType.GetHashCode();
    if (actionA_ != null) hash ^= ActionA.GetHashCode();
    if (actionB_ != null) hash ^= ActionB.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (Enabled != false) {
      output.WriteRawTag(16);
      output.WriteBool(Enabled);
    }
    if (comparisonObject_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ComparisonObject);
    }
    if (ComparisonValue != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ComparisonValue);
    }
    if (ComparisonType != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) ComparisonType);
    }
    if (actionA_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(ActionA);
    }
    if (actionB_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(ActionB);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (comparisonObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComparisonObject);
    }
    if (ComparisonValue != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ComparisonValue);
    }
    if (ComparisonType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ComparisonType);
    }
    if (actionA_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionA);
    }
    if (actionB_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionB);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LogicMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    if (other.comparisonObject_ != null) {
      if (comparisonObject_ == null) {
        comparisonObject_ = new global::TriggerMessage();
      }
      ComparisonObject.MergeFrom(other.ComparisonObject);
    }
    if (other.ComparisonValue != 0) {
      ComparisonValue = other.ComparisonValue;
    }
    if (other.ComparisonType != 0) {
      ComparisonType = other.ComparisonType;
    }
    if (other.actionA_ != null) {
      if (actionA_ == null) {
        actionA_ = new global::TriggerMessage();
      }
      ActionA.MergeFrom(other.ActionA);
    }
    if (other.actionB_ != null) {
      if (actionB_ == null) {
        actionB_ = new global::TriggerMessage();
      }
      ActionB.MergeFrom(other.ActionB);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          Enabled = input.ReadBool();
          break;
        }
        case 26: {
          if (comparisonObject_ == null) {
            comparisonObject_ = new global::TriggerMessage();
          }
          input.ReadMessage(comparisonObject_);
          break;
        }
        case 32: {
          ComparisonValue = input.ReadUInt32();
          break;
        }
        case 40: {
          comparisonType_ = (global::LogicComparisonType) input.ReadEnum();
          break;
        }
        case 50: {
          if (actionA_ == null) {
            actionA_ = new global::TriggerMessage();
          }
          input.ReadMessage(actionA_);
          break;
        }
        case 58: {
          if (actionB_ == null) {
            actionB_ = new global::TriggerMessage();
          }
          input.ReadMessage(actionB_);
          break;
        }
      }
    }
  }

}

public sealed partial class LogicMultiMessage : pb::IMessage<LogicMultiMessage> {
  private static readonly pb::MessageParser<LogicMultiMessage> _parser = new pb::MessageParser<LogicMultiMessage>(() => new LogicMultiMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LogicMultiMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicMultiMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicMultiMessage(LogicMultiMessage other) : this() {
    logic_ = other.logic_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogicMultiMessage Clone() {
    return new LogicMultiMessage(this);
  }

  /// <summary>Field number for the "logic" field.</summary>
  public const int LogicFieldNumber = 1;
  private static readonly pb::FieldCodec<global::LogicMessage> _repeated_logic_codec
      = pb::FieldCodec.ForMessage(10, global::LogicMessage.Parser);
  private readonly pbc::RepeatedField<global::LogicMessage> logic_ = new pbc::RepeatedField<global::LogicMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LogicMessage> Logic {
    get { return logic_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LogicMultiMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LogicMultiMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!logic_.Equals(other.logic_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= logic_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    logic_.WriteTo(output, _repeated_logic_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += logic_.CalculateSize(_repeated_logic_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LogicMultiMessage other) {
    if (other == null) {
      return;
    }
    logic_.Add(other.logic_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          logic_.AddEntriesFrom(input, _repeated_logic_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///********** SYSTEM MESSAGES ******
/// </summary>
public sealed partial class SensorCommandMessage : pb::IMessage<SensorCommandMessage> {
  private static readonly pb::MessageParser<SensorCommandMessage> _parser = new pb::MessageParser<SensorCommandMessage>(() => new SensorCommandMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SensorCommandMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SensorCommandMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SensorCommandMessage(SensorCommandMessage other) : this() {
    command_ = other.command_;
    index_ = other.index_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SensorCommandMessage Clone() {
    return new SensorCommandMessage(this);
  }

  /// <summary>Field number for the "command" field.</summary>
  public const int CommandFieldNumber = 1;
  private uint command_;
  /// <summary>
  /// DEPRECATED: Use 'type' instead
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Command {
    get { return command_; }
    set {
      command_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 2;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private global::SensorCommandType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SensorCommandType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SensorCommandMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SensorCommandMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Command != other.Command) return false;
    if (Index != other.Index) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Command != 0) hash ^= Command.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Command != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Command);
    }
    if (Index != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Index);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Command != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Command);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SensorCommandMessage other) {
    if (other == null) {
      return;
    }
    if (other.Command != 0) {
      Command = other.Command;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Command = input.ReadUInt32();
          break;
        }
        case 16: {
          Index = input.ReadUInt32();
          break;
        }
        case 24: {
          type_ = (global::SensorCommandType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class ChangeProfileMessage : pb::IMessage<ChangeProfileMessage> {
  private static readonly pb::MessageParser<ChangeProfileMessage> _parser = new pb::MessageParser<ChangeProfileMessage>(() => new ChangeProfileMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeProfileMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeProfileMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeProfileMessage(ChangeProfileMessage other) : this() {
    profile_ = other.profile_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeProfileMessage Clone() {
    return new ChangeProfileMessage(this);
  }

  /// <summary>Field number for the "profile" field.</summary>
  public const int ProfileFieldNumber = 1;
  private uint profile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeProfileMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeProfileMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Profile != other.Profile) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Profile != 0) hash ^= Profile.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Profile != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Profile);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Profile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profile);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeProfileMessage other) {
    if (other == null) {
      return;
    }
    if (other.Profile != 0) {
      Profile = other.Profile;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Profile = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class IdentifyMessage : pb::IMessage<IdentifyMessage> {
  private static readonly pb::MessageParser<IdentifyMessage> _parser = new pb::MessageParser<IdentifyMessage>(() => new IdentifyMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IdentifyMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentifyMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentifyMessage(IdentifyMessage other) : this() {
    mAC_ = other.mAC_;
    iP_ = other.iP_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentifyMessage Clone() {
    return new IdentifyMessage(this);
  }

  /// <summary>Field number for the "MAC" field.</summary>
  public const int MACFieldNumber = 1;
  private ulong mAC_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong MAC {
    get { return mAC_; }
    set {
      mAC_ = value;
    }
  }

  /// <summary>Field number for the "IP" field.</summary>
  public const int IPFieldNumber = 2;
  private ulong iP_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong IP {
    get { return iP_; }
    set {
      iP_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IdentifyMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IdentifyMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MAC != other.MAC) return false;
    if (IP != other.IP) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MAC != 0UL) hash ^= MAC.GetHashCode();
    if (IP != 0UL) hash ^= IP.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MAC != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(MAC);
    }
    if (IP != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(IP);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MAC != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MAC);
    }
    if (IP != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IP);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IdentifyMessage other) {
    if (other == null) {
      return;
    }
    if (other.MAC != 0UL) {
      MAC = other.MAC;
    }
    if (other.IP != 0UL) {
      IP = other.IP;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MAC = input.ReadUInt64();
          break;
        }
        case 16: {
          IP = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateTimeMessage : pb::IMessage<UpdateTimeMessage> {
  private static readonly pb::MessageParser<UpdateTimeMessage> _parser = new pb::MessageParser<UpdateTimeMessage>(() => new UpdateTimeMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateTimeMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateTimeMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateTimeMessage(UpdateTimeMessage other) : this() {
    time_ = other.time_ != null ? other.time_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateTimeMessage Clone() {
    return new UpdateTimeMessage(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private global::TimeClockMessage time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateTimeMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateTimeMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Time, other.Time)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (time_ != null) hash ^= Time.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (time_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Time);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (time_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateTimeMessage other) {
    if (other == null) {
      return;
    }
    if (other.time_ != null) {
      if (time_ == null) {
        time_ = new global::TimeClockMessage();
      }
      Time.MergeFrom(other.Time);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (time_ == null) {
            time_ = new global::TimeClockMessage();
          }
          input.ReadMessage(time_);
          break;
        }
      }
    }
  }

}

public sealed partial class ReadDeviceMessage : pb::IMessage<ReadDeviceMessage> {
  private static readonly pb::MessageParser<ReadDeviceMessage> _parser = new pb::MessageParser<ReadDeviceMessage>(() => new ReadDeviceMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReadDeviceMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadDeviceMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadDeviceMessage(ReadDeviceMessage other) : this() {
    profile_ = other.profile_;
    type_ = other.type_;
    index_ = other.index_;
    secondaryIndex_ = other.secondaryIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReadDeviceMessage Clone() {
    return new ReadDeviceMessage(this);
  }

  /// <summary>Field number for the "profile" field.</summary>
  public const int ProfileFieldNumber = 1;
  private uint profile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::ReadType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReadType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 3;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "secondary_index" field.</summary>
  public const int SecondaryIndexFieldNumber = 4;
  private uint secondaryIndex_;
  /// <summary>
  /// For more advanced reads (e.g. ExtendedListMessage)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SecondaryIndex {
    get { return secondaryIndex_; }
    set {
      secondaryIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReadDeviceMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReadDeviceMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Profile != other.Profile) return false;
    if (Type != other.Type) return false;
    if (Index != other.Index) return false;
    if (SecondaryIndex != other.SecondaryIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Profile != 0) hash ^= Profile.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (SecondaryIndex != 0) hash ^= SecondaryIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Profile != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Profile);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (Index != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Index);
    }
    if (SecondaryIndex != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(SecondaryIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Profile != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profile);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (SecondaryIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondaryIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReadDeviceMessage other) {
    if (other == null) {
      return;
    }
    if (other.Profile != 0) {
      Profile = other.Profile;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.SecondaryIndex != 0) {
      SecondaryIndex = other.SecondaryIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Profile = input.ReadUInt32();
          break;
        }
        case 16: {
          type_ = (global::ReadType) input.ReadEnum();
          break;
        }
        case 24: {
          Index = input.ReadUInt32();
          break;
        }
        case 32: {
          SecondaryIndex = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SecureDeviceSettingsMessage : pb::IMessage<SecureDeviceSettingsMessage> {
  private static readonly pb::MessageParser<SecureDeviceSettingsMessage> _parser = new pb::MessageParser<SecureDeviceSettingsMessage>(() => new SecureDeviceSettingsMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SecureDeviceSettingsMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SecureDeviceSettingsMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SecureDeviceSettingsMessage(SecureDeviceSettingsMessage other) : this() {
    payload_ = other.payload_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SecureDeviceSettingsMessage Clone() {
    return new SecureDeviceSettingsMessage(this);
  }

  /// <summary>Field number for the "payload" field.</summary>
  public const int PayloadFieldNumber = 1;
  private string payload_ = "";
  /// <summary>
  /// Encrypted payload of a PB message.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Payload {
    get { return payload_; }
    set {
      payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SecureDeviceSettingsMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SecureDeviceSettingsMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Payload != other.Payload) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Payload.Length != 0) hash ^= Payload.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Payload.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Payload);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Payload.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Payload);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SecureDeviceSettingsMessage other) {
    if (other == null) {
      return;
    }
    if (other.Payload.Length != 0) {
      Payload = other.Payload;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Payload = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*********** DALI MESSAGES ***********
/// </summary>
public sealed partial class DTRPayloadMessage : pb::IMessage<DTRPayloadMessage> {
  private static readonly pb::MessageParser<DTRPayloadMessage> _parser = new pb::MessageParser<DTRPayloadMessage>(() => new DTRPayloadMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DTRPayloadMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DTRPayloadMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DTRPayloadMessage(DTRPayloadMessage other) : this() {
    dtr_ = other.dtr_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DTRPayloadMessage Clone() {
    return new DTRPayloadMessage(this);
  }

  /// <summary>Field number for the "dtr" field.</summary>
  public const int DtrFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_dtr_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> dtr_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// For DALI, you can use 2 bytes, for eDALI 3...
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Dtr {
    get { return dtr_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DTRPayloadMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DTRPayloadMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!dtr_.Equals(other.dtr_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= dtr_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    dtr_.WriteTo(output, _repeated_dtr_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += dtr_.CalculateSize(_repeated_dtr_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DTRPayloadMessage other) {
    if (other == null) {
      return;
    }
    dtr_.Add(other.dtr_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          dtr_.AddEntriesFrom(input, _repeated_dtr_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DALIMessage : pb::IMessage<DALIMessage> {
  private static readonly pb::MessageParser<DALIMessage> _parser = new pb::MessageParser<DALIMessage>(() => new DALIMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DALIMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIMessage(DALIMessage other) : this() {
    lineMask_ = other.lineMask_;
    address_ = other.address_;
    switch (other.ActionCase) {
      case ActionOneofCase.Frame25Bit:
        Frame25Bit = other.Frame25Bit;
        break;
      case ActionOneofCase.Frame25BitReply:
        Frame25BitReply = other.Frame25BitReply;
        break;
      case ActionOneofCase.Command:
        Command = other.Command;
        break;
      case ActionOneofCase.CustomCommand:
        CustomCommand = other.CustomCommand;
        break;
      case ActionOneofCase.Query:
        Query = other.Query;
        break;
      case ActionOneofCase.Type8:
        Type8 = other.Type8;
        break;
      case ActionOneofCase.Frame16Bit:
        Frame16Bit = other.Frame16Bit;
        break;
      case ActionOneofCase.Frame16BitReply:
        Frame16BitReply = other.Frame16BitReply;
        break;
      case ActionOneofCase.Frame24Bit:
        Frame24Bit = other.Frame24Bit;
        break;
      case ActionOneofCase.Frame24BitReply:
        Frame24BitReply = other.Frame24BitReply;
        break;
    }

    switch (other.ParamsCase) {
      case ParamsOneofCase.Arg:
        Arg = other.Arg;
        break;
      case ParamsOneofCase.Dtr:
        Dtr = other.Dtr.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIMessage Clone() {
    return new DALIMessage(this);
  }

  /// <summary>Field number for the "line_mask" field.</summary>
  public const int LineMaskFieldNumber = 1;
  private uint lineMask_;
  /// <summary>
  /// Binary mask; e.g. selecting line 1 out of 4 looks like 0b0001
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LineMask {
    get { return lineMask_; }
    set {
      lineMask_ = value;
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 2;
  private uint address_;
  /// <summary>
  /// DALI Address
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  /// <summary>Field number for the "frame_25_bit" field.</summary>
  public const int Frame25BitFieldNumber = 3;
  /// <summary>
  /// Older eDALI commmands are manufacturer specific, so we have to take a raw value.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Frame25Bit {
    get { return actionCase_ == ActionOneofCase.Frame25Bit ? (uint) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.Frame25Bit;
    }
  }

  /// <summary>Field number for the "frame_25_bit_reply" field.</summary>
  public const int Frame25BitReplyFieldNumber = 4;
  /// <summary>
  /// Older eDALI commands can have a reply.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Frame25BitReply {
    get { return actionCase_ == ActionOneofCase.Frame25BitReply ? (uint) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.Frame25BitReply;
    }
  }

  /// <summary>Field number for the "command" field.</summary>
  public const int CommandFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALICommandType Command {
    get { return actionCase_ == ActionOneofCase.Command ? (global::DALICommandType) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.Command;
    }
  }

  /// <summary>Field number for the "custom_command" field.</summary>
  public const int CustomCommandFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CustomDALICommandType CustomCommand {
    get { return actionCase_ == ActionOneofCase.CustomCommand ? (global::CustomDALICommandType) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.CustomCommand;
    }
  }

  /// <summary>Field number for the "query" field.</summary>
  public const int QueryFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIQueryType Query {
    get { return actionCase_ == ActionOneofCase.Query ? (global::DALIQueryType) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.Query;
    }
  }

  /// <summary>Field number for the "type8" field.</summary>
  public const int Type8FieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Type8CommandType Type8 {
    get { return actionCase_ == ActionOneofCase.Type8 ? (global::Type8CommandType) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.Type8;
    }
  }

  /// <summary>Field number for the "frame_16_bit" field.</summary>
  public const int Frame16BitFieldNumber = 11;
  /// <summary>
  /// Standard DALI Frame data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Frame16Bit {
    get { return actionCase_ == ActionOneofCase.Frame16Bit ? (uint) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.Frame16Bit;
    }
  }

  /// <summary>Field number for the "frame_16_bit_reply" field.</summary>
  public const int Frame16BitReplyFieldNumber = 12;
  /// <summary>
  /// Standard DALI Frame data with reply
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Frame16BitReply {
    get { return actionCase_ == ActionOneofCase.Frame16BitReply ? (uint) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.Frame16BitReply;
    }
  }

  /// <summary>Field number for the "frame_24_bit" field.</summary>
  public const int Frame24BitFieldNumber = 13;
  /// <summary>
  /// Standard 24 Bit DALI Frame data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Frame24Bit {
    get { return actionCase_ == ActionOneofCase.Frame24Bit ? (uint) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.Frame24Bit;
    }
  }

  /// <summary>Field number for the "frame_24_bit_reply" field.</summary>
  public const int Frame24BitReplyFieldNumber = 14;
  /// <summary>
  /// Standard 24 Bit DALI Frame data with reply
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Frame24BitReply {
    get { return actionCase_ == ActionOneofCase.Frame24BitReply ? (uint) action_ : 0; }
    set {
      action_ = value;
      actionCase_ = ActionOneofCase.Frame24BitReply;
    }
  }

  /// <summary>Field number for the "arg" field.</summary>
  public const int ArgFieldNumber = 9;
  /// <summary>
  /// 'arg' rather than level for methods where you need a scene number.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Arg {
    get { return paramsCase_ == ParamsOneofCase.Arg ? (uint) params_ : 0; }
    set {
      params_ = value;
      paramsCase_ = ParamsOneofCase.Arg;
    }
  }

  /// <summary>Field number for the "dtr" field.</summary>
  public const int DtrFieldNumber = 10;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DTRPayloadMessage Dtr {
    get { return paramsCase_ == ParamsOneofCase.Dtr ? (global::DTRPayloadMessage) params_ : null; }
    set {
      params_ = value;
      paramsCase_ = value == null ? ParamsOneofCase.None : ParamsOneofCase.Dtr;
    }
  }

  private object action_;
  /// <summary>Enum of possible cases for the "action" oneof.</summary>
  public enum ActionOneofCase {
    None = 0,
    Frame25Bit = 3,
    Frame25BitReply = 4,
    Command = 5,
    CustomCommand = 6,
    Query = 7,
    Type8 = 8,
    Frame16Bit = 11,
    Frame16BitReply = 12,
    Frame24Bit = 13,
    Frame24BitReply = 14,
  }
  private ActionOneofCase actionCase_ = ActionOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActionOneofCase ActionCase {
    get { return actionCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAction() {
    actionCase_ = ActionOneofCase.None;
    action_ = null;
  }

  private object params_;
  /// <summary>Enum of possible cases for the "params" oneof.</summary>
  public enum ParamsOneofCase {
    None = 0,
    Arg = 9,
    Dtr = 10,
  }
  private ParamsOneofCase paramsCase_ = ParamsOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ParamsOneofCase ParamsCase {
    get { return paramsCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearParams() {
    paramsCase_ = ParamsOneofCase.None;
    params_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DALIMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DALIMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LineMask != other.LineMask) return false;
    if (Address != other.Address) return false;
    if (Frame25Bit != other.Frame25Bit) return false;
    if (Frame25BitReply != other.Frame25BitReply) return false;
    if (Command != other.Command) return false;
    if (CustomCommand != other.CustomCommand) return false;
    if (Query != other.Query) return false;
    if (Type8 != other.Type8) return false;
    if (Frame16Bit != other.Frame16Bit) return false;
    if (Frame16BitReply != other.Frame16BitReply) return false;
    if (Frame24Bit != other.Frame24Bit) return false;
    if (Frame24BitReply != other.Frame24BitReply) return false;
    if (Arg != other.Arg) return false;
    if (!object.Equals(Dtr, other.Dtr)) return false;
    if (ActionCase != other.ActionCase) return false;
    if (ParamsCase != other.ParamsCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LineMask != 0) hash ^= LineMask.GetHashCode();
    if (Address != 0) hash ^= Address.GetHashCode();
    if (actionCase_ == ActionOneofCase.Frame25Bit) hash ^= Frame25Bit.GetHashCode();
    if (actionCase_ == ActionOneofCase.Frame25BitReply) hash ^= Frame25BitReply.GetHashCode();
    if (actionCase_ == ActionOneofCase.Command) hash ^= Command.GetHashCode();
    if (actionCase_ == ActionOneofCase.CustomCommand) hash ^= CustomCommand.GetHashCode();
    if (actionCase_ == ActionOneofCase.Query) hash ^= Query.GetHashCode();
    if (actionCase_ == ActionOneofCase.Type8) hash ^= Type8.GetHashCode();
    if (actionCase_ == ActionOneofCase.Frame16Bit) hash ^= Frame16Bit.GetHashCode();
    if (actionCase_ == ActionOneofCase.Frame16BitReply) hash ^= Frame16BitReply.GetHashCode();
    if (actionCase_ == ActionOneofCase.Frame24Bit) hash ^= Frame24Bit.GetHashCode();
    if (actionCase_ == ActionOneofCase.Frame24BitReply) hash ^= Frame24BitReply.GetHashCode();
    if (paramsCase_ == ParamsOneofCase.Arg) hash ^= Arg.GetHashCode();
    if (paramsCase_ == ParamsOneofCase.Dtr) hash ^= Dtr.GetHashCode();
    hash ^= (int) actionCase_;
    hash ^= (int) paramsCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LineMask != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(LineMask);
    }
    if (Address != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Address);
    }
    if (actionCase_ == ActionOneofCase.Frame25Bit) {
      output.WriteRawTag(24);
      output.WriteUInt32(Frame25Bit);
    }
    if (actionCase_ == ActionOneofCase.Frame25BitReply) {
      output.WriteRawTag(32);
      output.WriteUInt32(Frame25BitReply);
    }
    if (actionCase_ == ActionOneofCase.Command) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Command);
    }
    if (actionCase_ == ActionOneofCase.CustomCommand) {
      output.WriteRawTag(48);
      output.WriteEnum((int) CustomCommand);
    }
    if (actionCase_ == ActionOneofCase.Query) {
      output.WriteRawTag(56);
      output.WriteEnum((int) Query);
    }
    if (actionCase_ == ActionOneofCase.Type8) {
      output.WriteRawTag(64);
      output.WriteEnum((int) Type8);
    }
    if (paramsCase_ == ParamsOneofCase.Arg) {
      output.WriteRawTag(72);
      output.WriteUInt32(Arg);
    }
    if (paramsCase_ == ParamsOneofCase.Dtr) {
      output.WriteRawTag(82);
      output.WriteMessage(Dtr);
    }
    if (actionCase_ == ActionOneofCase.Frame16Bit) {
      output.WriteRawTag(88);
      output.WriteUInt32(Frame16Bit);
    }
    if (actionCase_ == ActionOneofCase.Frame16BitReply) {
      output.WriteRawTag(96);
      output.WriteUInt32(Frame16BitReply);
    }
    if (actionCase_ == ActionOneofCase.Frame24Bit) {
      output.WriteRawTag(104);
      output.WriteUInt32(Frame24Bit);
    }
    if (actionCase_ == ActionOneofCase.Frame24BitReply) {
      output.WriteRawTag(112);
      output.WriteUInt32(Frame24BitReply);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LineMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineMask);
    }
    if (Address != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Address);
    }
    if (actionCase_ == ActionOneofCase.Frame25Bit) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame25Bit);
    }
    if (actionCase_ == ActionOneofCase.Frame25BitReply) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame25BitReply);
    }
    if (actionCase_ == ActionOneofCase.Command) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
    }
    if (actionCase_ == ActionOneofCase.CustomCommand) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CustomCommand);
    }
    if (actionCase_ == ActionOneofCase.Query) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Query);
    }
    if (actionCase_ == ActionOneofCase.Type8) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type8);
    }
    if (actionCase_ == ActionOneofCase.Frame16Bit) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame16Bit);
    }
    if (actionCase_ == ActionOneofCase.Frame16BitReply) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame16BitReply);
    }
    if (actionCase_ == ActionOneofCase.Frame24Bit) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame24Bit);
    }
    if (actionCase_ == ActionOneofCase.Frame24BitReply) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame24BitReply);
    }
    if (paramsCase_ == ParamsOneofCase.Arg) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Arg);
    }
    if (paramsCase_ == ParamsOneofCase.Dtr) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dtr);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DALIMessage other) {
    if (other == null) {
      return;
    }
    if (other.LineMask != 0) {
      LineMask = other.LineMask;
    }
    if (other.Address != 0) {
      Address = other.Address;
    }
    switch (other.ActionCase) {
      case ActionOneofCase.Frame25Bit:
        Frame25Bit = other.Frame25Bit;
        break;
      case ActionOneofCase.Frame25BitReply:
        Frame25BitReply = other.Frame25BitReply;
        break;
      case ActionOneofCase.Command:
        Command = other.Command;
        break;
      case ActionOneofCase.CustomCommand:
        CustomCommand = other.CustomCommand;
        break;
      case ActionOneofCase.Query:
        Query = other.Query;
        break;
      case ActionOneofCase.Type8:
        Type8 = other.Type8;
        break;
      case ActionOneofCase.Frame16Bit:
        Frame16Bit = other.Frame16Bit;
        break;
      case ActionOneofCase.Frame16BitReply:
        Frame16BitReply = other.Frame16BitReply;
        break;
      case ActionOneofCase.Frame24Bit:
        Frame24Bit = other.Frame24Bit;
        break;
      case ActionOneofCase.Frame24BitReply:
        Frame24BitReply = other.Frame24BitReply;
        break;
    }

    switch (other.ParamsCase) {
      case ParamsOneofCase.Arg:
        Arg = other.Arg;
        break;
      case ParamsOneofCase.Dtr:
        if (Dtr == null) {
          Dtr = new global::DTRPayloadMessage();
        }
        Dtr.MergeFrom(other.Dtr);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LineMask = input.ReadUInt32();
          break;
        }
        case 16: {
          Address = input.ReadUInt32();
          break;
        }
        case 24: {
          Frame25Bit = input.ReadUInt32();
          break;
        }
        case 32: {
          Frame25BitReply = input.ReadUInt32();
          break;
        }
        case 40: {
          action_ = input.ReadEnum();
          actionCase_ = ActionOneofCase.Command;
          break;
        }
        case 48: {
          action_ = input.ReadEnum();
          actionCase_ = ActionOneofCase.CustomCommand;
          break;
        }
        case 56: {
          action_ = input.ReadEnum();
          actionCase_ = ActionOneofCase.Query;
          break;
        }
        case 64: {
          action_ = input.ReadEnum();
          actionCase_ = ActionOneofCase.Type8;
          break;
        }
        case 72: {
          Arg = input.ReadUInt32();
          break;
        }
        case 82: {
          global::DTRPayloadMessage subBuilder = new global::DTRPayloadMessage();
          if (paramsCase_ == ParamsOneofCase.Dtr) {
            subBuilder.MergeFrom(Dtr);
          }
          input.ReadMessage(subBuilder);
          Dtr = subBuilder;
          break;
        }
        case 88: {
          Frame16Bit = input.ReadUInt32();
          break;
        }
        case 96: {
          Frame16BitReply = input.ReadUInt32();
          break;
        }
        case 104: {
          Frame24Bit = input.ReadUInt32();
          break;
        }
        case 112: {
          Frame24BitReply = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DALIStatusFlagMessage : pb::IMessage<DALIStatusFlagMessage> {
  private static readonly pb::MessageParser<DALIStatusFlagMessage> _parser = new pb::MessageParser<DALIStatusFlagMessage>(() => new DALIStatusFlagMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DALIStatusFlagMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIStatusFlagMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIStatusFlagMessage(DALIStatusFlagMessage other) : this() {
    flags_ = other.flags_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIStatusFlagMessage Clone() {
    return new DALIStatusFlagMessage(this);
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DALIStatusType> _repeated_flags_codec
      = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::DALIStatusType) x);
  private readonly pbc::RepeatedField<global::DALIStatusType> flags_ = new pbc::RepeatedField<global::DALIStatusType>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DALIStatusType> Flags {
    get { return flags_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DALIStatusFlagMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DALIStatusFlagMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!flags_.Equals(other.flags_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= flags_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    flags_.WriteTo(output, _repeated_flags_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += flags_.CalculateSize(_repeated_flags_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DALIStatusFlagMessage other) {
    if (other == null) {
      return;
    }
    flags_.Add(other.flags_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          flags_.AddEntriesFrom(input, _repeated_flags_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// DALI Response is tagged with the line and DALI address. 
/// </summary>
public sealed partial class DALIQueryResponse : pb::IMessage<DALIQueryResponse> {
  private static readonly pb::MessageParser<DALIQueryResponse> _parser = new pb::MessageParser<DALIQueryResponse>(() => new DALIQueryResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DALIQueryResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIQueryResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIQueryResponse(DALIQueryResponse other) : this() {
    daliFlag_ = other.daliFlag_;
    reponseData_ = other.reponseData_ != null ? other.reponseData_.Clone() : null;
    switch (other.PayloadCase) {
      case PayloadOneofCase.StatusFlags:
        StatusFlags = other.StatusFlags.Clone();
        break;
      case PayloadOneofCase.Data:
        Data = other.Data.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIQueryResponse Clone() {
    return new DALIQueryResponse(this);
  }

  /// <summary>Field number for the "status_flags" field.</summary>
  public const int StatusFlagsFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIStatusFlagMessage StatusFlags {
    get { return payloadCase_ == PayloadOneofCase.StatusFlags ? (global::DALIStatusFlagMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.StatusFlags;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PayloadMessage Data {
    get { return payloadCase_ == PayloadOneofCase.Data ? (global::PayloadMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Data;
    }
  }

  /// <summary>Field number for the "dali_flag" field.</summary>
  public const int DaliFlagFieldNumber = 3;
  private global::DALIRXStatusFlag daliFlag_ = 0;
  /// <summary>
  /// New Query Method
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIRXStatusFlag DaliFlag {
    get { return daliFlag_; }
    set {
      daliFlag_ = value;
    }
  }

  /// <summary>Field number for the "reponse_data" field.</summary>
  public const int ReponseDataFieldNumber = 4;
  private global::PayloadMessage reponseData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PayloadMessage ReponseData {
    get { return reponseData_; }
    set {
      reponseData_ = value;
    }
  }

  private object payload_;
  /// <summary>Enum of possible cases for the "payload" oneof.</summary>
  public enum PayloadOneofCase {
    None = 0,
    StatusFlags = 1,
    Data = 2,
  }
  private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadOneofCase PayloadCase {
    get { return payloadCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payloadCase_ = PayloadOneofCase.None;
    payload_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DALIQueryResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DALIQueryResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(StatusFlags, other.StatusFlags)) return false;
    if (!object.Equals(Data, other.Data)) return false;
    if (DaliFlag != other.DaliFlag) return false;
    if (!object.Equals(ReponseData, other.ReponseData)) return false;
    if (PayloadCase != other.PayloadCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (payloadCase_ == PayloadOneofCase.StatusFlags) hash ^= StatusFlags.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Data) hash ^= Data.GetHashCode();
    if (DaliFlag != 0) hash ^= DaliFlag.GetHashCode();
    if (reponseData_ != null) hash ^= ReponseData.GetHashCode();
    hash ^= (int) payloadCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (payloadCase_ == PayloadOneofCase.StatusFlags) {
      output.WriteRawTag(10);
      output.WriteMessage(StatusFlags);
    }
    if (payloadCase_ == PayloadOneofCase.Data) {
      output.WriteRawTag(18);
      output.WriteMessage(Data);
    }
    if (DaliFlag != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) DaliFlag);
    }
    if (reponseData_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ReponseData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (payloadCase_ == PayloadOneofCase.StatusFlags) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusFlags);
    }
    if (payloadCase_ == PayloadOneofCase.Data) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
    }
    if (DaliFlag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DaliFlag);
    }
    if (reponseData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReponseData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DALIQueryResponse other) {
    if (other == null) {
      return;
    }
    if (other.DaliFlag != 0) {
      DaliFlag = other.DaliFlag;
    }
    if (other.reponseData_ != null) {
      if (reponseData_ == null) {
        reponseData_ = new global::PayloadMessage();
      }
      ReponseData.MergeFrom(other.ReponseData);
    }
    switch (other.PayloadCase) {
      case PayloadOneofCase.StatusFlags:
        if (StatusFlags == null) {
          StatusFlags = new global::DALIStatusFlagMessage();
        }
        StatusFlags.MergeFrom(other.StatusFlags);
        break;
      case PayloadOneofCase.Data:
        if (Data == null) {
          Data = new global::PayloadMessage();
        }
        Data.MergeFrom(other.Data);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::DALIStatusFlagMessage subBuilder = new global::DALIStatusFlagMessage();
          if (payloadCase_ == PayloadOneofCase.StatusFlags) {
            subBuilder.MergeFrom(StatusFlags);
          }
          input.ReadMessage(subBuilder);
          StatusFlags = subBuilder;
          break;
        }
        case 18: {
          global::PayloadMessage subBuilder = new global::PayloadMessage();
          if (payloadCase_ == PayloadOneofCase.Data) {
            subBuilder.MergeFrom(Data);
          }
          input.ReadMessage(subBuilder);
          Data = subBuilder;
          break;
        }
        case 24: {
          daliFlag_ = (global::DALIRXStatusFlag) input.ReadEnum();
          break;
        }
        case 34: {
          if (reponseData_ == null) {
            reponseData_ = new global::PayloadMessage();
          }
          input.ReadMessage(reponseData_);
          break;
        }
      }
    }
  }

}

public sealed partial class DALIAddressingMessage : pb::IMessage<DALIAddressingMessage> {
  private static readonly pb::MessageParser<DALIAddressingMessage> _parser = new pb::MessageParser<DALIAddressingMessage>(() => new DALIAddressingMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DALIAddressingMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIAddressingMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIAddressingMessage(DALIAddressingMessage other) : this() {
    type_ = other.type_;
    initialisation_ = other.initialisation_;
    lineMask_ = other.lineMask_;
    is24Bit_ = other.is24Bit_;
    error_ = other.error_;
    index_ = other.index_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIAddressingMessage Clone() {
    return new DALIAddressingMessage(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::DALIAddressingType type_ = 0;
  /// <summary>
  /// New or All       
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIAddressingType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "initialisation" field.</summary>
  public const int InitialisationFieldNumber = 2;
  private bool initialisation_;
  /// <summary>
  /// First Address (TRUE) or Next Address (FALSE)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Initialisation {
    get { return initialisation_; }
    set {
      initialisation_ = value;
    }
  }

  /// <summary>Field number for the "line_mask" field.</summary>
  public const int LineMaskFieldNumber = 3;
  private uint lineMask_;
  /// <summary>
  /// Line to Address - Must be singular
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LineMask {
    get { return lineMask_; }
    set {
      lineMask_ = value;
    }
  }

  /// <summary>Field number for the "is24Bit" field.</summary>
  public const int Is24BitFieldNumber = 4;
  private bool is24Bit_;
  /// <summary>
  /// 24 Bit DALI (TRUE) or Standard (FALSE)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Is24Bit {
    get { return is24Bit_; }
    set {
      is24Bit_ = value;
    }
  }

  /// <summary>Field number for the "error" field.</summary>
  public const int ErrorFieldNumber = 5;
  private global::DALIAddressingError error_ = 0;
  /// <summary>
  /// Response -> Error while Addressing
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIAddressingError Error {
    get { return error_; }
    set {
      error_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 6;
  private uint index_;
  /// <summary>
  /// Response -> Index of Set Address
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DALIAddressingMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DALIAddressingMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Initialisation != other.Initialisation) return false;
    if (LineMask != other.LineMask) return false;
    if (Is24Bit != other.Is24Bit) return false;
    if (Error != other.Error) return false;
    if (Index != other.Index) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Initialisation != false) hash ^= Initialisation.GetHashCode();
    if (LineMask != 0) hash ^= LineMask.GetHashCode();
    if (Is24Bit != false) hash ^= Is24Bit.GetHashCode();
    if (Error != 0) hash ^= Error.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Initialisation != false) {
      output.WriteRawTag(16);
      output.WriteBool(Initialisation);
    }
    if (LineMask != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(LineMask);
    }
    if (Is24Bit != false) {
      output.WriteRawTag(32);
      output.WriteBool(Is24Bit);
    }
    if (Error != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Error);
    }
    if (Index != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Index);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Initialisation != false) {
      size += 1 + 1;
    }
    if (LineMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineMask);
    }
    if (Is24Bit != false) {
      size += 1 + 1;
    }
    if (Error != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DALIAddressingMessage other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Initialisation != false) {
      Initialisation = other.Initialisation;
    }
    if (other.LineMask != 0) {
      LineMask = other.LineMask;
    }
    if (other.Is24Bit != false) {
      Is24Bit = other.Is24Bit;
    }
    if (other.Error != 0) {
      Error = other.Error;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::DALIAddressingType) input.ReadEnum();
          break;
        }
        case 16: {
          Initialisation = input.ReadBool();
          break;
        }
        case 24: {
          LineMask = input.ReadUInt32();
          break;
        }
        case 32: {
          Is24Bit = input.ReadBool();
          break;
        }
        case 40: {
          error_ = (global::DALIAddressingError) input.ReadEnum();
          break;
        }
        case 48: {
          Index = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DALIRemappingMessage : pb::IMessage<DALIRemappingMessage> {
  private static readonly pb::MessageParser<DALIRemappingMessage> _parser = new pb::MessageParser<DALIRemappingMessage>(() => new DALIRemappingMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DALIRemappingMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIRemappingMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIRemappingMessage(DALIRemappingMessage other) : this() {
    fromAddress_ = other.fromAddress_;
    toAddress_ = other.toAddress_;
    lineMask_ = other.lineMask_;
    is24Bit_ = other.is24Bit_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DALIRemappingMessage Clone() {
    return new DALIRemappingMessage(this);
  }

  /// <summary>Field number for the "from_address" field.</summary>
  public const int FromAddressFieldNumber = 1;
  private uint fromAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FromAddress {
    get { return fromAddress_; }
    set {
      fromAddress_ = value;
    }
  }

  /// <summary>Field number for the "to_address" field.</summary>
  public const int ToAddressFieldNumber = 2;
  private uint toAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ToAddress {
    get { return toAddress_; }
    set {
      toAddress_ = value;
    }
  }

  /// <summary>Field number for the "line_mask" field.</summary>
  public const int LineMaskFieldNumber = 3;
  private uint lineMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LineMask {
    get { return lineMask_; }
    set {
      lineMask_ = value;
    }
  }

  /// <summary>Field number for the "is24Bit" field.</summary>
  public const int Is24BitFieldNumber = 4;
  private bool is24Bit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Is24Bit {
    get { return is24Bit_; }
    set {
      is24Bit_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DALIRemappingMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DALIRemappingMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FromAddress != other.FromAddress) return false;
    if (ToAddress != other.ToAddress) return false;
    if (LineMask != other.LineMask) return false;
    if (Is24Bit != other.Is24Bit) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FromAddress != 0) hash ^= FromAddress.GetHashCode();
    if (ToAddress != 0) hash ^= ToAddress.GetHashCode();
    if (LineMask != 0) hash ^= LineMask.GetHashCode();
    if (Is24Bit != false) hash ^= Is24Bit.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FromAddress != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(FromAddress);
    }
    if (ToAddress != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ToAddress);
    }
    if (LineMask != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(LineMask);
    }
    if (Is24Bit != false) {
      output.WriteRawTag(32);
      output.WriteBool(Is24Bit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FromAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromAddress);
    }
    if (ToAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToAddress);
    }
    if (LineMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineMask);
    }
    if (Is24Bit != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DALIRemappingMessage other) {
    if (other == null) {
      return;
    }
    if (other.FromAddress != 0) {
      FromAddress = other.FromAddress;
    }
    if (other.ToAddress != 0) {
      ToAddress = other.ToAddress;
    }
    if (other.LineMask != 0) {
      LineMask = other.LineMask;
    }
    if (other.Is24Bit != false) {
      Is24Bit = other.Is24Bit;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FromAddress = input.ReadUInt32();
          break;
        }
        case 16: {
          ToAddress = input.ReadUInt32();
          break;
        }
        case 24: {
          LineMask = input.ReadUInt32();
          break;
        }
        case 32: {
          Is24Bit = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///************ DMX MESSAGES ************
/// </summary>
public sealed partial class DMXMessage : pb::IMessage<DMXMessage> {
  private static readonly pb::MessageParser<DMXMessage> _parser = new pb::MessageParser<DMXMessage>(() => new DMXMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DMXMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DMXMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DMXMessage(DMXMessage other) : this() {
    zone_ = other.zone_;
    universeMask_ = other.universeMask_;
    channel_ = other.channel_;
    repeat_ = other.repeat_;
    level_ = other.level_.Clone();
    fadeTimeBy10Ms_ = other.fadeTimeBy10Ms_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DMXMessage Clone() {
    return new DMXMessage(this);
  }

  /// <summary>Field number for the "zone" field.</summary>
  public const int ZoneFieldNumber = 1;
  private uint zone_;
  /// <summary>
  /// For Spektra (default of 0 is fine if not applicable)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Zone {
    get { return zone_; }
    set {
      zone_ = value;
    }
  }

  /// <summary>Field number for the "universe_mask" field.</summary>
  public const int UniverseMaskFieldNumber = 2;
  private uint universeMask_;
  /// <summary>
  /// Which DMX Universes to apply the values to. Specified as a binary mask.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UniverseMask {
    get { return universeMask_; }
    set {
      universeMask_ = value;
    }
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 3;
  private uint channel_;
  /// <summary>
  /// The actual channel number (not zero-based index)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  /// <summary>Field number for the "repeat" field.</summary>
  public const int RepeatFieldNumber = 4;
  private uint repeat_;
  /// <summary>
  /// The number of times to repeat the data given (e.g. start from DMX channel 30 and set the RGB channel values (levels) of the next 3 lights, so repeat would be 3 with 3 levels provided)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Repeat {
    get { return repeat_; }
    set {
      repeat_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 5;
  private static readonly pb::FieldCodec<uint> _repeated_level_codec
      = pb::FieldCodec.ForUInt32(42);
  private readonly pbc::RepeatedField<uint> level_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Level {
    get { return level_; }
  }

  /// <summary>Field number for the "fade_time_by_10ms" field.</summary>
  public const int FadeTimeBy10MsFieldNumber = 6;
  private uint fadeTimeBy10Ms_;
  /// <summary>
  /// The DMX Fade Task runs every 10ms, so a value of 25 will fade over 250ms
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FadeTimeBy10Ms {
    get { return fadeTimeBy10Ms_; }
    set {
      fadeTimeBy10Ms_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DMXMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DMXMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Zone != other.Zone) return false;
    if (UniverseMask != other.UniverseMask) return false;
    if (Channel != other.Channel) return false;
    if (Repeat != other.Repeat) return false;
    if(!level_.Equals(other.level_)) return false;
    if (FadeTimeBy10Ms != other.FadeTimeBy10Ms) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Zone != 0) hash ^= Zone.GetHashCode();
    if (UniverseMask != 0) hash ^= UniverseMask.GetHashCode();
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (Repeat != 0) hash ^= Repeat.GetHashCode();
    hash ^= level_.GetHashCode();
    if (FadeTimeBy10Ms != 0) hash ^= FadeTimeBy10Ms.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Zone != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Zone);
    }
    if (UniverseMask != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(UniverseMask);
    }
    if (Channel != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Channel);
    }
    if (Repeat != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Repeat);
    }
    level_.WriteTo(output, _repeated_level_codec);
    if (FadeTimeBy10Ms != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(FadeTimeBy10Ms);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Zone != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Zone);
    }
    if (UniverseMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UniverseMask);
    }
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
    }
    if (Repeat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Repeat);
    }
    size += level_.CalculateSize(_repeated_level_codec);
    if (FadeTimeBy10Ms != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FadeTimeBy10Ms);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DMXMessage other) {
    if (other == null) {
      return;
    }
    if (other.Zone != 0) {
      Zone = other.Zone;
    }
    if (other.UniverseMask != 0) {
      UniverseMask = other.UniverseMask;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    if (other.Repeat != 0) {
      Repeat = other.Repeat;
    }
    level_.Add(other.level_);
    if (other.FadeTimeBy10Ms != 0) {
      FadeTimeBy10Ms = other.FadeTimeBy10Ms;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Zone = input.ReadUInt32();
          break;
        }
        case 16: {
          UniverseMask = input.ReadUInt32();
          break;
        }
        case 24: {
          Channel = input.ReadUInt32();
          break;
        }
        case 32: {
          Repeat = input.ReadUInt32();
          break;
        }
        case 42:
        case 40: {
          level_.AddEntriesFrom(input, _repeated_level_codec);
          break;
        }
        case 48: {
          FadeTimeBy10Ms = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Message to send a DMX command with/without a response (Getset)
/// </summary>
public sealed partial class RDMMessage : pb::IMessage<RDMMessage> {
  private static readonly pb::MessageParser<RDMMessage> _parser = new pb::MessageParser<RDMMessage>(() => new RDMMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RDMMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RDMMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RDMMessage(RDMMessage other) : this() {
    universeMask_ = other.universeMask_;
    uid_ = other.uid_;
    pid_ = other.pid_;
    getset_ = other.getset_;
    datalength_ = other.datalength_;
    data_ = other.data_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RDMMessage Clone() {
    return new RDMMessage(this);
  }

  /// <summary>Field number for the "universe_mask" field.</summary>
  public const int UniverseMaskFieldNumber = 1;
  private uint universeMask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UniverseMask {
    get { return universeMask_; }
    set {
      universeMask_ = value;
    }
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 2;
  private ulong uid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Uid {
    get { return uid_; }
    set {
      uid_ = value;
    }
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 3;
  private uint pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "getset" field.</summary>
  public const int GetsetFieldNumber = 4;
  private uint getset_;
  /// <summary>
  /// Expects [DMX_RDM_GET_COMMAND = 0x20] or [DMX_RDM_SET_COMMAND = 0x30]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Getset {
    get { return getset_; }
    set {
      getset_ = value;
    }
  }

  /// <summary>Field number for the "datalength" field.</summary>
  public const int DatalengthFieldNumber = 5;
  private uint datalength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Datalength {
    get { return datalength_; }
    set {
      datalength_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 6;
  private static readonly pb::FieldCodec<uint> _repeated_data_codec
      = pb::FieldCodec.ForUInt32(50);
  private readonly pbc::RepeatedField<uint> data_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RDMMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RDMMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UniverseMask != other.UniverseMask) return false;
    if (Uid != other.Uid) return false;
    if (Pid != other.Pid) return false;
    if (Getset != other.Getset) return false;
    if (Datalength != other.Datalength) return false;
    if(!data_.Equals(other.data_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UniverseMask != 0) hash ^= UniverseMask.GetHashCode();
    if (Uid != 0UL) hash ^= Uid.GetHashCode();
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Getset != 0) hash ^= Getset.GetHashCode();
    if (Datalength != 0) hash ^= Datalength.GetHashCode();
    hash ^= data_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UniverseMask != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UniverseMask);
    }
    if (Uid != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Uid);
    }
    if (Pid != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Pid);
    }
    if (Getset != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Getset);
    }
    if (Datalength != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Datalength);
    }
    data_.WriteTo(output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UniverseMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UniverseMask);
    }
    if (Uid != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
    }
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
    }
    if (Getset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Getset);
    }
    if (Datalength != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Datalength);
    }
    size += data_.CalculateSize(_repeated_data_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RDMMessage other) {
    if (other == null) {
      return;
    }
    if (other.UniverseMask != 0) {
      UniverseMask = other.UniverseMask;
    }
    if (other.Uid != 0UL) {
      Uid = other.Uid;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Getset != 0) {
      Getset = other.Getset;
    }
    if (other.Datalength != 0) {
      Datalength = other.Datalength;
    }
    data_.Add(other.data_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UniverseMask = input.ReadUInt32();
          break;
        }
        case 16: {
          Uid = input.ReadUInt64();
          break;
        }
        case 24: {
          Pid = input.ReadUInt32();
          break;
        }
        case 32: {
          Getset = input.ReadUInt32();
          break;
        }
        case 40: {
          Datalength = input.ReadUInt32();
          break;
        }
        case 50:
        case 48: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// RDM Response message - source uid, pid, datalength and data
/// </summary>
public sealed partial class RDMResponseMessage : pb::IMessage<RDMResponseMessage> {
  private static readonly pb::MessageParser<RDMResponseMessage> _parser = new pb::MessageParser<RDMResponseMessage>(() => new RDMResponseMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RDMResponseMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RDMResponseMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RDMResponseMessage(RDMResponseMessage other) : this() {
    uid_ = other.uid_;
    pid_ = other.pid_;
    datalength_ = other.datalength_;
    data_ = other.data_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RDMResponseMessage Clone() {
    return new RDMResponseMessage(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private ulong uid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Uid {
    get { return uid_; }
    set {
      uid_ = value;
    }
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 2;
  private uint pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "datalength" field.</summary>
  public const int DatalengthFieldNumber = 3;
  private uint datalength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Datalength {
    get { return datalength_; }
    set {
      datalength_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_data_codec
      = pb::FieldCodec.ForUInt32(34);
  private readonly pbc::RepeatedField<uint> data_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RDMResponseMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RDMResponseMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (Pid != other.Pid) return false;
    if (Datalength != other.Datalength) return false;
    if(!data_.Equals(other.data_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid != 0UL) hash ^= Uid.GetHashCode();
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Datalength != 0) hash ^= Datalength.GetHashCode();
    hash ^= data_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Uid);
    }
    if (Pid != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Pid);
    }
    if (Datalength != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Datalength);
    }
    data_.WriteTo(output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
    }
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
    }
    if (Datalength != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Datalength);
    }
    size += data_.CalculateSize(_repeated_data_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RDMResponseMessage other) {
    if (other == null) {
      return;
    }
    if (other.Uid != 0UL) {
      Uid = other.Uid;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Datalength != 0) {
      Datalength = other.Datalength;
    }
    data_.Add(other.data_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Uid = input.ReadUInt64();
          break;
        }
        case 16: {
          Pid = input.ReadUInt32();
          break;
        }
        case 24: {
          Datalength = input.ReadUInt32();
          break;
        }
        case 34:
        case 32: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///***********   SPEKTRA    ************
/// </summary>
public sealed partial class SpektraSettingMessage : pb::IMessage<SpektraSettingMessage> {
  private static readonly pb::MessageParser<SpektraSettingMessage> _parser = new pb::MessageParser<SpektraSettingMessage>(() => new SpektraSettingMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SpektraSettingMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraSettingMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraSettingMessage(SpektraSettingMessage other) : this() {
    zone_ = other.zone_;
    startAddress_ = other.startAddress_;
    lineOrUniverseMask_ = other.lineOrUniverseMask_;
    protocol_ = other.protocol_;
    numberOfLights_ = other.numberOfLights_;
    channelsPerLight_ = other.channelsPerLight_;
    channelColours_ = other.channelColours_.Clone();
    unscheduledBehaviour_ = other.unscheduledBehaviour_;
    channelMapping_ = other.channelMapping_.Clone();
    lineAddressing_ = other.lineAddressing_;
    zoneScaleFactor_ = other.zoneScaleFactor_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraSettingMessage Clone() {
    return new SpektraSettingMessage(this);
  }

  /// <summary>Field number for the "zone" field.</summary>
  public const int ZoneFieldNumber = 1;
  private uint zone_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Zone {
    get { return zone_; }
    set {
      zone_ = value;
    }
  }

  /// <summary>Field number for the "start_address" field.</summary>
  public const int StartAddressFieldNumber = 2;
  private uint startAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint StartAddress {
    get { return startAddress_; }
    set {
      startAddress_ = value;
    }
  }

  /// <summary>Field number for the "line_or_universe_mask" field.</summary>
  public const int LineOrUniverseMaskFieldNumber = 3;
  private uint lineOrUniverseMask_;
  /// <summary>
  /// Which DALI Line(s) or DMX Universe(s) to control
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LineOrUniverseMask {
    get { return lineOrUniverseMask_; }
    set {
      lineOrUniverseMask_ = value;
    }
  }

  /// <summary>Field number for the "protocol" field.</summary>
  public const int ProtocolFieldNumber = 4;
  private uint protocol_;
  /// <summary>
  /// E.g. DMX or DALI
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Protocol {
    get { return protocol_; }
    set {
      protocol_ = value;
    }
  }

  /// <summary>Field number for the "number_of_lights" field.</summary>
  public const int NumberOfLightsFieldNumber = 5;
  private uint numberOfLights_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint NumberOfLights {
    get { return numberOfLights_; }
    set {
      numberOfLights_ = value;
    }
  }

  /// <summary>Field number for the "channels_per_light" field.</summary>
  public const int ChannelsPerLightFieldNumber = 6;
  private uint channelsPerLight_;
  /// <summary>
  /// E.g. 4 for RGBW
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChannelsPerLight {
    get { return channelsPerLight_; }
    set {
      channelsPerLight_ = value;
    }
  }

  /// <summary>Field number for the "channel_colours" field.</summary>
  public const int ChannelColoursFieldNumber = 7;
  private static readonly pb::FieldCodec<uint> _repeated_channelColours_codec
      = pb::FieldCodec.ForUInt32(58);
  private readonly pbc::RepeatedField<uint> channelColours_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// What colour is assigned to each channel (e.g. Red, Green, etc.)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ChannelColours {
    get { return channelColours_; }
  }

  /// <summary>Field number for the "unscheduled_behaviour" field.</summary>
  public const int UnscheduledBehaviourFieldNumber = 8;
  private global::SpektraUnscheduledBehaviourType unscheduledBehaviour_ = 0;
  /// <summary>
  /// 0 = Random colours rotate sequence, 1 = Run default sequence (seq 1)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraUnscheduledBehaviourType UnscheduledBehaviour {
    get { return unscheduledBehaviour_; }
    set {
      unscheduledBehaviour_ = value;
    }
  }

  /// <summary>Field number for the "channel_mapping" field.</summary>
  public const int ChannelMappingFieldNumber = 9;
  private static readonly pb::FieldCodec<uint> _repeated_channelMapping_codec
      = pb::FieldCodec.ForUInt32(74);
  private readonly pbc::RepeatedField<uint> channelMapping_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Channel mapping for DALI or future DMX virtual 'grouping'
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ChannelMapping {
    get { return channelMapping_; }
  }

  /// <summary>Field number for the "line_addressing" field.</summary>
  public const int LineAddressingFieldNumber = 10;
  private global::LineAddressingType lineAddressing_ = 0;
  /// <summary>
  /// Independent or Consecutive
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LineAddressingType LineAddressing {
    get { return lineAddressing_; }
    set {
      lineAddressing_ = value;
    }
  }

  /// <summary>Field number for the "zone_scale_factor" field.</summary>
  public const int ZoneScaleFactorFieldNumber = 11;
  private float zoneScaleFactor_;
  /// <summary>
  /// Zone Scale Factor - Float 0 to 1.0f
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ZoneScaleFactor {
    get { return zoneScaleFactor_; }
    set {
      zoneScaleFactor_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SpektraSettingMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SpektraSettingMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Zone != other.Zone) return false;
    if (StartAddress != other.StartAddress) return false;
    if (LineOrUniverseMask != other.LineOrUniverseMask) return false;
    if (Protocol != other.Protocol) return false;
    if (NumberOfLights != other.NumberOfLights) return false;
    if (ChannelsPerLight != other.ChannelsPerLight) return false;
    if(!channelColours_.Equals(other.channelColours_)) return false;
    if (UnscheduledBehaviour != other.UnscheduledBehaviour) return false;
    if(!channelMapping_.Equals(other.channelMapping_)) return false;
    if (LineAddressing != other.LineAddressing) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZoneScaleFactor, other.ZoneScaleFactor)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Zone != 0) hash ^= Zone.GetHashCode();
    if (StartAddress != 0) hash ^= StartAddress.GetHashCode();
    if (LineOrUniverseMask != 0) hash ^= LineOrUniverseMask.GetHashCode();
    if (Protocol != 0) hash ^= Protocol.GetHashCode();
    if (NumberOfLights != 0) hash ^= NumberOfLights.GetHashCode();
    if (ChannelsPerLight != 0) hash ^= ChannelsPerLight.GetHashCode();
    hash ^= channelColours_.GetHashCode();
    if (UnscheduledBehaviour != 0) hash ^= UnscheduledBehaviour.GetHashCode();
    hash ^= channelMapping_.GetHashCode();
    if (LineAddressing != 0) hash ^= LineAddressing.GetHashCode();
    if (ZoneScaleFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZoneScaleFactor);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Zone != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Zone);
    }
    if (StartAddress != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(StartAddress);
    }
    if (LineOrUniverseMask != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(LineOrUniverseMask);
    }
    if (Protocol != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Protocol);
    }
    if (NumberOfLights != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(NumberOfLights);
    }
    if (ChannelsPerLight != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ChannelsPerLight);
    }
    channelColours_.WriteTo(output, _repeated_channelColours_codec);
    if (UnscheduledBehaviour != 0) {
      output.WriteRawTag(64);
      output.WriteEnum((int) UnscheduledBehaviour);
    }
    channelMapping_.WriteTo(output, _repeated_channelMapping_codec);
    if (LineAddressing != 0) {
      output.WriteRawTag(80);
      output.WriteEnum((int) LineAddressing);
    }
    if (ZoneScaleFactor != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(ZoneScaleFactor);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Zone != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Zone);
    }
    if (StartAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartAddress);
    }
    if (LineOrUniverseMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineOrUniverseMask);
    }
    if (Protocol != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Protocol);
    }
    if (NumberOfLights != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfLights);
    }
    if (ChannelsPerLight != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelsPerLight);
    }
    size += channelColours_.CalculateSize(_repeated_channelColours_codec);
    if (UnscheduledBehaviour != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UnscheduledBehaviour);
    }
    size += channelMapping_.CalculateSize(_repeated_channelMapping_codec);
    if (LineAddressing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LineAddressing);
    }
    if (ZoneScaleFactor != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SpektraSettingMessage other) {
    if (other == null) {
      return;
    }
    if (other.Zone != 0) {
      Zone = other.Zone;
    }
    if (other.StartAddress != 0) {
      StartAddress = other.StartAddress;
    }
    if (other.LineOrUniverseMask != 0) {
      LineOrUniverseMask = other.LineOrUniverseMask;
    }
    if (other.Protocol != 0) {
      Protocol = other.Protocol;
    }
    if (other.NumberOfLights != 0) {
      NumberOfLights = other.NumberOfLights;
    }
    if (other.ChannelsPerLight != 0) {
      ChannelsPerLight = other.ChannelsPerLight;
    }
    channelColours_.Add(other.channelColours_);
    if (other.UnscheduledBehaviour != 0) {
      UnscheduledBehaviour = other.UnscheduledBehaviour;
    }
    channelMapping_.Add(other.channelMapping_);
    if (other.LineAddressing != 0) {
      LineAddressing = other.LineAddressing;
    }
    if (other.ZoneScaleFactor != 0F) {
      ZoneScaleFactor = other.ZoneScaleFactor;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Zone = input.ReadUInt32();
          break;
        }
        case 16: {
          StartAddress = input.ReadUInt32();
          break;
        }
        case 24: {
          LineOrUniverseMask = input.ReadUInt32();
          break;
        }
        case 32: {
          Protocol = input.ReadUInt32();
          break;
        }
        case 40: {
          NumberOfLights = input.ReadUInt32();
          break;
        }
        case 48: {
          ChannelsPerLight = input.ReadUInt32();
          break;
        }
        case 58:
        case 56: {
          channelColours_.AddEntriesFrom(input, _repeated_channelColours_codec);
          break;
        }
        case 64: {
          unscheduledBehaviour_ = (global::SpektraUnscheduledBehaviourType) input.ReadEnum();
          break;
        }
        case 74:
        case 72: {
          channelMapping_.AddEntriesFrom(input, _repeated_channelMapping_codec);
          break;
        }
        case 80: {
          lineAddressing_ = (global::LineAddressingType) input.ReadEnum();
          break;
        }
        case 93: {
          ZoneScaleFactor = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class SpektraColourConfigMessage : pb::IMessage<SpektraColourConfigMessage> {
  private static readonly pb::MessageParser<SpektraColourConfigMessage> _parser = new pb::MessageParser<SpektraColourConfigMessage>(() => new SpektraColourConfigMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SpektraColourConfigMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraColourConfigMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraColourConfigMessage(SpektraColourConfigMessage other) : this() {
    channelValue_ = other.channelValue_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraColourConfigMessage Clone() {
    return new SpektraColourConfigMessage(this);
  }

  /// <summary>Field number for the "channel_value" field.</summary>
  public const int ChannelValueFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_channelValue_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> channelValue_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Include as many values as there are channels, e.g. [0, 255, 0] would be Green for an RGB light (3 channel values)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ChannelValue {
    get { return channelValue_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SpektraColourConfigMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SpektraColourConfigMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!channelValue_.Equals(other.channelValue_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= channelValue_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    channelValue_.WriteTo(output, _repeated_channelValue_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += channelValue_.CalculateSize(_repeated_channelValue_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SpektraColourConfigMessage other) {
    if (other == null) {
      return;
    }
    channelValue_.Add(other.channelValue_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          channelValue_.AddEntriesFrom(input, _repeated_channelValue_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SpektraSequenceConfigMessage : pb::IMessage<SpektraSequenceConfigMessage> {
  private static readonly pb::MessageParser<SpektraSequenceConfigMessage> _parser = new pb::MessageParser<SpektraSequenceConfigMessage>(() => new SpektraSequenceConfigMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SpektraSequenceConfigMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraSequenceConfigMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraSequenceConfigMessage(SpektraSequenceConfigMessage other) : this() {
    index_ = other.index_;
    type_ = other.type_;
    transition_ = other.transition_;
    fadeTimeBy10Ms_ = other.fadeTimeBy10Ms_;
    timePerColour_ = other.timePerColour_;
    timePerColourUnit_ = other.timePerColourUnit_;
    timePerStep_ = other.timePerStep_;
    timePerStepUnit_ = other.timePerStepUnit_;
    range_ = other.range_;
    colour_ = other.colour_.Clone();
    isRandomisedType_ = other.isRandomisedType_;
    randomTypesMask_ = other.randomTypesMask_;
    isReverseDirection_ = other.isReverseDirection_;
    isCycleDirection_ = other.isCycleDirection_;
    title_ = other.title_;
    hasRandomColourOrder_ = other.hasRandomColourOrder_;
    colours_ = other.colours_.Clone();
    args_ = other.args_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraSequenceConfigMessage Clone() {
    return new SpektraSequenceConfigMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private uint type_;
  /// <summary>
  /// BLEND / SIMPLE CHASE / SHADOW CHASE / COMET / ROTATE / TWINKLE / BUILD-UP / CRASH / FIREWORKS
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "transition" field.</summary>
  public const int TransitionFieldNumber = 3;
  private global::SpektraTransitionType transition_ = 0;
  /// <summary>
  /// BLEND / SNAP / FADE_TO_BLACK
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraTransitionType Transition {
    get { return transition_; }
    set {
      transition_ = value;
    }
  }

  /// <summary>Field number for the "fade_time_by_10ms" field.</summary>
  public const int FadeTimeBy10MsFieldNumber = 4;
  private uint fadeTimeBy10Ms_;
  /// <summary>
  /// Correlates to blend transitions
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FadeTimeBy10Ms {
    get { return fadeTimeBy10Ms_; }
    set {
      fadeTimeBy10Ms_ = value;
    }
  }

  /// <summary>Field number for the "time_per_colour" field.</summary>
  public const int TimePerColourFieldNumber = 5;
  private uint timePerColour_;
  /// <summary>
  /// How long each colour should be shown
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimePerColour {
    get { return timePerColour_; }
    set {
      timePerColour_ = value;
    }
  }

  /// <summary>Field number for the "time_per_colour_unit" field.</summary>
  public const int TimePerColourUnitFieldNumber = 6;
  private uint timePerColourUnit_;
  /// <summary>
  /// MILLISECONDS / SECONDS / MINUTES / HOURS
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimePerColourUnit {
    get { return timePerColourUnit_; }
    set {
      timePerColourUnit_ = value;
    }
  }

  /// <summary>Field number for the "time_per_step" field.</summary>
  public const int TimePerStepFieldNumber = 7;
  private uint timePerStep_;
  /// <summary>
  /// How long each sequence type 'animation' takes (e.g. speed of the chase)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimePerStep {
    get { return timePerStep_; }
    set {
      timePerStep_ = value;
    }
  }

  /// <summary>Field number for the "time_per_step_unit" field.</summary>
  public const int TimePerStepUnitFieldNumber = 8;
  private uint timePerStepUnit_;
  /// <summary>
  /// MILLISECONDS / SECONDS / MINUTES / HOURS
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimePerStepUnit {
    get { return timePerStepUnit_; }
    set {
      timePerStepUnit_ = value;
    }
  }

  /// <summary>Field number for the "range" field.</summary>
  public const int RangeFieldNumber = 9;
  private uint range_;
  /// <summary>
  /// 0 for all lights, any number above 0 will repeat in blocks of (TOTAL LIGHTS / RANGE)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Range {
    get { return range_; }
    set {
      range_ = value;
    }
  }

  /// <summary>Field number for the "colour" field.</summary>
  public const int ColourFieldNumber = 10;
  private static readonly pb::FieldCodec<ulong> _repeated_colour_codec
      = pb::FieldCodec.ForUInt64(82);
  private readonly pbc::RepeatedField<ulong> colour_ = new pbc::RepeatedField<ulong>();
  /// <summary>
  /// Deprecated (kept for backward compatability) -> Use "colours" instead
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> Colour {
    get { return colour_; }
  }

  /// <summary>Field number for the "is_randomised_type" field.</summary>
  public const int IsRandomisedTypeFieldNumber = 11;
  private uint isRandomisedType_;
  /// <summary>
  /// Will randomly selected (from random_types_mask) one of the Sequence Types
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IsRandomisedType {
    get { return isRandomisedType_; }
    set {
      isRandomisedType_ = value;
    }
  }

  /// <summary>Field number for the "random_types_mask" field.</summary>
  public const int RandomTypesMaskFieldNumber = 12;
  private uint randomTypesMask_;
  /// <summary>
  /// A bitmask of Sequence Types
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RandomTypesMask {
    get { return randomTypesMask_; }
    set {
      randomTypesMask_ = value;
    }
  }

  /// <summary>Field number for the "is_reverse_direction" field.</summary>
  public const int IsReverseDirectionFieldNumber = 13;
  private uint isReverseDirection_;
  /// <summary>
  /// Animate the sequence in reverse light order
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IsReverseDirection {
    get { return isReverseDirection_; }
    set {
      isReverseDirection_ = value;
    }
  }

  /// <summary>Field number for the "is_cycle_direction" field.</summary>
  public const int IsCycleDirectionFieldNumber = 14;
  private uint isCycleDirection_;
  /// <summary>
  /// Animate the sequence in alternating light order from forward to reverse
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IsCycleDirection {
    get { return isCycleDirection_; }
    set {
      isCycleDirection_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 15;
  private string title_ = "";
  /// <summary>
  /// The name of the Sequence
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "has_random_colour_order" field.</summary>
  public const int HasRandomColourOrderFieldNumber = 16;
  private bool hasRandomColourOrder_;
  /// <summary>
  /// Randomly pick the next colour out of the chosen colours
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRandomColourOrder {
    get { return hasRandomColourOrder_; }
    set {
      hasRandomColourOrder_ = value;
    }
  }

  /// <summary>Field number for the "colours" field.</summary>
  public const int ColoursFieldNumber = 17;
  private static readonly pb::FieldCodec<global::SpektraColourConfigMessage> _repeated_colours_codec
      = pb::FieldCodec.ForMessage(138, global::SpektraColourConfigMessage.Parser);
  private readonly pbc::RepeatedField<global::SpektraColourConfigMessage> colours_ = new pbc::RepeatedField<global::SpektraColourConfigMessage>();
  /// <summary>
  /// The colours used in the Sequence
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SpektraColourConfigMessage> Colours {
    get { return colours_; }
  }

  /// <summary>Field number for the "args" field.</summary>
  public const int ArgsFieldNumber = 18;
  private static readonly pb::FieldCodec<uint> _repeated_args_codec
      = pb::FieldCodec.ForUInt32(146);
  private readonly pbc::RepeatedField<uint> args_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Function specific arguments * 5
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Args {
    get { return args_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SpektraSequenceConfigMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SpektraSequenceConfigMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Type != other.Type) return false;
    if (Transition != other.Transition) return false;
    if (FadeTimeBy10Ms != other.FadeTimeBy10Ms) return false;
    if (TimePerColour != other.TimePerColour) return false;
    if (TimePerColourUnit != other.TimePerColourUnit) return false;
    if (TimePerStep != other.TimePerStep) return false;
    if (TimePerStepUnit != other.TimePerStepUnit) return false;
    if (Range != other.Range) return false;
    if(!colour_.Equals(other.colour_)) return false;
    if (IsRandomisedType != other.IsRandomisedType) return false;
    if (RandomTypesMask != other.RandomTypesMask) return false;
    if (IsReverseDirection != other.IsReverseDirection) return false;
    if (IsCycleDirection != other.IsCycleDirection) return false;
    if (Title != other.Title) return false;
    if (HasRandomColourOrder != other.HasRandomColourOrder) return false;
    if(!colours_.Equals(other.colours_)) return false;
    if(!args_.Equals(other.args_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Transition != 0) hash ^= Transition.GetHashCode();
    if (FadeTimeBy10Ms != 0) hash ^= FadeTimeBy10Ms.GetHashCode();
    if (TimePerColour != 0) hash ^= TimePerColour.GetHashCode();
    if (TimePerColourUnit != 0) hash ^= TimePerColourUnit.GetHashCode();
    if (TimePerStep != 0) hash ^= TimePerStep.GetHashCode();
    if (TimePerStepUnit != 0) hash ^= TimePerStepUnit.GetHashCode();
    if (Range != 0) hash ^= Range.GetHashCode();
    hash ^= colour_.GetHashCode();
    if (IsRandomisedType != 0) hash ^= IsRandomisedType.GetHashCode();
    if (RandomTypesMask != 0) hash ^= RandomTypesMask.GetHashCode();
    if (IsReverseDirection != 0) hash ^= IsReverseDirection.GetHashCode();
    if (IsCycleDirection != 0) hash ^= IsCycleDirection.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (HasRandomColourOrder != false) hash ^= HasRandomColourOrder.GetHashCode();
    hash ^= colours_.GetHashCode();
    hash ^= args_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Type);
    }
    if (Transition != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Transition);
    }
    if (FadeTimeBy10Ms != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(FadeTimeBy10Ms);
    }
    if (TimePerColour != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(TimePerColour);
    }
    if (TimePerColourUnit != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(TimePerColourUnit);
    }
    if (TimePerStep != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(TimePerStep);
    }
    if (TimePerStepUnit != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(TimePerStepUnit);
    }
    if (Range != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(Range);
    }
    colour_.WriteTo(output, _repeated_colour_codec);
    if (IsRandomisedType != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(IsRandomisedType);
    }
    if (RandomTypesMask != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(RandomTypesMask);
    }
    if (IsReverseDirection != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(IsReverseDirection);
    }
    if (IsCycleDirection != 0) {
      output.WriteRawTag(112);
      output.WriteUInt32(IsCycleDirection);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(Title);
    }
    if (HasRandomColourOrder != false) {
      output.WriteRawTag(128, 1);
      output.WriteBool(HasRandomColourOrder);
    }
    colours_.WriteTo(output, _repeated_colours_codec);
    args_.WriteTo(output, _repeated_args_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
    }
    if (Transition != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Transition);
    }
    if (FadeTimeBy10Ms != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FadeTimeBy10Ms);
    }
    if (TimePerColour != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimePerColour);
    }
    if (TimePerColourUnit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimePerColourUnit);
    }
    if (TimePerStep != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimePerStep);
    }
    if (TimePerStepUnit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimePerStepUnit);
    }
    if (Range != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Range);
    }
    size += colour_.CalculateSize(_repeated_colour_codec);
    if (IsRandomisedType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsRandomisedType);
    }
    if (RandomTypesMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomTypesMask);
    }
    if (IsReverseDirection != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsReverseDirection);
    }
    if (IsCycleDirection != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsCycleDirection);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (HasRandomColourOrder != false) {
      size += 2 + 1;
    }
    size += colours_.CalculateSize(_repeated_colours_codec);
    size += args_.CalculateSize(_repeated_args_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SpektraSequenceConfigMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Transition != 0) {
      Transition = other.Transition;
    }
    if (other.FadeTimeBy10Ms != 0) {
      FadeTimeBy10Ms = other.FadeTimeBy10Ms;
    }
    if (other.TimePerColour != 0) {
      TimePerColour = other.TimePerColour;
    }
    if (other.TimePerColourUnit != 0) {
      TimePerColourUnit = other.TimePerColourUnit;
    }
    if (other.TimePerStep != 0) {
      TimePerStep = other.TimePerStep;
    }
    if (other.TimePerStepUnit != 0) {
      TimePerStepUnit = other.TimePerStepUnit;
    }
    if (other.Range != 0) {
      Range = other.Range;
    }
    colour_.Add(other.colour_);
    if (other.IsRandomisedType != 0) {
      IsRandomisedType = other.IsRandomisedType;
    }
    if (other.RandomTypesMask != 0) {
      RandomTypesMask = other.RandomTypesMask;
    }
    if (other.IsReverseDirection != 0) {
      IsReverseDirection = other.IsReverseDirection;
    }
    if (other.IsCycleDirection != 0) {
      IsCycleDirection = other.IsCycleDirection;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.HasRandomColourOrder != false) {
      HasRandomColourOrder = other.HasRandomColourOrder;
    }
    colours_.Add(other.colours_);
    args_.Add(other.args_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          Type = input.ReadUInt32();
          break;
        }
        case 24: {
          transition_ = (global::SpektraTransitionType) input.ReadEnum();
          break;
        }
        case 32: {
          FadeTimeBy10Ms = input.ReadUInt32();
          break;
        }
        case 40: {
          TimePerColour = input.ReadUInt32();
          break;
        }
        case 48: {
          TimePerColourUnit = input.ReadUInt32();
          break;
        }
        case 56: {
          TimePerStep = input.ReadUInt32();
          break;
        }
        case 64: {
          TimePerStepUnit = input.ReadUInt32();
          break;
        }
        case 72: {
          Range = input.ReadUInt32();
          break;
        }
        case 82:
        case 80: {
          colour_.AddEntriesFrom(input, _repeated_colour_codec);
          break;
        }
        case 88: {
          IsRandomisedType = input.ReadUInt32();
          break;
        }
        case 96: {
          RandomTypesMask = input.ReadUInt32();
          break;
        }
        case 104: {
          IsReverseDirection = input.ReadUInt32();
          break;
        }
        case 112: {
          IsCycleDirection = input.ReadUInt32();
          break;
        }
        case 122: {
          Title = input.ReadString();
          break;
        }
        case 128: {
          HasRandomColourOrder = input.ReadBool();
          break;
        }
        case 138: {
          colours_.AddEntriesFrom(input, _repeated_colours_codec);
          break;
        }
        case 146:
        case 144: {
          args_.AddEntriesFrom(input, _repeated_args_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SpektraCalendarMessage : pb::IMessage<SpektraCalendarMessage> {
  private static readonly pb::MessageParser<SpektraCalendarMessage> _parser = new pb::MessageParser<SpektraCalendarMessage>(() => new SpektraCalendarMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SpektraCalendarMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraCalendarMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraCalendarMessage(SpektraCalendarMessage other) : this() {
    type_ = other.type_;
    index_ = other.index_;
    days_ = other.days_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraCalendarMessage Clone() {
    return new SpektraCalendarMessage(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::SpektraTargetType type_ = 0;
  /// <summary>
  /// Spektra Type (e.g. Sequence or Theme)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraTargetType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 2;
  private uint index_;
  /// <summary>
  /// Index (i.e. which Sequence or Theme)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "days" field.</summary>
  public const int DaysFieldNumber = 3;
  private static readonly pb::FieldCodec<bool> _repeated_days_codec
      = pb::FieldCodec.ForBool(26);
  private readonly pbc::RepeatedField<bool> days_ = new pbc::RepeatedField<bool>();
  /// <summary>
  /// Boolean array to specify when this Target Index is active (up to the number of days in a year)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<bool> Days {
    get { return days_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SpektraCalendarMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SpektraCalendarMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Index != other.Index) return false;
    if(!days_.Equals(other.days_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    hash ^= days_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Index != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Index);
    }
    days_.WriteTo(output, _repeated_days_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    size += days_.CalculateSize(_repeated_days_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SpektraCalendarMessage other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    days_.Add(other.days_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::SpektraTargetType) input.ReadEnum();
          break;
        }
        case 16: {
          Index = input.ReadUInt32();
          break;
        }
        case 26:
        case 24: {
          days_.AddEntriesFrom(input, _repeated_days_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SpektraCalendarDayMessage : pb::IMessage<SpektraCalendarDayMessage> {
  private static readonly pb::MessageParser<SpektraCalendarDayMessage> _parser = new pb::MessageParser<SpektraCalendarDayMessage>(() => new SpektraCalendarDayMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SpektraCalendarDayMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraCalendarDayMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraCalendarDayMessage(SpektraCalendarDayMessage other) : this() {
    dayIndex_ = other.dayIndex_;
    type_ = other.type_;
    targetIndex_ = other.targetIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraCalendarDayMessage Clone() {
    return new SpektraCalendarDayMessage(this);
  }

  /// <summary>Field number for the "day_index" field.</summary>
  public const int DayIndexFieldNumber = 1;
  private uint dayIndex_;
  /// <summary>
  /// Index of this day (0 to 365, 366 days total)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DayIndex {
    get { return dayIndex_; }
    set {
      dayIndex_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::SpektraTargetType type_ = 0;
  /// <summary>
  /// Spektra Type for this day (e.g. Sequence or Theme)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraTargetType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "target_index" field.</summary>
  public const int TargetIndexFieldNumber = 3;
  private uint targetIndex_;
  /// <summary>
  /// Index of the specified Type (i.e. which Sequence or Theme)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetIndex {
    get { return targetIndex_; }
    set {
      targetIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SpektraCalendarDayMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SpektraCalendarDayMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DayIndex != other.DayIndex) return false;
    if (Type != other.Type) return false;
    if (TargetIndex != other.TargetIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DayIndex != 0) hash ^= DayIndex.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DayIndex != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(DayIndex);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (TargetIndex != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DayIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DayIndex);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (TargetIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SpektraCalendarDayMessage other) {
    if (other == null) {
      return;
    }
    if (other.DayIndex != 0) {
      DayIndex = other.DayIndex;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.TargetIndex != 0) {
      TargetIndex = other.TargetIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DayIndex = input.ReadUInt32();
          break;
        }
        case 16: {
          type_ = (global::SpektraTargetType) input.ReadEnum();
          break;
        }
        case 24: {
          TargetIndex = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SpektraCalendarOverviewMessage : pb::IMessage<SpektraCalendarOverviewMessage> {
  private static readonly pb::MessageParser<SpektraCalendarOverviewMessage> _parser = new pb::MessageParser<SpektraCalendarOverviewMessage>(() => new SpektraCalendarOverviewMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SpektraCalendarOverviewMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraCalendarOverviewMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraCalendarOverviewMessage(SpektraCalendarOverviewMessage other) : this() {
    dayOffset_ = other.dayOffset_;
    days_ = other.days_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraCalendarOverviewMessage Clone() {
    return new SpektraCalendarOverviewMessage(this);
  }

  /// <summary>Field number for the "day_offset" field.</summary>
  public const int DayOffsetFieldNumber = 1;
  private uint dayOffset_;
  /// <summary>
  /// Offset to start counting days from (0 is the first day of the year)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DayOffset {
    get { return dayOffset_; }
    set {
      dayOffset_ = value;
    }
  }

  /// <summary>Field number for the "days" field.</summary>
  public const int DaysFieldNumber = 2;
  private static readonly pb::FieldCodec<global::SpektraCalendarDayMessage> _repeated_days_codec
      = pb::FieldCodec.ForMessage(18, global::SpektraCalendarDayMessage.Parser);
  private readonly pbc::RepeatedField<global::SpektraCalendarDayMessage> days_ = new pbc::RepeatedField<global::SpektraCalendarDayMessage>();
  /// <summary>
  /// Schedule information for each day; supports up to 90 days per Message
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SpektraCalendarDayMessage> Days {
    get { return days_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SpektraCalendarOverviewMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SpektraCalendarOverviewMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DayOffset != other.DayOffset) return false;
    if(!days_.Equals(other.days_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DayOffset != 0) hash ^= DayOffset.GetHashCode();
    hash ^= days_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DayOffset != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(DayOffset);
    }
    days_.WriteTo(output, _repeated_days_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DayOffset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DayOffset);
    }
    size += days_.CalculateSize(_repeated_days_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SpektraCalendarOverviewMessage other) {
    if (other == null) {
      return;
    }
    if (other.DayOffset != 0) {
      DayOffset = other.DayOffset;
    }
    days_.Add(other.days_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DayOffset = input.ReadUInt32();
          break;
        }
        case 18: {
          days_.AddEntriesFrom(input, _repeated_days_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SpektraThemeConfigMessage : pb::IMessage<SpektraThemeConfigMessage> {
  private static readonly pb::MessageParser<SpektraThemeConfigMessage> _parser = new pb::MessageParser<SpektraThemeConfigMessage>(() => new SpektraThemeConfigMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SpektraThemeConfigMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraThemeConfigMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraThemeConfigMessage(SpektraThemeConfigMessage other) : this() {
    index_ = other.index_;
    colour_ = other.colour_.Clone();
    title_ = other.title_;
    colours_ = other.colours_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraThemeConfigMessage Clone() {
    return new SpektraThemeConfigMessage(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "colour" field.</summary>
  public const int ColourFieldNumber = 2;
  private static readonly pb::FieldCodec<ulong> _repeated_colour_codec
      = pb::FieldCodec.ForUInt64(18);
  private readonly pbc::RepeatedField<ulong> colour_ = new pbc::RepeatedField<ulong>();
  /// <summary>
  /// Deprecated (kept for backward compatability) -> Use colours instead
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> Colour {
    get { return colour_; }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 3;
  private string title_ = "";
  /// <summary>
  /// The name of the Theme
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "colours" field.</summary>
  public const int ColoursFieldNumber = 4;
  private static readonly pb::FieldCodec<global::SpektraColourConfigMessage> _repeated_colours_codec
      = pb::FieldCodec.ForMessage(34, global::SpektraColourConfigMessage.Parser);
  private readonly pbc::RepeatedField<global::SpektraColourConfigMessage> colours_ = new pbc::RepeatedField<global::SpektraColourConfigMessage>();
  /// <summary>
  /// The colours used in the Theme (will repeat colours if less colours than lights)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SpektraColourConfigMessage> Colours {
    get { return colours_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SpektraThemeConfigMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SpektraThemeConfigMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if(!colour_.Equals(other.colour_)) return false;
    if (Title != other.Title) return false;
    if(!colours_.Equals(other.colours_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    hash ^= colour_.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    hash ^= colours_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    colour_.WriteTo(output, _repeated_colour_codec);
    if (Title.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Title);
    }
    colours_.WriteTo(output, _repeated_colours_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    size += colour_.CalculateSize(_repeated_colour_codec);
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    size += colours_.CalculateSize(_repeated_colours_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SpektraThemeConfigMessage other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    colour_.Add(other.colour_);
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    colours_.Add(other.colours_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 18:
        case 16: {
          colour_.AddEntriesFrom(input, _repeated_colour_codec);
          break;
        }
        case 26: {
          Title = input.ReadString();
          break;
        }
        case 34: {
          colours_.AddEntriesFrom(input, _repeated_colours_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SpektraReadMessage : pb::IMessage<SpektraReadMessage> {
  private static readonly pb::MessageParser<SpektraReadMessage> _parser = new pb::MessageParser<SpektraReadMessage>(() => new SpektraReadMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SpektraReadMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraReadMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraReadMessage(SpektraReadMessage other) : this() {
    type_ = other.type_;
    index_ = other.index_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraReadMessage Clone() {
    return new SpektraReadMessage(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::SpektraTargetType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraTargetType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 2;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SpektraReadMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SpektraReadMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Index != other.Index) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Index != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Index);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SpektraReadMessage other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::SpektraTargetType) input.ReadEnum();
          break;
        }
        case 16: {
          Index = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SpektraControlMessage : pb::IMessage<SpektraControlMessage> {
  private static readonly pb::MessageParser<SpektraControlMessage> _parser = new pb::MessageParser<SpektraControlMessage>(() => new SpektraControlMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SpektraControlMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraControlMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraControlMessage(SpektraControlMessage other) : this() {
    type_ = other.type_;
    zone_ = other.zone_;
    index_ = other.index_;
    action_ = other.action_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SpektraControlMessage Clone() {
    return new SpektraControlMessage(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::SpektraTargetType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraTargetType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "zone" field.</summary>
  public const int ZoneFieldNumber = 2;
  private uint zone_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Zone {
    get { return zone_; }
    set {
      zone_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 3;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 4;
  private global::SpektraActionType action_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraActionType Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SpektraControlMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SpektraControlMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Zone != other.Zone) return false;
    if (Index != other.Index) return false;
    if (Action != other.Action) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Zone != 0) hash ^= Zone.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Action != 0) hash ^= Action.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Zone != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Zone);
    }
    if (Index != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Index);
    }
    if (Action != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Action);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Zone != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Zone);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Action != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SpektraControlMessage other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Zone != 0) {
      Zone = other.Zone;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Action != 0) {
      Action = other.Action;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::SpektraTargetType) input.ReadEnum();
          break;
        }
        case 16: {
          Zone = input.ReadUInt32();
          break;
        }
        case 24: {
          Index = input.ReadUInt32();
          break;
        }
        case 32: {
          action_ = (global::SpektraActionType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///*********** TRANSLATION  ************
/// </summary>
public sealed partial class DMXTranslationObject : pb::IMessage<DMXTranslationObject> {
  private static readonly pb::MessageParser<DMXTranslationObject> _parser = new pb::MessageParser<DMXTranslationObject>(() => new DMXTranslationObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DMXTranslationObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DMXTranslationObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DMXTranslationObject(DMXTranslationObject other) : this() {
    lineIn_ = other.lineIn_;
    lineOut_ = other.lineOut_;
    dmxStartAddress_ = other.dmxStartAddress_;
    channelCount_ = other.channelCount_;
    daliArray_ = other.daliArray_.Clone();
    affectedInput_ = other.affectedInput_;
    blocking_ = other.blocking_;
    enabled_ = other.enabled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DMXTranslationObject Clone() {
    return new DMXTranslationObject(this);
  }

  /// <summary>Field number for the "line_in" field.</summary>
  public const int LineInFieldNumber = 1;
  private uint lineIn_;
  /// <summary>
  /// DMX IN
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LineIn {
    get { return lineIn_; }
    set {
      lineIn_ = value;
    }
  }

  /// <summary>Field number for the "line_out" field.</summary>
  public const int LineOutFieldNumber = 2;
  private uint lineOut_;
  /// <summary>
  /// DALI OUT
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LineOut {
    get { return lineOut_; }
    set {
      lineOut_ = value;
    }
  }

  /// <summary>Field number for the "dmx_start_address" field.</summary>
  public const int DmxStartAddressFieldNumber = 3;
  private uint dmxStartAddress_;
  /// <summary>
  /// DMX Start Address
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DmxStartAddress {
    get { return dmxStartAddress_; }
    set {
      dmxStartAddress_ = value;
    }
  }

  /// <summary>Field number for the "channel_count" field.</summary>
  public const int ChannelCountFieldNumber = 4;
  private uint channelCount_;
  /// <summary>
  /// DMX Count
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChannelCount {
    get { return channelCount_; }
    set {
      channelCount_ = value;
    }
  }

  /// <summary>Field number for the "dali_array" field.</summary>
  public const int DaliArrayFieldNumber = 5;
  private static readonly pb::FieldCodec<uint> _repeated_daliArray_codec
      = pb::FieldCodec.ForUInt32(42);
  private readonly pbc::RepeatedField<uint> daliArray_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// DALI Addresses
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> DaliArray {
    get { return daliArray_; }
  }

  /// <summary>Field number for the "affected_input" field.</summary>
  public const int AffectedInputFieldNumber = 7;
  private uint affectedInput_;
  /// <summary>
  /// DEPRECATED: repeated uint32 sent_levels (6)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AffectedInput {
    get { return affectedInput_; }
    set {
      affectedInput_ = value;
    }
  }

  /// <summary>Field number for the "blocking" field.</summary>
  public const int BlockingFieldNumber = 8;
  private bool blocking_;
  /// <summary>
  /// If DMX to DALI function blocks inputs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Blocking {
    get { return blocking_; }
    set {
      blocking_ = value;
    }
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 9;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DMXTranslationObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DMXTranslationObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LineIn != other.LineIn) return false;
    if (LineOut != other.LineOut) return false;
    if (DmxStartAddress != other.DmxStartAddress) return false;
    if (ChannelCount != other.ChannelCount) return false;
    if(!daliArray_.Equals(other.daliArray_)) return false;
    if (AffectedInput != other.AffectedInput) return false;
    if (Blocking != other.Blocking) return false;
    if (Enabled != other.Enabled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LineIn != 0) hash ^= LineIn.GetHashCode();
    if (LineOut != 0) hash ^= LineOut.GetHashCode();
    if (DmxStartAddress != 0) hash ^= DmxStartAddress.GetHashCode();
    if (ChannelCount != 0) hash ^= ChannelCount.GetHashCode();
    hash ^= daliArray_.GetHashCode();
    if (AffectedInput != 0) hash ^= AffectedInput.GetHashCode();
    if (Blocking != false) hash ^= Blocking.GetHashCode();
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LineIn != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(LineIn);
    }
    if (LineOut != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(LineOut);
    }
    if (DmxStartAddress != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(DmxStartAddress);
    }
    if (ChannelCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ChannelCount);
    }
    daliArray_.WriteTo(output, _repeated_daliArray_codec);
    if (AffectedInput != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(AffectedInput);
    }
    if (Blocking != false) {
      output.WriteRawTag(64);
      output.WriteBool(Blocking);
    }
    if (Enabled != false) {
      output.WriteRawTag(72);
      output.WriteBool(Enabled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LineIn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineIn);
    }
    if (LineOut != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineOut);
    }
    if (DmxStartAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DmxStartAddress);
    }
    if (ChannelCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelCount);
    }
    size += daliArray_.CalculateSize(_repeated_daliArray_codec);
    if (AffectedInput != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AffectedInput);
    }
    if (Blocking != false) {
      size += 1 + 1;
    }
    if (Enabled != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DMXTranslationObject other) {
    if (other == null) {
      return;
    }
    if (other.LineIn != 0) {
      LineIn = other.LineIn;
    }
    if (other.LineOut != 0) {
      LineOut = other.LineOut;
    }
    if (other.DmxStartAddress != 0) {
      DmxStartAddress = other.DmxStartAddress;
    }
    if (other.ChannelCount != 0) {
      ChannelCount = other.ChannelCount;
    }
    daliArray_.Add(other.daliArray_);
    if (other.AffectedInput != 0) {
      AffectedInput = other.AffectedInput;
    }
    if (other.Blocking != false) {
      Blocking = other.Blocking;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LineIn = input.ReadUInt32();
          break;
        }
        case 16: {
          LineOut = input.ReadUInt32();
          break;
        }
        case 24: {
          DmxStartAddress = input.ReadUInt32();
          break;
        }
        case 32: {
          ChannelCount = input.ReadUInt32();
          break;
        }
        case 42:
        case 40: {
          daliArray_.AddEntriesFrom(input, _repeated_daliArray_codec);
          break;
        }
        case 56: {
          AffectedInput = input.ReadUInt32();
          break;
        }
        case 64: {
          Blocking = input.ReadBool();
          break;
        }
        case 72: {
          Enabled = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class DMXProtocolTranslation : pb::IMessage<DMXProtocolTranslation> {
  private static readonly pb::MessageParser<DMXProtocolTranslation> _parser = new pb::MessageParser<DMXProtocolTranslation>(() => new DMXProtocolTranslation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DMXProtocolTranslation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DMXProtocolTranslation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DMXProtocolTranslation(DMXProtocolTranslation other) : this() {
    object_ = other.object_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DMXProtocolTranslation Clone() {
    return new DMXProtocolTranslation(this);
  }

  /// <summary>Field number for the "object" field.</summary>
  public const int ObjectFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DMXTranslationObject> _repeated_object_codec
      = pb::FieldCodec.ForMessage(10, global::DMXTranslationObject.Parser);
  private readonly pbc::RepeatedField<global::DMXTranslationObject> object_ = new pbc::RepeatedField<global::DMXTranslationObject>();
  /// <summary>
  /// Typically 1 for a 4 Pole device but can be more for 9 Pole eDIDIO
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DMXTranslationObject> Object {
    get { return object_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DMXProtocolTranslation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DMXProtocolTranslation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!object_.Equals(other.object_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= object_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    object_.WriteTo(output, _repeated_object_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += object_.CalculateSize(_repeated_object_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DMXProtocolTranslation other) {
    if (other == null) {
      return;
    }
    object_.Add(other.object_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          object_.AddEntriesFrom(input, _repeated_object_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Inputs State
/// </summary>
public sealed partial class InputStateMessage : pb::IMessage<InputStateMessage> {
  private static readonly pb::MessageParser<InputStateMessage> _parser = new pb::MessageParser<InputStateMessage>(() => new InputStateMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InputStateMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputStateMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputStateMessage(InputStateMessage other) : this() {
    useMask_ = other.useMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputStateMessage Clone() {
    return new InputStateMessage(this);
  }

  /// <summary>Field number for the "use_mask" field.</summary>
  public const int UseMaskFieldNumber = 1;
  private bool useMask_;
  /// <summary>
  /// Reply with a mask rather than a list of active inputs.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UseMask {
    get { return useMask_; }
    set {
      useMask_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InputStateMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InputStateMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UseMask != other.UseMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UseMask != false) hash ^= UseMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UseMask != false) {
      output.WriteRawTag(8);
      output.WriteBool(UseMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UseMask != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InputStateMessage other) {
    if (other == null) {
      return;
    }
    if (other.UseMask != false) {
      UseMask = other.UseMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UseMask = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class InputStateResponse : pb::IMessage<InputStateResponse> {
  private static readonly pb::MessageParser<InputStateResponse> _parser = new pb::MessageParser<InputStateResponse>(() => new InputStateResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InputStateResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputStateResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputStateResponse(InputStateResponse other) : this() {
    inputs_ = other.inputs_.Clone();
    inputMask_ = other.inputMask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InputStateResponse Clone() {
    return new InputStateResponse(this);
  }

  /// <summary>Field number for the "inputs" field.</summary>
  public const int InputsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_inputs_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> inputs_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Contains Inputs that are Low (i.e. currently active)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Inputs {
    get { return inputs_; }
  }

  /// <summary>Field number for the "input_mask" field.</summary>
  public const int InputMaskFieldNumber = 2;
  private uint inputMask_;
  /// <summary>
  /// Usage is determined by "InputStateMessage: use_mask"
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputMask {
    get { return inputMask_; }
    set {
      inputMask_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InputStateResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InputStateResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!inputs_.Equals(other.inputs_)) return false;
    if (InputMask != other.InputMask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= inputs_.GetHashCode();
    if (InputMask != 0) hash ^= InputMask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    inputs_.WriteTo(output, _repeated_inputs_codec);
    if (InputMask != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(InputMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += inputs_.CalculateSize(_repeated_inputs_codec);
    if (InputMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InputStateResponse other) {
    if (other == null) {
      return;
    }
    inputs_.Add(other.inputs_);
    if (other.InputMask != 0) {
      InputMask = other.InputMask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
          break;
        }
        case 16: {
          InputMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// DALI/DMX agnostic.
/// </summary>
public sealed partial class LevelCacheResponse : pb::IMessage<LevelCacheResponse> {
  private static readonly pb::MessageParser<LevelCacheResponse> _parser = new pb::MessageParser<LevelCacheResponse>(() => new LevelCacheResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LevelCacheResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LevelCacheResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LevelCacheResponse(LevelCacheResponse other) : this() {
    levels_ = other.levels_.Clone();
    line_ = other.line_;
    page_ = other.page_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LevelCacheResponse Clone() {
    return new LevelCacheResponse(this);
  }

  /// <summary>Field number for the "levels" field.</summary>
  public const int LevelsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_levels_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> levels_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Levels {
    get { return levels_; }
  }

  /// <summary>Field number for the "line" field.</summary>
  public const int LineFieldNumber = 2;
  private uint line_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Line {
    get { return line_; }
    set {
      line_ = value;
    }
  }

  /// <summary>Field number for the "page" field.</summary>
  public const int PageFieldNumber = 3;
  private uint page_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Page {
    get { return page_; }
    set {
      page_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LevelCacheResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LevelCacheResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!levels_.Equals(other.levels_)) return false;
    if (Line != other.Line) return false;
    if (Page != other.Page) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= levels_.GetHashCode();
    if (Line != 0) hash ^= Line.GetHashCode();
    if (Page != 0) hash ^= Page.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    levels_.WriteTo(output, _repeated_levels_codec);
    if (Line != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Line);
    }
    if (Page != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Page);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += levels_.CalculateSize(_repeated_levels_codec);
    if (Line != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Line);
    }
    if (Page != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LevelCacheResponse other) {
    if (other == null) {
      return;
    }
    levels_.Add(other.levels_);
    if (other.Line != 0) {
      Line = other.Line;
    }
    if (other.Page != 0) {
      Page = other.Page;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          levels_.AddEntriesFrom(input, _repeated_levels_codec);
          break;
        }
        case 16: {
          Line = input.ReadUInt32();
          break;
        }
        case 24: {
          Page = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class JoinedRoomsMessage : pb::IMessage<JoinedRoomsMessage> {
  private static readonly pb::MessageParser<JoinedRoomsMessage> _parser = new pb::MessageParser<JoinedRoomsMessage>(() => new JoinedRoomsMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JoinedRoomsMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinedRoomsMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinedRoomsMessage(JoinedRoomsMessage other) : this() {
    pairs_ = other.pairs_.Clone();
    joined_ = other.joined_;
    clearJoins_ = other.clearJoins_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinedRoomsMessage Clone() {
    return new JoinedRoomsMessage(this);
  }

  /// <summary>Field number for the "pairs" field.</summary>
  public const int PairsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_pairs_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> pairs_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Pairs of integers indicating joins between physical zones.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Pairs {
    get { return pairs_; }
  }

  /// <summary>Field number for the "joined" field.</summary>
  public const int JoinedFieldNumber = 2;
  private bool joined_;
  /// <summary>
  /// If True, these pairs are joined. Else they are being separated.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Joined {
    get { return joined_; }
    set {
      joined_ = value;
    }
  }

  /// <summary>Field number for the "clear_joins" field.</summary>
  public const int ClearJoinsFieldNumber = 3;
  private bool clearJoins_;
  /// <summary>
  /// Can be sent at the same time as joining, but interpreted as "clear all". An "override" type effect.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ClearJoins {
    get { return clearJoins_; }
    set {
      clearJoins_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JoinedRoomsMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JoinedRoomsMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!pairs_.Equals(other.pairs_)) return false;
    if (Joined != other.Joined) return false;
    if (ClearJoins != other.ClearJoins) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= pairs_.GetHashCode();
    if (Joined != false) hash ^= Joined.GetHashCode();
    if (ClearJoins != false) hash ^= ClearJoins.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pairs_.WriteTo(output, _repeated_pairs_codec);
    if (Joined != false) {
      output.WriteRawTag(16);
      output.WriteBool(Joined);
    }
    if (ClearJoins != false) {
      output.WriteRawTag(24);
      output.WriteBool(ClearJoins);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += pairs_.CalculateSize(_repeated_pairs_codec);
    if (Joined != false) {
      size += 1 + 1;
    }
    if (ClearJoins != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JoinedRoomsMessage other) {
    if (other == null) {
      return;
    }
    pairs_.Add(other.pairs_);
    if (other.Joined != false) {
      Joined = other.Joined;
    }
    if (other.ClearJoins != false) {
      ClearJoins = other.ClearJoins;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          pairs_.AddEntriesFrom(input, _repeated_pairs_codec);
          break;
        }
        case 16: {
          Joined = input.ReadBool();
          break;
        }
        case 24: {
          ClearJoins = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Get System Info
/// </summary>
public sealed partial class DiagnosticSystemInfoResponse : pb::IMessage<DiagnosticSystemInfoResponse> {
  private static readonly pb::MessageParser<DiagnosticSystemInfoResponse> _parser = new pb::MessageParser<DiagnosticSystemInfoResponse>(() => new DiagnosticSystemInfoResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DiagnosticSystemInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiagnosticSystemInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiagnosticSystemInfoResponse(DiagnosticSystemInfoResponse other) : this() {
    firmware_ = other.firmware_;
    hardware_ = other.hardware_;
    error_ = other.error_;
    inputCount_ = other.inputCount_;
    outputCount_ = other.outputCount_;
    irCount_ = other.irCount_;
    listStepCount_ = other.listStepCount_;
    listCount_ = other.listCount_;
    alarmCount_ = other.alarmCount_;
    burninCount_ = other.burninCount_;
    spektraSeqCount_ = other.spektraSeqCount_;
    spektraSeqStepCount_ = other.spektraSeqStepCount_;
    spektraThemeCount_ = other.spektraThemeCount_;
    spektraStaticCount_ = other.spektraStaticCount_;
    protoVersion_ = other.protoVersion_;
    lineCount_ = other.lineCount_;
    lines_ = other.lines_.Clone();
    profileCount_ = other.profileCount_;
    presetCodeCount_ = other.presetCodeCount_;
    userLevelCount_ = other.userLevelCount_;
    dmxToDaliCount_ = other.dmxToDaliCount_;
    spektraZoneCount_ = other.spektraZoneCount_;
    logicCount_ = other.logicCount_;
    inputDaliCount_ = other.inputDaliCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiagnosticSystemInfoResponse Clone() {
    return new DiagnosticSystemInfoResponse(this);
  }

  /// <summary>Field number for the "firmware" field.</summary>
  public const int FirmwareFieldNumber = 1;
  private string firmware_ = "";
  /// <summary>
  /// Firmware Version number
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Firmware {
    get { return firmware_; }
    set {
      firmware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hardware" field.</summary>
  public const int HardwareFieldNumber = 2;
  private string hardware_ = "";
  /// <summary>
  /// Hardware Version number
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Hardware {
    get { return hardware_; }
    set {
      hardware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "error" field.</summary>
  public const int ErrorFieldNumber = 3;
  private string error_ = "";
  /// <summary>
  /// Any populated Error message
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Error {
    get { return error_; }
    set {
      error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "input_count" field.</summary>
  public const int InputCountFieldNumber = 4;
  private uint inputCount_;
  /// <summary>
  /// Number of supported Inputs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputCount {
    get { return inputCount_; }
    set {
      inputCount_ = value;
    }
  }

  /// <summary>Field number for the "output_count" field.</summary>
  public const int OutputCountFieldNumber = 5;
  private uint outputCount_;
  /// <summary>
  /// Number of supported Outptus
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint OutputCount {
    get { return outputCount_; }
    set {
      outputCount_ = value;
    }
  }

  /// <summary>Field number for the "ir_count" field.</summary>
  public const int IrCountFieldNumber = 6;
  private uint irCount_;
  /// <summary>
  /// Number of supported IR codes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IrCount {
    get { return irCount_; }
    set {
      irCount_ = value;
    }
  }

  /// <summary>Field number for the "list_step_count" field.</summary>
  public const int ListStepCountFieldNumber = 7;
  private uint listStepCount_;
  /// <summary>
  /// Number of supported List Steps
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ListStepCount {
    get { return listStepCount_; }
    set {
      listStepCount_ = value;
    }
  }

  /// <summary>Field number for the "list_count" field.</summary>
  public const int ListCountFieldNumber = 8;
  private uint listCount_;
  /// <summary>
  /// Number of supported Lists
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ListCount {
    get { return listCount_; }
    set {
      listCount_ = value;
    }
  }

  /// <summary>Field number for the "alarm_count" field.</summary>
  public const int AlarmCountFieldNumber = 9;
  private uint alarmCount_;
  /// <summary>
  /// Number of supported Alarms (Schedules)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AlarmCount {
    get { return alarmCount_; }
    set {
      alarmCount_ = value;
    }
  }

  /// <summary>Field number for the "burnin_count" field.</summary>
  public const int BurninCountFieldNumber = 10;
  private uint burninCount_;
  /// <summary>
  /// Number of supported Burn-ins
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BurninCount {
    get { return burninCount_; }
    set {
      burninCount_ = value;
    }
  }

  /// <summary>Field number for the "spektra_seq_count" field.</summary>
  public const int SpektraSeqCountFieldNumber = 11;
  private uint spektraSeqCount_;
  /// <summary>
  /// Number of supported Spektra Sequences
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpektraSeqCount {
    get { return spektraSeqCount_; }
    set {
      spektraSeqCount_ = value;
    }
  }

  /// <summary>Field number for the "spektra_seq_step_count" field.</summary>
  public const int SpektraSeqStepCountFieldNumber = 12;
  private uint spektraSeqStepCount_;
  /// <summary>
  /// Number of supported Spektra Sequence Steps
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpektraSeqStepCount {
    get { return spektraSeqStepCount_; }
    set {
      spektraSeqStepCount_ = value;
    }
  }

  /// <summary>Field number for the "spektra_theme_count" field.</summary>
  public const int SpektraThemeCountFieldNumber = 13;
  private uint spektraThemeCount_;
  /// <summary>
  /// Number of supported Spektra Themes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpektraThemeCount {
    get { return spektraThemeCount_; }
    set {
      spektraThemeCount_ = value;
    }
  }

  /// <summary>Field number for the "spektra_static_count" field.</summary>
  public const int SpektraStaticCountFieldNumber = 14;
  private uint spektraStaticCount_;
  /// <summary>
  /// Number of supported Spektra Static Colours
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpektraStaticCount {
    get { return spektraStaticCount_; }
    set {
      spektraStaticCount_ = value;
    }
  }

  /// <summary>Field number for the "proto_version" field.</summary>
  public const int ProtoVersionFieldNumber = 15;
  private uint protoVersion_;
  /// <summary>
  /// Protocol Buffer Version number
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ProtoVersion {
    get { return protoVersion_; }
    set {
      protoVersion_ = value;
    }
  }

  /// <summary>Field number for the "line_count" field.</summary>
  public const int LineCountFieldNumber = 16;
  private uint lineCount_;
  /// <summary>
  /// Number of supported Control Lines (for DMX, DALI)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LineCount {
    get { return lineCount_; }
    set {
      lineCount_ = value;
    }
  }

  /// <summary>Field number for the "lines" field.</summary>
  public const int LinesFieldNumber = 17;
  private static readonly pb::FieldCodec<global::LineType> _repeated_lines_codec
      = pb::FieldCodec.ForEnum(138, x => (int) x, x => (global::LineType) x);
  private readonly pbc::RepeatedField<global::LineType> lines_ = new pbc::RepeatedField<global::LineType>();
  /// <summary>
  /// Denotes what control type is assigned to each line (e.g. DMX, DALI)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LineType> Lines {
    get { return lines_; }
  }

  /// <summary>Field number for the "profile_count" field.</summary>
  public const int ProfileCountFieldNumber = 18;
  private uint profileCount_;
  /// <summary>
  /// Number of supported Profiles
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ProfileCount {
    get { return profileCount_; }
    set {
      profileCount_ = value;
    }
  }

  /// <summary>Field number for the "preset_code_count" field.</summary>
  public const int PresetCodeCountFieldNumber = 19;
  private uint presetCodeCount_;
  /// <summary>
  /// Number of supported Preset Codes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PresetCodeCount {
    get { return presetCodeCount_; }
    set {
      presetCodeCount_ = value;
    }
  }

  /// <summary>Field number for the "user_level_count" field.</summary>
  public const int UserLevelCountFieldNumber = 20;
  private uint userLevelCount_;
  /// <summary>
  /// Number of supported User Levels
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserLevelCount {
    get { return userLevelCount_; }
    set {
      userLevelCount_ = value;
    }
  }

  /// <summary>Field number for the "dmx_to_dali_count" field.</summary>
  public const int DmxToDaliCountFieldNumber = 21;
  private uint dmxToDaliCount_;
  /// <summary>
  /// Number of supported DMX to DALI Translations 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DmxToDaliCount {
    get { return dmxToDaliCount_; }
    set {
      dmxToDaliCount_ = value;
    }
  }

  /// <summary>Field number for the "spektra_zone_count" field.</summary>
  public const int SpektraZoneCountFieldNumber = 22;
  private uint spektraZoneCount_;
  /// <summary>
  /// Number of supported Spektra Zones
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SpektraZoneCount {
    get { return spektraZoneCount_; }
    set {
      spektraZoneCount_ = value;
    }
  }

  /// <summary>Field number for the "logic_count" field.</summary>
  public const int LogicCountFieldNumber = 23;
  private uint logicCount_;
  /// <summary>
  /// Number of supported Logic Mappings
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LogicCount {
    get { return logicCount_; }
    set {
      logicCount_ = value;
    }
  }

  /// <summary>Field number for the "input_dali_count" field.</summary>
  public const int InputDaliCountFieldNumber = 24;
  private uint inputDaliCount_;
  /// <summary>
  /// Number of supported DALI Inputs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint InputDaliCount {
    get { return inputDaliCount_; }
    set {
      inputDaliCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DiagnosticSystemInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DiagnosticSystemInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Firmware != other.Firmware) return false;
    if (Hardware != other.Hardware) return false;
    if (Error != other.Error) return false;
    if (InputCount != other.InputCount) return false;
    if (OutputCount != other.OutputCount) return false;
    if (IrCount != other.IrCount) return false;
    if (ListStepCount != other.ListStepCount) return false;
    if (ListCount != other.ListCount) return false;
    if (AlarmCount != other.AlarmCount) return false;
    if (BurninCount != other.BurninCount) return false;
    if (SpektraSeqCount != other.SpektraSeqCount) return false;
    if (SpektraSeqStepCount != other.SpektraSeqStepCount) return false;
    if (SpektraThemeCount != other.SpektraThemeCount) return false;
    if (SpektraStaticCount != other.SpektraStaticCount) return false;
    if (ProtoVersion != other.ProtoVersion) return false;
    if (LineCount != other.LineCount) return false;
    if(!lines_.Equals(other.lines_)) return false;
    if (ProfileCount != other.ProfileCount) return false;
    if (PresetCodeCount != other.PresetCodeCount) return false;
    if (UserLevelCount != other.UserLevelCount) return false;
    if (DmxToDaliCount != other.DmxToDaliCount) return false;
    if (SpektraZoneCount != other.SpektraZoneCount) return false;
    if (LogicCount != other.LogicCount) return false;
    if (InputDaliCount != other.InputDaliCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Firmware.Length != 0) hash ^= Firmware.GetHashCode();
    if (Hardware.Length != 0) hash ^= Hardware.GetHashCode();
    if (Error.Length != 0) hash ^= Error.GetHashCode();
    if (InputCount != 0) hash ^= InputCount.GetHashCode();
    if (OutputCount != 0) hash ^= OutputCount.GetHashCode();
    if (IrCount != 0) hash ^= IrCount.GetHashCode();
    if (ListStepCount != 0) hash ^= ListStepCount.GetHashCode();
    if (ListCount != 0) hash ^= ListCount.GetHashCode();
    if (AlarmCount != 0) hash ^= AlarmCount.GetHashCode();
    if (BurninCount != 0) hash ^= BurninCount.GetHashCode();
    if (SpektraSeqCount != 0) hash ^= SpektraSeqCount.GetHashCode();
    if (SpektraSeqStepCount != 0) hash ^= SpektraSeqStepCount.GetHashCode();
    if (SpektraThemeCount != 0) hash ^= SpektraThemeCount.GetHashCode();
    if (SpektraStaticCount != 0) hash ^= SpektraStaticCount.GetHashCode();
    if (ProtoVersion != 0) hash ^= ProtoVersion.GetHashCode();
    if (LineCount != 0) hash ^= LineCount.GetHashCode();
    hash ^= lines_.GetHashCode();
    if (ProfileCount != 0) hash ^= ProfileCount.GetHashCode();
    if (PresetCodeCount != 0) hash ^= PresetCodeCount.GetHashCode();
    if (UserLevelCount != 0) hash ^= UserLevelCount.GetHashCode();
    if (DmxToDaliCount != 0) hash ^= DmxToDaliCount.GetHashCode();
    if (SpektraZoneCount != 0) hash ^= SpektraZoneCount.GetHashCode();
    if (LogicCount != 0) hash ^= LogicCount.GetHashCode();
    if (InputDaliCount != 0) hash ^= InputDaliCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Firmware.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Firmware);
    }
    if (Hardware.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Hardware);
    }
    if (Error.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Error);
    }
    if (InputCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(InputCount);
    }
    if (OutputCount != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(OutputCount);
    }
    if (IrCount != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(IrCount);
    }
    if (ListStepCount != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(ListStepCount);
    }
    if (ListCount != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(ListCount);
    }
    if (AlarmCount != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(AlarmCount);
    }
    if (BurninCount != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(BurninCount);
    }
    if (SpektraSeqCount != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(SpektraSeqCount);
    }
    if (SpektraSeqStepCount != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(SpektraSeqStepCount);
    }
    if (SpektraThemeCount != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(SpektraThemeCount);
    }
    if (SpektraStaticCount != 0) {
      output.WriteRawTag(112);
      output.WriteUInt32(SpektraStaticCount);
    }
    if (ProtoVersion != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(ProtoVersion);
    }
    if (LineCount != 0) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(LineCount);
    }
    lines_.WriteTo(output, _repeated_lines_codec);
    if (ProfileCount != 0) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(ProfileCount);
    }
    if (PresetCodeCount != 0) {
      output.WriteRawTag(152, 1);
      output.WriteUInt32(PresetCodeCount);
    }
    if (UserLevelCount != 0) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(UserLevelCount);
    }
    if (DmxToDaliCount != 0) {
      output.WriteRawTag(168, 1);
      output.WriteUInt32(DmxToDaliCount);
    }
    if (SpektraZoneCount != 0) {
      output.WriteRawTag(176, 1);
      output.WriteUInt32(SpektraZoneCount);
    }
    if (LogicCount != 0) {
      output.WriteRawTag(184, 1);
      output.WriteUInt32(LogicCount);
    }
    if (InputDaliCount != 0) {
      output.WriteRawTag(192, 1);
      output.WriteUInt32(InputDaliCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Firmware.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmware);
    }
    if (Hardware.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Hardware);
    }
    if (Error.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
    }
    if (InputCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputCount);
    }
    if (OutputCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputCount);
    }
    if (IrCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IrCount);
    }
    if (ListStepCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ListStepCount);
    }
    if (ListCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ListCount);
    }
    if (AlarmCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AlarmCount);
    }
    if (BurninCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BurninCount);
    }
    if (SpektraSeqCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpektraSeqCount);
    }
    if (SpektraSeqStepCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpektraSeqStepCount);
    }
    if (SpektraThemeCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpektraThemeCount);
    }
    if (SpektraStaticCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpektraStaticCount);
    }
    if (ProtoVersion != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProtoVersion);
    }
    if (LineCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LineCount);
    }
    size += lines_.CalculateSize(_repeated_lines_codec);
    if (ProfileCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProfileCount);
    }
    if (PresetCodeCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PresetCodeCount);
    }
    if (UserLevelCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserLevelCount);
    }
    if (DmxToDaliCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DmxToDaliCount);
    }
    if (SpektraZoneCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpektraZoneCount);
    }
    if (LogicCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LogicCount);
    }
    if (InputDaliCount != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(InputDaliCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DiagnosticSystemInfoResponse other) {
    if (other == null) {
      return;
    }
    if (other.Firmware.Length != 0) {
      Firmware = other.Firmware;
    }
    if (other.Hardware.Length != 0) {
      Hardware = other.Hardware;
    }
    if (other.Error.Length != 0) {
      Error = other.Error;
    }
    if (other.InputCount != 0) {
      InputCount = other.InputCount;
    }
    if (other.OutputCount != 0) {
      OutputCount = other.OutputCount;
    }
    if (other.IrCount != 0) {
      IrCount = other.IrCount;
    }
    if (other.ListStepCount != 0) {
      ListStepCount = other.ListStepCount;
    }
    if (other.ListCount != 0) {
      ListCount = other.ListCount;
    }
    if (other.AlarmCount != 0) {
      AlarmCount = other.AlarmCount;
    }
    if (other.BurninCount != 0) {
      BurninCount = other.BurninCount;
    }
    if (other.SpektraSeqCount != 0) {
      SpektraSeqCount = other.SpektraSeqCount;
    }
    if (other.SpektraSeqStepCount != 0) {
      SpektraSeqStepCount = other.SpektraSeqStepCount;
    }
    if (other.SpektraThemeCount != 0) {
      SpektraThemeCount = other.SpektraThemeCount;
    }
    if (other.SpektraStaticCount != 0) {
      SpektraStaticCount = other.SpektraStaticCount;
    }
    if (other.ProtoVersion != 0) {
      ProtoVersion = other.ProtoVersion;
    }
    if (other.LineCount != 0) {
      LineCount = other.LineCount;
    }
    lines_.Add(other.lines_);
    if (other.ProfileCount != 0) {
      ProfileCount = other.ProfileCount;
    }
    if (other.PresetCodeCount != 0) {
      PresetCodeCount = other.PresetCodeCount;
    }
    if (other.UserLevelCount != 0) {
      UserLevelCount = other.UserLevelCount;
    }
    if (other.DmxToDaliCount != 0) {
      DmxToDaliCount = other.DmxToDaliCount;
    }
    if (other.SpektraZoneCount != 0) {
      SpektraZoneCount = other.SpektraZoneCount;
    }
    if (other.LogicCount != 0) {
      LogicCount = other.LogicCount;
    }
    if (other.InputDaliCount != 0) {
      InputDaliCount = other.InputDaliCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Firmware = input.ReadString();
          break;
        }
        case 18: {
          Hardware = input.ReadString();
          break;
        }
        case 26: {
          Error = input.ReadString();
          break;
        }
        case 32: {
          InputCount = input.ReadUInt32();
          break;
        }
        case 40: {
          OutputCount = input.ReadUInt32();
          break;
        }
        case 48: {
          IrCount = input.ReadUInt32();
          break;
        }
        case 56: {
          ListStepCount = input.ReadUInt32();
          break;
        }
        case 64: {
          ListCount = input.ReadUInt32();
          break;
        }
        case 72: {
          AlarmCount = input.ReadUInt32();
          break;
        }
        case 80: {
          BurninCount = input.ReadUInt32();
          break;
        }
        case 88: {
          SpektraSeqCount = input.ReadUInt32();
          break;
        }
        case 96: {
          SpektraSeqStepCount = input.ReadUInt32();
          break;
        }
        case 104: {
          SpektraThemeCount = input.ReadUInt32();
          break;
        }
        case 112: {
          SpektraStaticCount = input.ReadUInt32();
          break;
        }
        case 120: {
          ProtoVersion = input.ReadUInt32();
          break;
        }
        case 128: {
          LineCount = input.ReadUInt32();
          break;
        }
        case 138:
        case 136: {
          lines_.AddEntriesFrom(input, _repeated_lines_codec);
          break;
        }
        case 144: {
          ProfileCount = input.ReadUInt32();
          break;
        }
        case 152: {
          PresetCodeCount = input.ReadUInt32();
          break;
        }
        case 160: {
          UserLevelCount = input.ReadUInt32();
          break;
        }
        case 168: {
          DmxToDaliCount = input.ReadUInt32();
          break;
        }
        case 176: {
          SpektraZoneCount = input.ReadUInt32();
          break;
        }
        case 184: {
          LogicCount = input.ReadUInt32();
          break;
        }
        case 192: {
          InputDaliCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Request a diagnostic response message of a given type.
/// </summary>
public sealed partial class DiagnosticMessage : pb::IMessage<DiagnosticMessage> {
  private static readonly pb::MessageParser<DiagnosticMessage> _parser = new pb::MessageParser<DiagnosticMessage>(() => new DiagnosticMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DiagnosticMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiagnosticMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiagnosticMessage(DiagnosticMessage other) : this() {
    type_ = other.type_;
    page_ = other.page_;
    line_ = other.line_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiagnosticMessage Clone() {
    return new DiagnosticMessage(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::DiagnosticMessageType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DiagnosticMessageType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "page" field.</summary>
  public const int PageFieldNumber = 2;
  private uint page_;
  /// <summary>
  /// Allow paging of results, eg. 32 DMX levels per page, 16 pages.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Page {
    get { return page_; }
    set {
      page_ = value;
    }
  }

  /// <summary>Field number for the "line" field.</summary>
  public const int LineFieldNumber = 3;
  private uint line_;
  /// <summary>
  /// If a line/DMX universe needs to be indicated it can go here.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Line {
    get { return line_; }
    set {
      line_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DiagnosticMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DiagnosticMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Page != other.Page) return false;
    if (Line != other.Line) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Page != 0) hash ^= Page.GetHashCode();
    if (Line != 0) hash ^= Line.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Page != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Page);
    }
    if (Line != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Line);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Page != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
    }
    if (Line != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Line);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DiagnosticMessage other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Page != 0) {
      Page = other.Page;
    }
    if (other.Line != 0) {
      Line = other.Line;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::DiagnosticMessageType) input.ReadEnum();
          break;
        }
        case 16: {
          Page = input.ReadUInt32();
          break;
        }
        case 24: {
          Line = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AdminProjectPropertiesMessage : pb::IMessage<AdminProjectPropertiesMessage> {
  private static readonly pb::MessageParser<AdminProjectPropertiesMessage> _parser = new pb::MessageParser<AdminProjectPropertiesMessage>(() => new AdminProjectPropertiesMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdminProjectPropertiesMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminProjectPropertiesMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminProjectPropertiesMessage(AdminProjectPropertiesMessage other) : this() {
    deviceName_ = other.deviceName_;
    projectName_ = other.projectName_;
    longitude_ = other.longitude_;
    latitude_ = other.latitude_;
    localOffset_ = other.localOffset_;
    daylightSavings_ = other.daylightSavings_;
    daylightSavingsStart_ = other.daylightSavingsStart_;
    daylightSavingsEnd_ = other.daylightSavingsEnd_;
    pollActive_ = other.pollActive_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminProjectPropertiesMessage Clone() {
    return new AdminProjectPropertiesMessage(this);
  }

  /// <summary>Field number for the "device_name" field.</summary>
  public const int DeviceNameFieldNumber = 2;
  private string deviceName_ = "";
  /// <summary>
  /// As shown on the Network (in Spektra/Configurator Discovery)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceName {
    get { return deviceName_; }
    set {
      deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "project_name" field.</summary>
  public const int ProjectNameFieldNumber = 3;
  private string projectName_ = "";
  /// <summary>
  /// For project documentation
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProjectName {
    get { return projectName_; }
    set {
      projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "longitude" field.</summary>
  public const int LongitudeFieldNumber = 4;
  private float longitude_;
  /// <summary>
  /// For astronomical calculations (e.g. sunrise/sunset)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Longitude {
    get { return longitude_; }
    set {
      longitude_ = value;
    }
  }

  /// <summary>Field number for the "latitude" field.</summary>
  public const int LatitudeFieldNumber = 5;
  private float latitude_;
  /// <summary>
  /// For astronomical calculations (e.g. sunrise/sunset)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Latitude {
    get { return latitude_; }
    set {
      latitude_ = value;
    }
  }

  /// <summary>Field number for the "local_offset" field.</summary>
  public const int LocalOffsetFieldNumber = 6;
  private float localOffset_;
  /// <summary>
  /// For astronomical calculations (e.g. sunrise/sunset)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LocalOffset {
    get { return localOffset_; }
    set {
      localOffset_ = value;
    }
  }

  /// <summary>Field number for the "daylight_savings" field.</summary>
  public const int DaylightSavingsFieldNumber = 7;
  private bool daylightSavings_;
  /// <summary>
  /// For astronomical calculations (e.g. sunrise/sunset)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DaylightSavings {
    get { return daylightSavings_; }
    set {
      daylightSavings_ = value;
    }
  }

  /// <summary>Field number for the "daylight_savings_start" field.</summary>
  public const int DaylightSavingsStartFieldNumber = 8;
  private uint daylightSavingsStart_;
  /// <summary>
  /// Can be used to state when DST is active from
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DaylightSavingsStart {
    get { return daylightSavingsStart_; }
    set {
      daylightSavingsStart_ = value;
    }
  }

  /// <summary>Field number for the "daylight_savings_end" field.</summary>
  public const int DaylightSavingsEndFieldNumber = 9;
  private uint daylightSavingsEnd_;
  /// <summary>
  /// Can be used to state when DST is active to
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DaylightSavingsEnd {
    get { return daylightSavingsEnd_; }
    set {
      daylightSavingsEnd_ = value;
    }
  }

  /// <summary>Field number for the "poll_active" field.</summary>
  public const int PollActiveFieldNumber = 10;
  private bool pollActive_;
  /// <summary>
  /// Should the device be polling the DALI line to cache arc levels
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool PollActive {
    get { return pollActive_; }
    set {
      pollActive_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdminProjectPropertiesMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdminProjectPropertiesMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceName != other.DeviceName) return false;
    if (ProjectName != other.ProjectName) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalOffset, other.LocalOffset)) return false;
    if (DaylightSavings != other.DaylightSavings) return false;
    if (DaylightSavingsStart != other.DaylightSavingsStart) return false;
    if (DaylightSavingsEnd != other.DaylightSavingsEnd) return false;
    if (PollActive != other.PollActive) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
    if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
    if (Longitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Longitude);
    if (Latitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latitude);
    if (LocalOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalOffset);
    if (DaylightSavings != false) hash ^= DaylightSavings.GetHashCode();
    if (DaylightSavingsStart != 0) hash ^= DaylightSavingsStart.GetHashCode();
    if (DaylightSavingsEnd != 0) hash ^= DaylightSavingsEnd.GetHashCode();
    if (PollActive != false) hash ^= PollActive.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceName);
    }
    if (ProjectName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ProjectName);
    }
    if (Longitude != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Longitude);
    }
    if (Latitude != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Latitude);
    }
    if (LocalOffset != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(LocalOffset);
    }
    if (DaylightSavings != false) {
      output.WriteRawTag(56);
      output.WriteBool(DaylightSavings);
    }
    if (DaylightSavingsStart != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(DaylightSavingsStart);
    }
    if (DaylightSavingsEnd != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(DaylightSavingsEnd);
    }
    if (PollActive != false) {
      output.WriteRawTag(80);
      output.WriteBool(PollActive);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
    }
    if (ProjectName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
    }
    if (Longitude != 0F) {
      size += 1 + 4;
    }
    if (Latitude != 0F) {
      size += 1 + 4;
    }
    if (LocalOffset != 0F) {
      size += 1 + 4;
    }
    if (DaylightSavings != false) {
      size += 1 + 1;
    }
    if (DaylightSavingsStart != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DaylightSavingsStart);
    }
    if (DaylightSavingsEnd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DaylightSavingsEnd);
    }
    if (PollActive != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdminProjectPropertiesMessage other) {
    if (other == null) {
      return;
    }
    if (other.DeviceName.Length != 0) {
      DeviceName = other.DeviceName;
    }
    if (other.ProjectName.Length != 0) {
      ProjectName = other.ProjectName;
    }
    if (other.Longitude != 0F) {
      Longitude = other.Longitude;
    }
    if (other.Latitude != 0F) {
      Latitude = other.Latitude;
    }
    if (other.LocalOffset != 0F) {
      LocalOffset = other.LocalOffset;
    }
    if (other.DaylightSavings != false) {
      DaylightSavings = other.DaylightSavings;
    }
    if (other.DaylightSavingsStart != 0) {
      DaylightSavingsStart = other.DaylightSavingsStart;
    }
    if (other.DaylightSavingsEnd != 0) {
      DaylightSavingsEnd = other.DaylightSavingsEnd;
    }
    if (other.PollActive != false) {
      PollActive = other.PollActive;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          DeviceName = input.ReadString();
          break;
        }
        case 26: {
          ProjectName = input.ReadString();
          break;
        }
        case 37: {
          Longitude = input.ReadFloat();
          break;
        }
        case 45: {
          Latitude = input.ReadFloat();
          break;
        }
        case 53: {
          LocalOffset = input.ReadFloat();
          break;
        }
        case 56: {
          DaylightSavings = input.ReadBool();
          break;
        }
        case 64: {
          DaylightSavingsStart = input.ReadUInt32();
          break;
        }
        case 72: {
          DaylightSavingsEnd = input.ReadUInt32();
          break;
        }
        case 80: {
          PollActive = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class AdminConfigStatusMessage : pb::IMessage<AdminConfigStatusMessage> {
  private static readonly pb::MessageParser<AdminConfigStatusMessage> _parser = new pb::MessageParser<AdminConfigStatusMessage>(() => new AdminConfigStatusMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdminConfigStatusMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminConfigStatusMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminConfigStatusMessage(AdminConfigStatusMessage other) : this() {
    listStatus_ = other.listStatus_.Clone();
    burnInStatus_ = other.burnInStatus_.Clone();
    alarmStatus_ = other.alarmStatus_;
    alarmTimeFromReg_ = other.alarmTimeFromReg_ != null ? other.alarmTimeFromReg_.Clone() : null;
    sensorStatus_ = other.sensorStatus_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminConfigStatusMessage Clone() {
    return new AdminConfigStatusMessage(this);
  }

  /// <summary>Field number for the "list_status" field.</summary>
  public const int ListStatusFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_listStatus_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> listStatus_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// State of each List (DISABLED / ENABLED / LOOPING)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ListStatus {
    get { return listStatus_; }
  }

  /// <summary>Field number for the "burn_in_status" field.</summary>
  public const int BurnInStatusFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_burnInStatus_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> burnInStatus_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// State of each Burn-in (RUNNING / NOT RUNNING)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> BurnInStatus {
    get { return burnInStatus_; }
  }

  /// <summary>Field number for the "alarm_status" field.</summary>
  public const int AlarmStatusFieldNumber = 3;
  private uint alarmStatus_;
  /// <summary>
  /// Currently Selected Alarm (i.e. 'next Alarm')
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AlarmStatus {
    get { return alarmStatus_; }
    set {
      alarmStatus_ = value;
    }
  }

  /// <summary>Field number for the "alarm_time_from_reg" field.</summary>
  public const int AlarmTimeFromRegFieldNumber = 4;
  private global::TimeClockMessage alarmTimeFromReg_;
  /// <summary>
  /// Time for next Alarm as per RTC Register
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage AlarmTimeFromReg {
    get { return alarmTimeFromReg_; }
    set {
      alarmTimeFromReg_ = value;
    }
  }

  /// <summary>Field number for the "sensor_status" field.</summary>
  public const int SensorStatusFieldNumber = 5;
  private static readonly pb::FieldCodec<uint> _repeated_sensorStatus_codec
      = pb::FieldCodec.ForUInt32(42);
  private readonly pbc::RepeatedField<uint> sensorStatus_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// State of each Tridonic MSensor (IDLE / DISABLED / WARNING / OCCUPANCY)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> SensorStatus {
    get { return sensorStatus_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdminConfigStatusMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdminConfigStatusMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!listStatus_.Equals(other.listStatus_)) return false;
    if(!burnInStatus_.Equals(other.burnInStatus_)) return false;
    if (AlarmStatus != other.AlarmStatus) return false;
    if (!object.Equals(AlarmTimeFromReg, other.AlarmTimeFromReg)) return false;
    if(!sensorStatus_.Equals(other.sensorStatus_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= listStatus_.GetHashCode();
    hash ^= burnInStatus_.GetHashCode();
    if (AlarmStatus != 0) hash ^= AlarmStatus.GetHashCode();
    if (alarmTimeFromReg_ != null) hash ^= AlarmTimeFromReg.GetHashCode();
    hash ^= sensorStatus_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    listStatus_.WriteTo(output, _repeated_listStatus_codec);
    burnInStatus_.WriteTo(output, _repeated_burnInStatus_codec);
    if (AlarmStatus != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(AlarmStatus);
    }
    if (alarmTimeFromReg_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(AlarmTimeFromReg);
    }
    sensorStatus_.WriteTo(output, _repeated_sensorStatus_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += listStatus_.CalculateSize(_repeated_listStatus_codec);
    size += burnInStatus_.CalculateSize(_repeated_burnInStatus_codec);
    if (AlarmStatus != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AlarmStatus);
    }
    if (alarmTimeFromReg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlarmTimeFromReg);
    }
    size += sensorStatus_.CalculateSize(_repeated_sensorStatus_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdminConfigStatusMessage other) {
    if (other == null) {
      return;
    }
    listStatus_.Add(other.listStatus_);
    burnInStatus_.Add(other.burnInStatus_);
    if (other.AlarmStatus != 0) {
      AlarmStatus = other.AlarmStatus;
    }
    if (other.alarmTimeFromReg_ != null) {
      if (alarmTimeFromReg_ == null) {
        alarmTimeFromReg_ = new global::TimeClockMessage();
      }
      AlarmTimeFromReg.MergeFrom(other.AlarmTimeFromReg);
    }
    sensorStatus_.Add(other.sensorStatus_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          listStatus_.AddEntriesFrom(input, _repeated_listStatus_codec);
          break;
        }
        case 18:
        case 16: {
          burnInStatus_.AddEntriesFrom(input, _repeated_burnInStatus_codec);
          break;
        }
        case 24: {
          AlarmStatus = input.ReadUInt32();
          break;
        }
        case 34: {
          if (alarmTimeFromReg_ == null) {
            alarmTimeFromReg_ = new global::TimeClockMessage();
          }
          input.ReadMessage(alarmTimeFromReg_);
          break;
        }
        case 42:
        case 40: {
          sensorStatus_.AddEntriesFrom(input, _repeated_sensorStatus_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AdminNetworkPropertiesMessage : pb::IMessage<AdminNetworkPropertiesMessage> {
  private static readonly pb::MessageParser<AdminNetworkPropertiesMessage> _parser = new pb::MessageParser<AdminNetworkPropertiesMessage>(() => new AdminNetworkPropertiesMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdminNetworkPropertiesMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminNetworkPropertiesMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminNetworkPropertiesMessage(AdminNetworkPropertiesMessage other) : this() {
    dHCP_ = other.dHCP_;
    iP_ = other.iP_;
    mAC_ = other.mAC_;
    gateway_ = other.gateway_;
    nTPServer_ = other.nTPServer_;
    nTP_ = other.nTP_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminNetworkPropertiesMessage Clone() {
    return new AdminNetworkPropertiesMessage(this);
  }

  /// <summary>Field number for the "DHCP" field.</summary>
  public const int DHCPFieldNumber = 1;
  private bool dHCP_;
  /// <summary>
  /// Should DHCP be used? If False, the static IP will be used instead
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DHCP {
    get { return dHCP_; }
    set {
      dHCP_ = value;
    }
  }

  /// <summary>Field number for the "IP" field.</summary>
  public const int IPFieldNumber = 2;
  private string iP_ = "";
  /// <summary>
  /// A static IP to use if DHCP is False
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IP {
    get { return iP_; }
    set {
      iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "MAC" field.</summary>
  public const int MACFieldNumber = 3;
  private string mAC_ = "";
  /// <summary>
  /// The MAC Address of this Device
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MAC {
    get { return mAC_; }
    set {
      mAC_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gateway" field.</summary>
  public const int GatewayFieldNumber = 4;
  private string gateway_ = "";
  /// <summary>
  /// The Gateway IP for the network this Device is on
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Gateway {
    get { return gateway_; }
    set {
      gateway_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "NTPServer" field.</summary>
  public const int NTPServerFieldNumber = 5;
  private string nTPServer_ = "";
  /// <summary>
  /// The NTP Server address from RTC updates over the network
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NTPServer {
    get { return nTPServer_; }
    set {
      nTPServer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "NTP" field.</summary>
  public const int NTPFieldNumber = 6;
  private bool nTP_;
  /// <summary>
  /// Should NTP be used to keep the RTC up-to-date via network requests
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool NTP {
    get { return nTP_; }
    set {
      nTP_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdminNetworkPropertiesMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdminNetworkPropertiesMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DHCP != other.DHCP) return false;
    if (IP != other.IP) return false;
    if (MAC != other.MAC) return false;
    if (Gateway != other.Gateway) return false;
    if (NTPServer != other.NTPServer) return false;
    if (NTP != other.NTP) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DHCP != false) hash ^= DHCP.GetHashCode();
    if (IP.Length != 0) hash ^= IP.GetHashCode();
    if (MAC.Length != 0) hash ^= MAC.GetHashCode();
    if (Gateway.Length != 0) hash ^= Gateway.GetHashCode();
    if (NTPServer.Length != 0) hash ^= NTPServer.GetHashCode();
    if (NTP != false) hash ^= NTP.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DHCP != false) {
      output.WriteRawTag(8);
      output.WriteBool(DHCP);
    }
    if (IP.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(IP);
    }
    if (MAC.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MAC);
    }
    if (Gateway.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Gateway);
    }
    if (NTPServer.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(NTPServer);
    }
    if (NTP != false) {
      output.WriteRawTag(48);
      output.WriteBool(NTP);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DHCP != false) {
      size += 1 + 1;
    }
    if (IP.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
    }
    if (MAC.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MAC);
    }
    if (Gateway.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Gateway);
    }
    if (NTPServer.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NTPServer);
    }
    if (NTP != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdminNetworkPropertiesMessage other) {
    if (other == null) {
      return;
    }
    if (other.DHCP != false) {
      DHCP = other.DHCP;
    }
    if (other.IP.Length != 0) {
      IP = other.IP;
    }
    if (other.MAC.Length != 0) {
      MAC = other.MAC;
    }
    if (other.Gateway.Length != 0) {
      Gateway = other.Gateway;
    }
    if (other.NTPServer.Length != 0) {
      NTPServer = other.NTPServer;
    }
    if (other.NTP != false) {
      NTP = other.NTP;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DHCP = input.ReadBool();
          break;
        }
        case 18: {
          IP = input.ReadString();
          break;
        }
        case 26: {
          MAC = input.ReadString();
          break;
        }
        case 34: {
          Gateway = input.ReadString();
          break;
        }
        case 42: {
          NTPServer = input.ReadString();
          break;
        }
        case 48: {
          NTP = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class AdminControllerLinesMessage : pb::IMessage<AdminControllerLinesMessage> {
  private static readonly pb::MessageParser<AdminControllerLinesMessage> _parser = new pb::MessageParser<AdminControllerLinesMessage>(() => new AdminControllerLinesMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdminControllerLinesMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminControllerLinesMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminControllerLinesMessage(AdminControllerLinesMessage other) : this() {
    lines_ = other.lines_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminControllerLinesMessage Clone() {
    return new AdminControllerLinesMessage(this);
  }

  /// <summary>Field number for the "lines" field.</summary>
  public const int LinesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::LineType> _repeated_lines_codec
      = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::LineType) x);
  private readonly pbc::RepeatedField<global::LineType> lines_ = new pbc::RepeatedField<global::LineType>();
  /// <summary>
  /// Used to set the control type on each control line (e.g. DMX / DALI)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LineType> Lines {
    get { return lines_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdminControllerLinesMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdminControllerLinesMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!lines_.Equals(other.lines_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= lines_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    lines_.WriteTo(output, _repeated_lines_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += lines_.CalculateSize(_repeated_lines_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdminControllerLinesMessage other) {
    if (other == null) {
      return;
    }
    lines_.Add(other.lines_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          lines_.AddEntriesFrom(input, _repeated_lines_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AdminDeviceStatusMessage : pb::IMessage<AdminDeviceStatusMessage> {
  private static readonly pb::MessageParser<AdminDeviceStatusMessage> _parser = new pb::MessageParser<AdminDeviceStatusMessage>(() => new AdminDeviceStatusMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdminDeviceStatusMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminDeviceStatusMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminDeviceStatusMessage(AdminDeviceStatusMessage other) : this() {
    temperature_ = other.temperature_;
    battery_ = other.battery_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminDeviceStatusMessage Clone() {
    return new AdminDeviceStatusMessage(this);
  }

  /// <summary>Field number for the "temperature" field.</summary>
  public const int TemperatureFieldNumber = 1;
  private float temperature_;
  /// <summary>
  /// The current device chip temperature
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Temperature {
    get { return temperature_; }
    set {
      temperature_ = value;
    }
  }

  /// <summary>Field number for the "battery" field.</summary>
  public const int BatteryFieldNumber = 2;
  private float battery_;
  /// <summary>
  /// The current battery voltage (3.3V battery)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Battery {
    get { return battery_; }
    set {
      battery_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdminDeviceStatusMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdminDeviceStatusMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Battery, other.Battery)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
    if (Battery != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Battery);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Temperature != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Temperature);
    }
    if (Battery != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Battery);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Temperature != 0F) {
      size += 1 + 4;
    }
    if (Battery != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdminDeviceStatusMessage other) {
    if (other == null) {
      return;
    }
    if (other.Temperature != 0F) {
      Temperature = other.Temperature;
    }
    if (other.Battery != 0F) {
      Battery = other.Battery;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Temperature = input.ReadFloat();
          break;
        }
        case 21: {
          Battery = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class AdminSecureLoginMessage : pb::IMessage<AdminSecureLoginMessage> {
  private static readonly pb::MessageParser<AdminSecureLoginMessage> _parser = new pb::MessageParser<AdminSecureLoginMessage>(() => new AdminSecureLoginMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdminSecureLoginMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminSecureLoginMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminSecureLoginMessage(AdminSecureLoginMessage other) : this() {
    username_ = other.username_;
    cnonce_ = other.cnonce_;
    hash_ = other.hash_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminSecureLoginMessage Clone() {
    return new AdminSecureLoginMessage(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  /// <summary>
  /// Which username to login as
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "cnonce" field.</summary>
  public const int CnonceFieldNumber = 2;
  private string cnonce_ = "";
  /// <summary>
  /// The nonce generated by the client attempting to login
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Cnonce {
    get { return cnonce_; }
    set {
      cnonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hash" field.</summary>
  public const int HashFieldNumber = 3;
  private static readonly pb::FieldCodec<uint> _repeated_hash_codec
      = pb::FieldCodec.ForUInt32(26);
  private readonly pbc::RepeatedField<uint> hash_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// The hash of the server nonce + client nonce + client password, encrypted using AES CTR
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Hash {
    get { return hash_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdminSecureLoginMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdminSecureLoginMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Cnonce != other.Cnonce) return false;
    if(!hash_.Equals(other.hash_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Cnonce.Length != 0) hash ^= Cnonce.GetHashCode();
    hash ^= hash_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Cnonce.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Cnonce);
    }
    hash_.WriteTo(output, _repeated_hash_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Cnonce.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Cnonce);
    }
    size += hash_.CalculateSize(_repeated_hash_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdminSecureLoginMessage other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Cnonce.Length != 0) {
      Cnonce = other.Cnonce;
    }
    hash_.Add(other.hash_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Cnonce = input.ReadString();
          break;
        }
        case 26:
        case 24: {
          hash_.AddEntriesFrom(input, _repeated_hash_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AdminDALISensorTypeMessage : pb::IMessage<AdminDALISensorTypeMessage> {
  private static readonly pb::MessageParser<AdminDALISensorTypeMessage> _parser = new pb::MessageParser<AdminDALISensorTypeMessage>(() => new AdminDALISensorTypeMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdminDALISensorTypeMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminDALISensorTypeMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminDALISensorTypeMessage(AdminDALISensorTypeMessage other) : this() {
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminDALISensorTypeMessage Clone() {
    return new AdminDALISensorTypeMessage(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::DALISensorType type_ = 0;
  /// <summary>
  /// Which type of eDALI will the eDIDIO use to decode &amp; encode Sensor packets?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALISensorType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdminDALISensorTypeMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdminDALISensorTypeMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdminDALISensorTypeMessage other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::DALISensorType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class AdminMessage : pb::IMessage<AdminMessage> {
  private static readonly pb::MessageParser<AdminMessage> _parser = new pb::MessageParser<AdminMessage>(() => new AdminMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdminMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminMessage(AdminMessage other) : this() {
    command_ = other.command_;
    target_ = other.target_;
    switch (other.PayloadCase) {
      case PayloadOneofCase.Data:
        Data = other.Data.Clone();
        break;
      case PayloadOneofCase.NetworkProperties:
        NetworkProperties = other.NetworkProperties.Clone();
        break;
      case PayloadOneofCase.ProjectProperties:
        ProjectProperties = other.ProjectProperties.Clone();
        break;
      case PayloadOneofCase.ControllerLines:
        ControllerLines = other.ControllerLines.Clone();
        break;
      case PayloadOneofCase.DeviceStatus:
        DeviceStatus = other.DeviceStatus.Clone();
        break;
      case PayloadOneofCase.ConfigStatus:
        ConfigStatus = other.ConfigStatus.Clone();
        break;
      case PayloadOneofCase.DeviceTime:
        DeviceTime = other.DeviceTime.Clone();
        break;
      case PayloadOneofCase.DaliSensorType:
        DaliSensorType = other.DaliSensorType.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdminMessage Clone() {
    return new AdminMessage(this);
  }

  /// <summary>Field number for the "command" field.</summary>
  public const int CommandFieldNumber = 1;
  private global::AdminCommandType command_ = 0;
  /// <summary>
  /// What type of Command to run (GET / SET / etc.)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminCommandType Command {
    get { return command_; }
    set {
      command_ = value;
    }
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 2;
  private global::AdminPropertyType target_ = 0;
  /// <summary>
  /// Which property to run the Command on
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminPropertyType Target {
    get { return target_; }
    set {
      target_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PayloadMessage Data {
    get { return payloadCase_ == PayloadOneofCase.Data ? (global::PayloadMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Data;
    }
  }

  /// <summary>Field number for the "network_properties" field.</summary>
  public const int NetworkPropertiesFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminNetworkPropertiesMessage NetworkProperties {
    get { return payloadCase_ == PayloadOneofCase.NetworkProperties ? (global::AdminNetworkPropertiesMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.NetworkProperties;
    }
  }

  /// <summary>Field number for the "project_properties" field.</summary>
  public const int ProjectPropertiesFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminProjectPropertiesMessage ProjectProperties {
    get { return payloadCase_ == PayloadOneofCase.ProjectProperties ? (global::AdminProjectPropertiesMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ProjectProperties;
    }
  }

  /// <summary>Field number for the "controller_lines" field.</summary>
  public const int ControllerLinesFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminControllerLinesMessage ControllerLines {
    get { return payloadCase_ == PayloadOneofCase.ControllerLines ? (global::AdminControllerLinesMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ControllerLines;
    }
  }

  /// <summary>Field number for the "device_status" field.</summary>
  public const int DeviceStatusFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminDeviceStatusMessage DeviceStatus {
    get { return payloadCase_ == PayloadOneofCase.DeviceStatus ? (global::AdminDeviceStatusMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DeviceStatus;
    }
  }

  /// <summary>Field number for the "config_status" field.</summary>
  public const int ConfigStatusFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminConfigStatusMessage ConfigStatus {
    get { return payloadCase_ == PayloadOneofCase.ConfigStatus ? (global::AdminConfigStatusMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ConfigStatus;
    }
  }

  /// <summary>Field number for the "device_time" field.</summary>
  public const int DeviceTimeFieldNumber = 9;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateTimeMessage DeviceTime {
    get { return payloadCase_ == PayloadOneofCase.DeviceTime ? (global::UpdateTimeMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DeviceTime;
    }
  }

  /// <summary>Field number for the "dali_sensor_type" field.</summary>
  public const int DaliSensorTypeFieldNumber = 10;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminDALISensorTypeMessage DaliSensorType {
    get { return payloadCase_ == PayloadOneofCase.DaliSensorType ? (global::AdminDALISensorTypeMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DaliSensorType;
    }
  }

  private object payload_;
  /// <summary>Enum of possible cases for the "payload" oneof.</summary>
  public enum PayloadOneofCase {
    None = 0,
    Data = 3,
    NetworkProperties = 4,
    ProjectProperties = 5,
    ControllerLines = 6,
    DeviceStatus = 7,
    ConfigStatus = 8,
    DeviceTime = 9,
    DaliSensorType = 10,
  }
  private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadOneofCase PayloadCase {
    get { return payloadCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payloadCase_ = PayloadOneofCase.None;
    payload_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdminMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdminMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Command != other.Command) return false;
    if (Target != other.Target) return false;
    if (!object.Equals(Data, other.Data)) return false;
    if (!object.Equals(NetworkProperties, other.NetworkProperties)) return false;
    if (!object.Equals(ProjectProperties, other.ProjectProperties)) return false;
    if (!object.Equals(ControllerLines, other.ControllerLines)) return false;
    if (!object.Equals(DeviceStatus, other.DeviceStatus)) return false;
    if (!object.Equals(ConfigStatus, other.ConfigStatus)) return false;
    if (!object.Equals(DeviceTime, other.DeviceTime)) return false;
    if (!object.Equals(DaliSensorType, other.DaliSensorType)) return false;
    if (PayloadCase != other.PayloadCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Command != 0) hash ^= Command.GetHashCode();
    if (Target != 0) hash ^= Target.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Data) hash ^= Data.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.NetworkProperties) hash ^= NetworkProperties.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.ProjectProperties) hash ^= ProjectProperties.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.ControllerLines) hash ^= ControllerLines.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DeviceStatus) hash ^= DeviceStatus.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.ConfigStatus) hash ^= ConfigStatus.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DeviceTime) hash ^= DeviceTime.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DaliSensorType) hash ^= DaliSensorType.GetHashCode();
    hash ^= (int) payloadCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Command != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Command);
    }
    if (Target != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Target);
    }
    if (payloadCase_ == PayloadOneofCase.Data) {
      output.WriteRawTag(26);
      output.WriteMessage(Data);
    }
    if (payloadCase_ == PayloadOneofCase.NetworkProperties) {
      output.WriteRawTag(34);
      output.WriteMessage(NetworkProperties);
    }
    if (payloadCase_ == PayloadOneofCase.ProjectProperties) {
      output.WriteRawTag(42);
      output.WriteMessage(ProjectProperties);
    }
    if (payloadCase_ == PayloadOneofCase.ControllerLines) {
      output.WriteRawTag(50);
      output.WriteMessage(ControllerLines);
    }
    if (payloadCase_ == PayloadOneofCase.DeviceStatus) {
      output.WriteRawTag(58);
      output.WriteMessage(DeviceStatus);
    }
    if (payloadCase_ == PayloadOneofCase.ConfigStatus) {
      output.WriteRawTag(66);
      output.WriteMessage(ConfigStatus);
    }
    if (payloadCase_ == PayloadOneofCase.DeviceTime) {
      output.WriteRawTag(74);
      output.WriteMessage(DeviceTime);
    }
    if (payloadCase_ == PayloadOneofCase.DaliSensorType) {
      output.WriteRawTag(82);
      output.WriteMessage(DaliSensorType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Command != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
    }
    if (Target != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Target);
    }
    if (payloadCase_ == PayloadOneofCase.Data) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
    }
    if (payloadCase_ == PayloadOneofCase.NetworkProperties) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkProperties);
    }
    if (payloadCase_ == PayloadOneofCase.ProjectProperties) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProjectProperties);
    }
    if (payloadCase_ == PayloadOneofCase.ControllerLines) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControllerLines);
    }
    if (payloadCase_ == PayloadOneofCase.DeviceStatus) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceStatus);
    }
    if (payloadCase_ == PayloadOneofCase.ConfigStatus) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigStatus);
    }
    if (payloadCase_ == PayloadOneofCase.DeviceTime) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceTime);
    }
    if (payloadCase_ == PayloadOneofCase.DaliSensorType) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DaliSensorType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdminMessage other) {
    if (other == null) {
      return;
    }
    if (other.Command != 0) {
      Command = other.Command;
    }
    if (other.Target != 0) {
      Target = other.Target;
    }
    switch (other.PayloadCase) {
      case PayloadOneofCase.Data:
        if (Data == null) {
          Data = new global::PayloadMessage();
        }
        Data.MergeFrom(other.Data);
        break;
      case PayloadOneofCase.NetworkProperties:
        if (NetworkProperties == null) {
          NetworkProperties = new global::AdminNetworkPropertiesMessage();
        }
        NetworkProperties.MergeFrom(other.NetworkProperties);
        break;
      case PayloadOneofCase.ProjectProperties:
        if (ProjectProperties == null) {
          ProjectProperties = new global::AdminProjectPropertiesMessage();
        }
        ProjectProperties.MergeFrom(other.ProjectProperties);
        break;
      case PayloadOneofCase.ControllerLines:
        if (ControllerLines == null) {
          ControllerLines = new global::AdminControllerLinesMessage();
        }
        ControllerLines.MergeFrom(other.ControllerLines);
        break;
      case PayloadOneofCase.DeviceStatus:
        if (DeviceStatus == null) {
          DeviceStatus = new global::AdminDeviceStatusMessage();
        }
        DeviceStatus.MergeFrom(other.DeviceStatus);
        break;
      case PayloadOneofCase.ConfigStatus:
        if (ConfigStatus == null) {
          ConfigStatus = new global::AdminConfigStatusMessage();
        }
        ConfigStatus.MergeFrom(other.ConfigStatus);
        break;
      case PayloadOneofCase.DeviceTime:
        if (DeviceTime == null) {
          DeviceTime = new global::UpdateTimeMessage();
        }
        DeviceTime.MergeFrom(other.DeviceTime);
        break;
      case PayloadOneofCase.DaliSensorType:
        if (DaliSensorType == null) {
          DaliSensorType = new global::AdminDALISensorTypeMessage();
        }
        DaliSensorType.MergeFrom(other.DaliSensorType);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          command_ = (global::AdminCommandType) input.ReadEnum();
          break;
        }
        case 16: {
          target_ = (global::AdminPropertyType) input.ReadEnum();
          break;
        }
        case 26: {
          global::PayloadMessage subBuilder = new global::PayloadMessage();
          if (payloadCase_ == PayloadOneofCase.Data) {
            subBuilder.MergeFrom(Data);
          }
          input.ReadMessage(subBuilder);
          Data = subBuilder;
          break;
        }
        case 34: {
          global::AdminNetworkPropertiesMessage subBuilder = new global::AdminNetworkPropertiesMessage();
          if (payloadCase_ == PayloadOneofCase.NetworkProperties) {
            subBuilder.MergeFrom(NetworkProperties);
          }
          input.ReadMessage(subBuilder);
          NetworkProperties = subBuilder;
          break;
        }
        case 42: {
          global::AdminProjectPropertiesMessage subBuilder = new global::AdminProjectPropertiesMessage();
          if (payloadCase_ == PayloadOneofCase.ProjectProperties) {
            subBuilder.MergeFrom(ProjectProperties);
          }
          input.ReadMessage(subBuilder);
          ProjectProperties = subBuilder;
          break;
        }
        case 50: {
          global::AdminControllerLinesMessage subBuilder = new global::AdminControllerLinesMessage();
          if (payloadCase_ == PayloadOneofCase.ControllerLines) {
            subBuilder.MergeFrom(ControllerLines);
          }
          input.ReadMessage(subBuilder);
          ControllerLines = subBuilder;
          break;
        }
        case 58: {
          global::AdminDeviceStatusMessage subBuilder = new global::AdminDeviceStatusMessage();
          if (payloadCase_ == PayloadOneofCase.DeviceStatus) {
            subBuilder.MergeFrom(DeviceStatus);
          }
          input.ReadMessage(subBuilder);
          DeviceStatus = subBuilder;
          break;
        }
        case 66: {
          global::AdminConfigStatusMessage subBuilder = new global::AdminConfigStatusMessage();
          if (payloadCase_ == PayloadOneofCase.ConfigStatus) {
            subBuilder.MergeFrom(ConfigStatus);
          }
          input.ReadMessage(subBuilder);
          ConfigStatus = subBuilder;
          break;
        }
        case 74: {
          global::UpdateTimeMessage subBuilder = new global::UpdateTimeMessage();
          if (payloadCase_ == PayloadOneofCase.DeviceTime) {
            subBuilder.MergeFrom(DeviceTime);
          }
          input.ReadMessage(subBuilder);
          DeviceTime = subBuilder;
          break;
        }
        case 82: {
          global::AdminDALISensorTypeMessage subBuilder = new global::AdminDALISensorTypeMessage();
          if (payloadCase_ == PayloadOneofCase.DaliSensorType) {
            subBuilder.MergeFrom(DaliSensorType);
          }
          input.ReadMessage(subBuilder);
          DaliSensorType = subBuilder;
          break;
        }
      }
    }
  }

}

/// <summary>
/// Simple free-form binary data blob that can be used for chunk transfer.
/// </summary>
public sealed partial class DataMessage : pb::IMessage<DataMessage> {
  private static readonly pb::MessageParser<DataMessage> _parser = new pb::MessageParser<DataMessage>(() => new DataMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DataMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataMessage(DataMessage other) : this() {
    identifier_ = other.identifier_;
    seq_ = other.seq_;
    count_ = other.count_;
    data_ = other.data_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DataMessage Clone() {
    return new DataMessage(this);
  }

  /// <summary>Field number for the "identifier" field.</summary>
  public const int IdentifierFieldNumber = 1;
  private uint identifier_;
  /// <summary>
  /// A free-form number that indicates exactly what type of data is being dealt with. Eg. 0x99 may indicate a firmware flash.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Identifier {
    get { return identifier_; }
    set {
      identifier_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  /// <summary>
  /// The message position in the sequence.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 3;
  private uint count_;
  /// <summary>
  /// The expected total number of DataMessages to be sent. When seq == count, you know you've got the last chunk and can go ahead and process the data (eg. flash firmware).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_data_codec
      = pb::FieldCodec.ForUInt32(34);
  private readonly pbc::RepeatedField<uint> data_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DataMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DataMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Identifier != other.Identifier) return false;
    if (Seq != other.Seq) return false;
    if (Count != other.Count) return false;
    if(!data_.Equals(other.data_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Identifier != 0) hash ^= Identifier.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    hash ^= data_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Identifier != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Identifier);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (Count != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Count);
    }
    data_.WriteTo(output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Identifier != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Identifier);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
    }
    size += data_.CalculateSize(_repeated_data_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DataMessage other) {
    if (other == null) {
      return;
    }
    if (other.Identifier != 0) {
      Identifier = other.Identifier;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    data_.Add(other.data_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Identifier = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
        case 24: {
          Count = input.ReadUInt32();
          break;
        }
        case 34:
        case 32: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class FirmwareMetaMessage : pb::IMessage<FirmwareMetaMessage> {
  private static readonly pb::MessageParser<FirmwareMetaMessage> _parser = new pb::MessageParser<FirmwareMetaMessage>(() => new FirmwareMetaMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FirmwareMetaMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirmwareMetaMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirmwareMetaMessage(FirmwareMetaMessage other) : this() {
    firmwareVersion_ = other.firmwareVersion_;
    firmwareDate_ = other.firmwareDate_;
    firmwareDateUpload_ = other.firmwareDateUpload_;
    firmwareChecksum_ = other.firmwareChecksum_;
    firmwareChunkCount_ = other.firmwareChunkCount_;
    firmwareBaseAddress_ = other.firmwareBaseAddress_;
    firmwareEndAddress_ = other.firmwareEndAddress_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirmwareMetaMessage Clone() {
    return new FirmwareMetaMessage(this);
  }

  /// <summary>Field number for the "firmware_version" field.</summary>
  public const int FirmwareVersionFieldNumber = 1;
  private uint firmwareVersion_;
  /// <summary>
  /// WARNING - Will Erase Stored Firmware
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FirmwareVersion {
    get { return firmwareVersion_; }
    set {
      firmwareVersion_ = value;
    }
  }

  /// <summary>Field number for the "firmware_date" field.</summary>
  public const int FirmwareDateFieldNumber = 2;
  private uint firmwareDate_;
  /// <summary>
  /// Day/Month/Year Compiled
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FirmwareDate {
    get { return firmwareDate_; }
    set {
      firmwareDate_ = value;
    }
  }

  /// <summary>Field number for the "firmware_date_upload" field.</summary>
  public const int FirmwareDateUploadFieldNumber = 3;
  private uint firmwareDateUpload_;
  /// <summary>
  /// Day/Month/Year Uploaded
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FirmwareDateUpload {
    get { return firmwareDateUpload_; }
    set {
      firmwareDateUpload_ = value;
    }
  }

  /// <summary>Field number for the "firmware_checksum" field.</summary>
  public const int FirmwareChecksumFieldNumber = 4;
  private uint firmwareChecksum_;
  /// <summary>
  /// Checksum to verify data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FirmwareChecksum {
    get { return firmwareChecksum_; }
    set {
      firmwareChecksum_ = value;
    }
  }

  /// <summary>Field number for the "firmware_chunk_count" field.</summary>
  public const int FirmwareChunkCountFieldNumber = 5;
  private uint firmwareChunkCount_;
  /// <summary>
  /// Number of stored chunks
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FirmwareChunkCount {
    get { return firmwareChunkCount_; }
    set {
      firmwareChunkCount_ = value;
    }
  }

  /// <summary>Field number for the "firmware_base_address" field.</summary>
  public const int FirmwareBaseAddressFieldNumber = 6;
  private uint firmwareBaseAddress_;
  /// <summary>
  /// Base Address of the Firmware
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FirmwareBaseAddress {
    get { return firmwareBaseAddress_; }
    set {
      firmwareBaseAddress_ = value;
    }
  }

  /// <summary>Field number for the "firmware_end_address" field.</summary>
  public const int FirmwareEndAddressFieldNumber = 7;
  private uint firmwareEndAddress_;
  /// <summary>
  /// End Address - For sector erases
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FirmwareEndAddress {
    get { return firmwareEndAddress_; }
    set {
      firmwareEndAddress_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FirmwareMetaMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FirmwareMetaMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FirmwareVersion != other.FirmwareVersion) return false;
    if (FirmwareDate != other.FirmwareDate) return false;
    if (FirmwareDateUpload != other.FirmwareDateUpload) return false;
    if (FirmwareChecksum != other.FirmwareChecksum) return false;
    if (FirmwareChunkCount != other.FirmwareChunkCount) return false;
    if (FirmwareBaseAddress != other.FirmwareBaseAddress) return false;
    if (FirmwareEndAddress != other.FirmwareEndAddress) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FirmwareVersion != 0) hash ^= FirmwareVersion.GetHashCode();
    if (FirmwareDate != 0) hash ^= FirmwareDate.GetHashCode();
    if (FirmwareDateUpload != 0) hash ^= FirmwareDateUpload.GetHashCode();
    if (FirmwareChecksum != 0) hash ^= FirmwareChecksum.GetHashCode();
    if (FirmwareChunkCount != 0) hash ^= FirmwareChunkCount.GetHashCode();
    if (FirmwareBaseAddress != 0) hash ^= FirmwareBaseAddress.GetHashCode();
    if (FirmwareEndAddress != 0) hash ^= FirmwareEndAddress.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FirmwareVersion != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(FirmwareVersion);
    }
    if (FirmwareDate != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(FirmwareDate);
    }
    if (FirmwareDateUpload != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(FirmwareDateUpload);
    }
    if (FirmwareChecksum != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(FirmwareChecksum);
    }
    if (FirmwareChunkCount != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(FirmwareChunkCount);
    }
    if (FirmwareBaseAddress != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(FirmwareBaseAddress);
    }
    if (FirmwareEndAddress != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(FirmwareEndAddress);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FirmwareVersion != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirmwareVersion);
    }
    if (FirmwareDate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirmwareDate);
    }
    if (FirmwareDateUpload != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirmwareDateUpload);
    }
    if (FirmwareChecksum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirmwareChecksum);
    }
    if (FirmwareChunkCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirmwareChunkCount);
    }
    if (FirmwareBaseAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirmwareBaseAddress);
    }
    if (FirmwareEndAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirmwareEndAddress);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FirmwareMetaMessage other) {
    if (other == null) {
      return;
    }
    if (other.FirmwareVersion != 0) {
      FirmwareVersion = other.FirmwareVersion;
    }
    if (other.FirmwareDate != 0) {
      FirmwareDate = other.FirmwareDate;
    }
    if (other.FirmwareDateUpload != 0) {
      FirmwareDateUpload = other.FirmwareDateUpload;
    }
    if (other.FirmwareChecksum != 0) {
      FirmwareChecksum = other.FirmwareChecksum;
    }
    if (other.FirmwareChunkCount != 0) {
      FirmwareChunkCount = other.FirmwareChunkCount;
    }
    if (other.FirmwareBaseAddress != 0) {
      FirmwareBaseAddress = other.FirmwareBaseAddress;
    }
    if (other.FirmwareEndAddress != 0) {
      FirmwareEndAddress = other.FirmwareEndAddress;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FirmwareVersion = input.ReadUInt32();
          break;
        }
        case 16: {
          FirmwareDate = input.ReadUInt32();
          break;
        }
        case 24: {
          FirmwareDateUpload = input.ReadUInt32();
          break;
        }
        case 32: {
          FirmwareChecksum = input.ReadUInt32();
          break;
        }
        case 40: {
          FirmwareChunkCount = input.ReadUInt32();
          break;
        }
        case 48: {
          FirmwareBaseAddress = input.ReadUInt32();
          break;
        }
        case 56: {
          FirmwareEndAddress = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Reply from eDIDIO, or command from program. eDIDIO will check firmware before 'Apply'
/// </summary>
public sealed partial class FirmwareControlMessage : pb::IMessage<FirmwareControlMessage> {
  private static readonly pb::MessageParser<FirmwareControlMessage> _parser = new pb::MessageParser<FirmwareControlMessage>(() => new FirmwareControlMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FirmwareControlMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirmwareControlMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirmwareControlMessage(FirmwareControlMessage other) : this() {
    cmd_ = other.cmd_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirmwareControlMessage Clone() {
    return new FirmwareControlMessage(this);
  }

  /// <summary>Field number for the "cmd" field.</summary>
  public const int CmdFieldNumber = 1;
  private global::FirmwareCommandType cmd_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FirmwareCommandType Cmd {
    get { return cmd_; }
    set {
      cmd_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FirmwareControlMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FirmwareControlMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Cmd != other.Cmd) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Cmd != 0) hash ^= Cmd.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Cmd != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Cmd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Cmd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FirmwareControlMessage other) {
    if (other == null) {
      return;
    }
    if (other.Cmd != 0) {
      Cmd = other.Cmd;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          cmd_ = (global::FirmwareCommandType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class FirmwareChunkMessage : pb::IMessage<FirmwareChunkMessage> {
  private static readonly pb::MessageParser<FirmwareChunkMessage> _parser = new pb::MessageParser<FirmwareChunkMessage>(() => new FirmwareChunkMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FirmwareChunkMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirmwareChunkMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirmwareChunkMessage(FirmwareChunkMessage other) : this() {
    firmwareAddress_ = other.firmwareAddress_;
    totalBytes_ = other.totalBytes_;
    payload_ = other.payload_ != null ? other.payload_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirmwareChunkMessage Clone() {
    return new FirmwareChunkMessage(this);
  }

  /// <summary>Field number for the "firmware_address" field.</summary>
  public const int FirmwareAddressFieldNumber = 1;
  private uint firmwareAddress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FirmwareAddress {
    get { return firmwareAddress_; }
    set {
      firmwareAddress_ = value;
    }
  }

  /// <summary>Field number for the "total_bytes" field.</summary>
  public const int TotalBytesFieldNumber = 2;
  private uint totalBytes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TotalBytes {
    get { return totalBytes_; }
    set {
      totalBytes_ = value;
    }
  }

  /// <summary>Field number for the "payload" field.</summary>
  public const int PayloadFieldNumber = 3;
  private global::DataMessage payload_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataMessage Payload {
    get { return payload_; }
    set {
      payload_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FirmwareChunkMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FirmwareChunkMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FirmwareAddress != other.FirmwareAddress) return false;
    if (TotalBytes != other.TotalBytes) return false;
    if (!object.Equals(Payload, other.Payload)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FirmwareAddress != 0) hash ^= FirmwareAddress.GetHashCode();
    if (TotalBytes != 0) hash ^= TotalBytes.GetHashCode();
    if (payload_ != null) hash ^= Payload.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FirmwareAddress != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(FirmwareAddress);
    }
    if (TotalBytes != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TotalBytes);
    }
    if (payload_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Payload);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FirmwareAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FirmwareAddress);
    }
    if (TotalBytes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalBytes);
    }
    if (payload_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FirmwareChunkMessage other) {
    if (other == null) {
      return;
    }
    if (other.FirmwareAddress != 0) {
      FirmwareAddress = other.FirmwareAddress;
    }
    if (other.TotalBytes != 0) {
      TotalBytes = other.TotalBytes;
    }
    if (other.payload_ != null) {
      if (payload_ == null) {
        payload_ = new global::DataMessage();
      }
      Payload.MergeFrom(other.Payload);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FirmwareAddress = input.ReadUInt32();
          break;
        }
        case 16: {
          TotalBytes = input.ReadUInt32();
          break;
        }
        case 26: {
          if (payload_ == null) {
            payload_ = new global::DataMessage();
          }
          input.ReadMessage(payload_);
          break;
        }
      }
    }
  }

}

/// <summary>
///**** Log Read ****
/// </summary>
public sealed partial class SystemLogReadMessage : pb::IMessage<SystemLogReadMessage> {
  private static readonly pb::MessageParser<SystemLogReadMessage> _parser = new pb::MessageParser<SystemLogReadMessage>(() => new SystemLogReadMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemLogReadMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogReadMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogReadMessage(SystemLogReadMessage other) : this() {
    logStartAddress_ = other.logStartAddress_;
    logsRequested_ = other.logsRequested_;
    logs_ = other.logs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogReadMessage Clone() {
    return new SystemLogReadMessage(this);
  }

  /// <summary>Field number for the "log_start_address" field.</summary>
  public const int LogStartAddressFieldNumber = 1;
  private uint logStartAddress_;
  /// <summary>
  /// Which log to start from
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LogStartAddress {
    get { return logStartAddress_; }
    set {
      logStartAddress_ = value;
    }
  }

  /// <summary>Field number for the "logs_requested" field.</summary>
  public const int LogsRequestedFieldNumber = 2;
  private uint logsRequested_;
  /// <summary>
  /// How many logs requested? Max of 32
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LogsRequested {
    get { return logsRequested_; }
    set {
      logsRequested_ = value;
    }
  }

  /// <summary>Field number for the "logs" field.</summary>
  public const int LogsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::SystemLogMessage> _repeated_logs_codec
      = pb::FieldCodec.ForMessage(26, global::SystemLogMessage.Parser);
  private readonly pbc::RepeatedField<global::SystemLogMessage> logs_ = new pbc::RepeatedField<global::SystemLogMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SystemLogMessage> Logs {
    get { return logs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemLogReadMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemLogReadMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LogStartAddress != other.LogStartAddress) return false;
    if (LogsRequested != other.LogsRequested) return false;
    if(!logs_.Equals(other.logs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LogStartAddress != 0) hash ^= LogStartAddress.GetHashCode();
    if (LogsRequested != 0) hash ^= LogsRequested.GetHashCode();
    hash ^= logs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LogStartAddress != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(LogStartAddress);
    }
    if (LogsRequested != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(LogsRequested);
    }
    logs_.WriteTo(output, _repeated_logs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LogStartAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogStartAddress);
    }
    if (LogsRequested != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogsRequested);
    }
    size += logs_.CalculateSize(_repeated_logs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemLogReadMessage other) {
    if (other == null) {
      return;
    }
    if (other.LogStartAddress != 0) {
      LogStartAddress = other.LogStartAddress;
    }
    if (other.LogsRequested != 0) {
      LogsRequested = other.LogsRequested;
    }
    logs_.Add(other.logs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LogStartAddress = input.ReadUInt32();
          break;
        }
        case 16: {
          LogsRequested = input.ReadUInt32();
          break;
        }
        case 26: {
          logs_.AddEntriesFrom(input, _repeated_logs_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///**** Log Packet ****
/// </summary>
public sealed partial class SystemLogMessage : pb::IMessage<SystemLogMessage> {
  private static readonly pb::MessageParser<SystemLogMessage> _parser = new pb::MessageParser<SystemLogMessage>(() => new SystemLogMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemLogMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogMessage(SystemLogMessage other) : this() {
    timeSinceBoot_ = other.timeSinceBoot_;
    switch (other.PacketCase) {
      case PacketOneofCase.Boot:
        Boot = other.Boot.Clone();
        break;
      case PacketOneofCase.Netlink:
        Netlink = other.Netlink.Clone();
        break;
      case PacketOneofCase.Ntp:
        Ntp = other.Ntp.Clone();
        break;
      case PacketOneofCase.Trigger:
        Trigger = other.Trigger.Clone();
        break;
      case PacketOneofCase.Spektra:
        Spektra = other.Spektra.Clone();
        break;
      case PacketOneofCase.Schedule:
        Schedule = other.Schedule.Clone();
        break;
      case PacketOneofCase.Userstart:
        Userstart = other.Userstart.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogMessage Clone() {
    return new SystemLogMessage(this);
  }

  /// <summary>Field number for the "time_since_boot" field.</summary>
  public const int TimeSinceBootFieldNumber = 1;
  private uint timeSinceBoot_;
  /// <summary>
  /// Time since boot (From latest power message)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimeSinceBoot {
    get { return timeSinceBoot_; }
    set {
      timeSinceBoot_ = value;
    }
  }

  /// <summary>Field number for the "boot" field.</summary>
  public const int BootFieldNumber = 2;
  /// <summary>
  /// Startup
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemLogBoot Boot {
    get { return packetCase_ == PacketOneofCase.Boot ? (global::SystemLogBoot) packet_ : null; }
    set {
      packet_ = value;
      packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.Boot;
    }
  }

  /// <summary>Field number for the "netlink" field.</summary>
  public const int NetlinkFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemLogNetLink Netlink {
    get { return packetCase_ == PacketOneofCase.Netlink ? (global::SystemLogNetLink) packet_ : null; }
    set {
      packet_ = value;
      packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.Netlink;
    }
  }

  /// <summary>Field number for the "ntp" field.</summary>
  public const int NtpFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemLogNTP Ntp {
    get { return packetCase_ == PacketOneofCase.Ntp ? (global::SystemLogNTP) packet_ : null; }
    set {
      packet_ = value;
      packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.Ntp;
    }
  }

  /// <summary>Field number for the "trigger" field.</summary>
  public const int TriggerFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemLogTrigger Trigger {
    get { return packetCase_ == PacketOneofCase.Trigger ? (global::SystemLogTrigger) packet_ : null; }
    set {
      packet_ = value;
      packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.Trigger;
    }
  }

  /// <summary>Field number for the "spektra" field.</summary>
  public const int SpektraFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemLogSpektra Spektra {
    get { return packetCase_ == PacketOneofCase.Spektra ? (global::SystemLogSpektra) packet_ : null; }
    set {
      packet_ = value;
      packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.Spektra;
    }
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemLogSchedule Schedule {
    get { return packetCase_ == PacketOneofCase.Schedule ? (global::SystemLogSchedule) packet_ : null; }
    set {
      packet_ = value;
      packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.Schedule;
    }
  }

  /// <summary>Field number for the "userstart" field.</summary>
  public const int UserstartFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemLogUserStart Userstart {
    get { return packetCase_ == PacketOneofCase.Userstart ? (global::SystemLogUserStart) packet_ : null; }
    set {
      packet_ = value;
      packetCase_ = value == null ? PacketOneofCase.None : PacketOneofCase.Userstart;
    }
  }

  private object packet_;
  /// <summary>Enum of possible cases for the "packet" oneof.</summary>
  public enum PacketOneofCase {
    None = 0,
    Boot = 2,
    Netlink = 3,
    Ntp = 4,
    Trigger = 5,
    Spektra = 6,
    Schedule = 7,
    Userstart = 8,
  }
  private PacketOneofCase packetCase_ = PacketOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PacketOneofCase PacketCase {
    get { return packetCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPacket() {
    packetCase_ = PacketOneofCase.None;
    packet_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemLogMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemLogMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TimeSinceBoot != other.TimeSinceBoot) return false;
    if (!object.Equals(Boot, other.Boot)) return false;
    if (!object.Equals(Netlink, other.Netlink)) return false;
    if (!object.Equals(Ntp, other.Ntp)) return false;
    if (!object.Equals(Trigger, other.Trigger)) return false;
    if (!object.Equals(Spektra, other.Spektra)) return false;
    if (!object.Equals(Schedule, other.Schedule)) return false;
    if (!object.Equals(Userstart, other.Userstart)) return false;
    if (PacketCase != other.PacketCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TimeSinceBoot != 0) hash ^= TimeSinceBoot.GetHashCode();
    if (packetCase_ == PacketOneofCase.Boot) hash ^= Boot.GetHashCode();
    if (packetCase_ == PacketOneofCase.Netlink) hash ^= Netlink.GetHashCode();
    if (packetCase_ == PacketOneofCase.Ntp) hash ^= Ntp.GetHashCode();
    if (packetCase_ == PacketOneofCase.Trigger) hash ^= Trigger.GetHashCode();
    if (packetCase_ == PacketOneofCase.Spektra) hash ^= Spektra.GetHashCode();
    if (packetCase_ == PacketOneofCase.Schedule) hash ^= Schedule.GetHashCode();
    if (packetCase_ == PacketOneofCase.Userstart) hash ^= Userstart.GetHashCode();
    hash ^= (int) packetCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TimeSinceBoot != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TimeSinceBoot);
    }
    if (packetCase_ == PacketOneofCase.Boot) {
      output.WriteRawTag(18);
      output.WriteMessage(Boot);
    }
    if (packetCase_ == PacketOneofCase.Netlink) {
      output.WriteRawTag(26);
      output.WriteMessage(Netlink);
    }
    if (packetCase_ == PacketOneofCase.Ntp) {
      output.WriteRawTag(34);
      output.WriteMessage(Ntp);
    }
    if (packetCase_ == PacketOneofCase.Trigger) {
      output.WriteRawTag(42);
      output.WriteMessage(Trigger);
    }
    if (packetCase_ == PacketOneofCase.Spektra) {
      output.WriteRawTag(50);
      output.WriteMessage(Spektra);
    }
    if (packetCase_ == PacketOneofCase.Schedule) {
      output.WriteRawTag(58);
      output.WriteMessage(Schedule);
    }
    if (packetCase_ == PacketOneofCase.Userstart) {
      output.WriteRawTag(66);
      output.WriteMessage(Userstart);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TimeSinceBoot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeSinceBoot);
    }
    if (packetCase_ == PacketOneofCase.Boot) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Boot);
    }
    if (packetCase_ == PacketOneofCase.Netlink) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Netlink);
    }
    if (packetCase_ == PacketOneofCase.Ntp) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ntp);
    }
    if (packetCase_ == PacketOneofCase.Trigger) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trigger);
    }
    if (packetCase_ == PacketOneofCase.Spektra) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spektra);
    }
    if (packetCase_ == PacketOneofCase.Schedule) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
    }
    if (packetCase_ == PacketOneofCase.Userstart) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Userstart);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemLogMessage other) {
    if (other == null) {
      return;
    }
    if (other.TimeSinceBoot != 0) {
      TimeSinceBoot = other.TimeSinceBoot;
    }
    switch (other.PacketCase) {
      case PacketOneofCase.Boot:
        if (Boot == null) {
          Boot = new global::SystemLogBoot();
        }
        Boot.MergeFrom(other.Boot);
        break;
      case PacketOneofCase.Netlink:
        if (Netlink == null) {
          Netlink = new global::SystemLogNetLink();
        }
        Netlink.MergeFrom(other.Netlink);
        break;
      case PacketOneofCase.Ntp:
        if (Ntp == null) {
          Ntp = new global::SystemLogNTP();
        }
        Ntp.MergeFrom(other.Ntp);
        break;
      case PacketOneofCase.Trigger:
        if (Trigger == null) {
          Trigger = new global::SystemLogTrigger();
        }
        Trigger.MergeFrom(other.Trigger);
        break;
      case PacketOneofCase.Spektra:
        if (Spektra == null) {
          Spektra = new global::SystemLogSpektra();
        }
        Spektra.MergeFrom(other.Spektra);
        break;
      case PacketOneofCase.Schedule:
        if (Schedule == null) {
          Schedule = new global::SystemLogSchedule();
        }
        Schedule.MergeFrom(other.Schedule);
        break;
      case PacketOneofCase.Userstart:
        if (Userstart == null) {
          Userstart = new global::SystemLogUserStart();
        }
        Userstart.MergeFrom(other.Userstart);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TimeSinceBoot = input.ReadUInt32();
          break;
        }
        case 18: {
          global::SystemLogBoot subBuilder = new global::SystemLogBoot();
          if (packetCase_ == PacketOneofCase.Boot) {
            subBuilder.MergeFrom(Boot);
          }
          input.ReadMessage(subBuilder);
          Boot = subBuilder;
          break;
        }
        case 26: {
          global::SystemLogNetLink subBuilder = new global::SystemLogNetLink();
          if (packetCase_ == PacketOneofCase.Netlink) {
            subBuilder.MergeFrom(Netlink);
          }
          input.ReadMessage(subBuilder);
          Netlink = subBuilder;
          break;
        }
        case 34: {
          global::SystemLogNTP subBuilder = new global::SystemLogNTP();
          if (packetCase_ == PacketOneofCase.Ntp) {
            subBuilder.MergeFrom(Ntp);
          }
          input.ReadMessage(subBuilder);
          Ntp = subBuilder;
          break;
        }
        case 42: {
          global::SystemLogTrigger subBuilder = new global::SystemLogTrigger();
          if (packetCase_ == PacketOneofCase.Trigger) {
            subBuilder.MergeFrom(Trigger);
          }
          input.ReadMessage(subBuilder);
          Trigger = subBuilder;
          break;
        }
        case 50: {
          global::SystemLogSpektra subBuilder = new global::SystemLogSpektra();
          if (packetCase_ == PacketOneofCase.Spektra) {
            subBuilder.MergeFrom(Spektra);
          }
          input.ReadMessage(subBuilder);
          Spektra = subBuilder;
          break;
        }
        case 58: {
          global::SystemLogSchedule subBuilder = new global::SystemLogSchedule();
          if (packetCase_ == PacketOneofCase.Schedule) {
            subBuilder.MergeFrom(Schedule);
          }
          input.ReadMessage(subBuilder);
          Schedule = subBuilder;
          break;
        }
        case 66: {
          global::SystemLogUserStart subBuilder = new global::SystemLogUserStart();
          if (packetCase_ == PacketOneofCase.Userstart) {
            subBuilder.MergeFrom(Userstart);
          }
          input.ReadMessage(subBuilder);
          Userstart = subBuilder;
          break;
        }
      }
    }
  }

}

/// <summary>
///**** Log Types ****
/// </summary>
public sealed partial class SystemLogBoot : pb::IMessage<SystemLogBoot> {
  private static readonly pb::MessageParser<SystemLogBoot> _parser = new pb::MessageParser<SystemLogBoot>(() => new SystemLogBoot());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemLogBoot> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogBoot() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogBoot(SystemLogBoot other) : this() {
    timeclock_ = other.timeclock_ != null ? other.timeclock_.Clone() : null;
    flags_ = other.flags_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogBoot Clone() {
    return new SystemLogBoot(this);
  }

  /// <summary>Field number for the "timeclock" field.</summary>
  public const int TimeclockFieldNumber = 1;
  private global::TimeClockMessage timeclock_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage Timeclock {
    get { return timeclock_; }
    set {
      timeclock_ = value;
    }
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 2;
  private uint flags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Flags {
    get { return flags_; }
    set {
      flags_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemLogBoot);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemLogBoot other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Timeclock, other.Timeclock)) return false;
    if (Flags != other.Flags) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (timeclock_ != null) hash ^= Timeclock.GetHashCode();
    if (Flags != 0) hash ^= Flags.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (timeclock_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Timeclock);
    }
    if (Flags != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Flags);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (timeclock_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeclock);
    }
    if (Flags != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemLogBoot other) {
    if (other == null) {
      return;
    }
    if (other.timeclock_ != null) {
      if (timeclock_ == null) {
        timeclock_ = new global::TimeClockMessage();
      }
      Timeclock.MergeFrom(other.Timeclock);
    }
    if (other.Flags != 0) {
      Flags = other.Flags;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (timeclock_ == null) {
            timeclock_ = new global::TimeClockMessage();
          }
          input.ReadMessage(timeclock_);
          break;
        }
        case 16: {
          Flags = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SystemLogNetLink : pb::IMessage<SystemLogNetLink> {
  private static readonly pb::MessageParser<SystemLogNetLink> _parser = new pb::MessageParser<SystemLogNetLink>(() => new SystemLogNetLink());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemLogNetLink> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogNetLink() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogNetLink(SystemLogNetLink other) : this() {
    isLinked_ = other.isLinked_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogNetLink Clone() {
    return new SystemLogNetLink(this);
  }

  /// <summary>Field number for the "is_linked" field.</summary>
  public const int IsLinkedFieldNumber = 1;
  private bool isLinked_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsLinked {
    get { return isLinked_; }
    set {
      isLinked_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemLogNetLink);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemLogNetLink other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsLinked != other.IsLinked) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsLinked != false) hash ^= IsLinked.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsLinked != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsLinked);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsLinked != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemLogNetLink other) {
    if (other == null) {
      return;
    }
    if (other.IsLinked != false) {
      IsLinked = other.IsLinked;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsLinked = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class SystemLogNTP : pb::IMessage<SystemLogNTP> {
  private static readonly pb::MessageParser<SystemLogNTP> _parser = new pb::MessageParser<SystemLogNTP>(() => new SystemLogNTP());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemLogNTP> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogNTP() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogNTP(SystemLogNTP other) : this() {
    timeclock_ = other.timeclock_ != null ? other.timeclock_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogNTP Clone() {
    return new SystemLogNTP(this);
  }

  /// <summary>Field number for the "timeclock" field.</summary>
  public const int TimeclockFieldNumber = 1;
  private global::TimeClockMessage timeclock_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage Timeclock {
    get { return timeclock_; }
    set {
      timeclock_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemLogNTP);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemLogNTP other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Timeclock, other.Timeclock)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (timeclock_ != null) hash ^= Timeclock.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (timeclock_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Timeclock);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (timeclock_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeclock);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemLogNTP other) {
    if (other == null) {
      return;
    }
    if (other.timeclock_ != null) {
      if (timeclock_ == null) {
        timeclock_ = new global::TimeClockMessage();
      }
      Timeclock.MergeFrom(other.Timeclock);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (timeclock_ == null) {
            timeclock_ = new global::TimeClockMessage();
          }
          input.ReadMessage(timeclock_);
          break;
        }
      }
    }
  }

}

public sealed partial class SystemLogTrigger : pb::IMessage<SystemLogTrigger> {
  private static readonly pb::MessageParser<SystemLogTrigger> _parser = new pb::MessageParser<SystemLogTrigger>(() => new SystemLogTrigger());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemLogTrigger> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogTrigger() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogTrigger(SystemLogTrigger other) : this() {
    trigger_ = other.trigger_ != null ? other.trigger_.Clone() : null;
    source_ = other.source_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogTrigger Clone() {
    return new SystemLogTrigger(this);
  }

  /// <summary>Field number for the "trigger" field.</summary>
  public const int TriggerFieldNumber = 1;
  private global::TriggerMessage trigger_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerMessage Trigger {
    get { return trigger_; }
    set {
      trigger_ = value;
    }
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 2;
  private global::ReadType source_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReadType Source {
    get { return source_; }
    set {
      source_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemLogTrigger);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemLogTrigger other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Trigger, other.Trigger)) return false;
    if (Source != other.Source) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (trigger_ != null) hash ^= Trigger.GetHashCode();
    if (Source != 0) hash ^= Source.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (trigger_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Trigger);
    }
    if (Source != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Source);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (trigger_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trigger);
    }
    if (Source != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemLogTrigger other) {
    if (other == null) {
      return;
    }
    if (other.trigger_ != null) {
      if (trigger_ == null) {
        trigger_ = new global::TriggerMessage();
      }
      Trigger.MergeFrom(other.Trigger);
    }
    if (other.Source != 0) {
      Source = other.Source;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (trigger_ == null) {
            trigger_ = new global::TriggerMessage();
          }
          input.ReadMessage(trigger_);
          break;
        }
        case 16: {
          source_ = (global::ReadType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class SystemLogSpektra : pb::IMessage<SystemLogSpektra> {
  private static readonly pb::MessageParser<SystemLogSpektra> _parser = new pb::MessageParser<SystemLogSpektra>(() => new SystemLogSpektra());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemLogSpektra> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[76]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogSpektra() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogSpektra(SystemLogSpektra other) : this() {
    action_ = other.action_;
    type_ = other.type_;
    index_ = other.index_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogSpektra Clone() {
    return new SystemLogSpektra(this);
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 1;
  private global::SpektraActionType action_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraActionType Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::SpektraTargetType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraTargetType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 3;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemLogSpektra);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemLogSpektra other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Action != other.Action) return false;
    if (Type != other.Type) return false;
    if (Index != other.Index) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Action != 0) hash ^= Action.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Action != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Action);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (Index != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Index);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Action != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemLogSpektra other) {
    if (other == null) {
      return;
    }
    if (other.Action != 0) {
      Action = other.Action;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          action_ = (global::SpektraActionType) input.ReadEnum();
          break;
        }
        case 16: {
          type_ = (global::SpektraTargetType) input.ReadEnum();
          break;
        }
        case 24: {
          Index = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SystemLogSchedule : pb::IMessage<SystemLogSchedule> {
  private static readonly pb::MessageParser<SystemLogSchedule> _parser = new pb::MessageParser<SystemLogSchedule>(() => new SystemLogSchedule());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemLogSchedule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[77]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogSchedule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogSchedule(SystemLogSchedule other) : this() {
    index_ = other.index_;
    isStart_ = other.isStart_;
    second_ = other.second_;
    minute_ = other.minute_;
    hour_ = other.hour_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogSchedule Clone() {
    return new SystemLogSchedule(this);
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 1;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "isStart" field.</summary>
  public const int IsStartFieldNumber = 2;
  private uint isStart_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IsStart {
    get { return isStart_; }
    set {
      isStart_ = value;
    }
  }

  /// <summary>Field number for the "second" field.</summary>
  public const int SecondFieldNumber = 3;
  private uint second_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Second {
    get { return second_; }
    set {
      second_ = value;
    }
  }

  /// <summary>Field number for the "minute" field.</summary>
  public const int MinuteFieldNumber = 4;
  private uint minute_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Minute {
    get { return minute_; }
    set {
      minute_ = value;
    }
  }

  /// <summary>Field number for the "hour" field.</summary>
  public const int HourFieldNumber = 5;
  private uint hour_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Hour {
    get { return hour_; }
    set {
      hour_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemLogSchedule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemLogSchedule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (IsStart != other.IsStart) return false;
    if (Second != other.Second) return false;
    if (Minute != other.Minute) return false;
    if (Hour != other.Hour) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (IsStart != 0) hash ^= IsStart.GetHashCode();
    if (Second != 0) hash ^= Second.GetHashCode();
    if (Minute != 0) hash ^= Minute.GetHashCode();
    if (Hour != 0) hash ^= Hour.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Index);
    }
    if (IsStart != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(IsStart);
    }
    if (Second != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Second);
    }
    if (Minute != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Minute);
    }
    if (Hour != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Hour);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (IsStart != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsStart);
    }
    if (Second != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Second);
    }
    if (Minute != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Minute);
    }
    if (Hour != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hour);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemLogSchedule other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.IsStart != 0) {
      IsStart = other.IsStart;
    }
    if (other.Second != 0) {
      Second = other.Second;
    }
    if (other.Minute != 0) {
      Minute = other.Minute;
    }
    if (other.Hour != 0) {
      Hour = other.Hour;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Index = input.ReadUInt32();
          break;
        }
        case 16: {
          IsStart = input.ReadUInt32();
          break;
        }
        case 24: {
          Second = input.ReadUInt32();
          break;
        }
        case 32: {
          Minute = input.ReadUInt32();
          break;
        }
        case 40: {
          Hour = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SystemLogUserStart : pb::IMessage<SystemLogUserStart> {
  private static readonly pb::MessageParser<SystemLogUserStart> _parser = new pb::MessageParser<SystemLogUserStart>(() => new SystemLogUserStart());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemLogUserStart> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[78]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogUserStart() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogUserStart(SystemLogUserStart other) : this() {
    timeclock_ = other.timeclock_ != null ? other.timeclock_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemLogUserStart Clone() {
    return new SystemLogUserStart(this);
  }

  /// <summary>Field number for the "timeclock" field.</summary>
  public const int TimeclockFieldNumber = 1;
  private global::TimeClockMessage timeclock_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TimeClockMessage Timeclock {
    get { return timeclock_; }
    set {
      timeclock_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemLogUserStart);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemLogUserStart other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Timeclock, other.Timeclock)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (timeclock_ != null) hash ^= Timeclock.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (timeclock_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Timeclock);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (timeclock_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeclock);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemLogUserStart other) {
    if (other == null) {
      return;
    }
    if (other.timeclock_ != null) {
      if (timeclock_ == null) {
        timeclock_ = new global::TimeClockMessage();
      }
      Timeclock.MergeFrom(other.Timeclock);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (timeclock_ == null) {
            timeclock_ = new global::TimeClockMessage();
          }
          input.ReadMessage(timeclock_);
          break;
        }
      }
    }
  }

}

public sealed partial class SystemMetaDataReadMessage : pb::IMessage<SystemMetaDataReadMessage> {
  private static readonly pb::MessageParser<SystemMetaDataReadMessage> _parser = new pb::MessageParser<SystemMetaDataReadMessage>(() => new SystemMetaDataReadMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SystemMetaDataReadMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[79]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemMetaDataReadMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemMetaDataReadMessage(SystemMetaDataReadMessage other) : this() {
    inputPressCounter_ = other.inputPressCounter_.Clone();
    listStartCounter_ = other.listStartCounter_.Clone();
    schedulesCounter_ = other.schedulesCounter_.Clone();
    screenOnTime_ = other.screenOnTime_;
    screenDimTime_ = other.screenDimTime_;
    screenSaverTime_ = other.screenSaverTime_;
    rebootCounter_ = other.rebootCounter_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SystemMetaDataReadMessage Clone() {
    return new SystemMetaDataReadMessage(this);
  }

  /// <summary>Field number for the "input_press_counter" field.</summary>
  public const int InputPressCounterFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_inputPressCounter_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> inputPressCounter_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Max 24 Inputs
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> InputPressCounter {
    get { return inputPressCounter_; }
  }

  /// <summary>Field number for the "list_start_counter" field.</summary>
  public const int ListStartCounterFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_listStartCounter_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> listStartCounter_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Max 32 Lists
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> ListStartCounter {
    get { return listStartCounter_; }
  }

  /// <summary>Field number for the "schedules_counter" field.</summary>
  public const int SchedulesCounterFieldNumber = 3;
  private static readonly pb::FieldCodec<uint> _repeated_schedulesCounter_codec
      = pb::FieldCodec.ForUInt32(26);
  private readonly pbc::RepeatedField<uint> schedulesCounter_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Max 10 Alarms
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> SchedulesCounter {
    get { return schedulesCounter_; }
  }

  /// <summary>Field number for the "screen_on_time" field.</summary>
  public const int ScreenOnTimeFieldNumber = 4;
  private uint screenOnTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ScreenOnTime {
    get { return screenOnTime_; }
    set {
      screenOnTime_ = value;
    }
  }

  /// <summary>Field number for the "screen_dim_time" field.</summary>
  public const int ScreenDimTimeFieldNumber = 5;
  private uint screenDimTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ScreenDimTime {
    get { return screenDimTime_; }
    set {
      screenDimTime_ = value;
    }
  }

  /// <summary>Field number for the "screen_saver_time" field.</summary>
  public const int ScreenSaverTimeFieldNumber = 6;
  private uint screenSaverTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ScreenSaverTime {
    get { return screenSaverTime_; }
    set {
      screenSaverTime_ = value;
    }
  }

  /// <summary>Field number for the "reboot_counter" field.</summary>
  public const int RebootCounterFieldNumber = 7;
  private uint rebootCounter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RebootCounter {
    get { return rebootCounter_; }
    set {
      rebootCounter_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SystemMetaDataReadMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SystemMetaDataReadMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!inputPressCounter_.Equals(other.inputPressCounter_)) return false;
    if(!listStartCounter_.Equals(other.listStartCounter_)) return false;
    if(!schedulesCounter_.Equals(other.schedulesCounter_)) return false;
    if (ScreenOnTime != other.ScreenOnTime) return false;
    if (ScreenDimTime != other.ScreenDimTime) return false;
    if (ScreenSaverTime != other.ScreenSaverTime) return false;
    if (RebootCounter != other.RebootCounter) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= inputPressCounter_.GetHashCode();
    hash ^= listStartCounter_.GetHashCode();
    hash ^= schedulesCounter_.GetHashCode();
    if (ScreenOnTime != 0) hash ^= ScreenOnTime.GetHashCode();
    if (ScreenDimTime != 0) hash ^= ScreenDimTime.GetHashCode();
    if (ScreenSaverTime != 0) hash ^= ScreenSaverTime.GetHashCode();
    if (RebootCounter != 0) hash ^= RebootCounter.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    inputPressCounter_.WriteTo(output, _repeated_inputPressCounter_codec);
    listStartCounter_.WriteTo(output, _repeated_listStartCounter_codec);
    schedulesCounter_.WriteTo(output, _repeated_schedulesCounter_codec);
    if (ScreenOnTime != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ScreenOnTime);
    }
    if (ScreenDimTime != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(ScreenDimTime);
    }
    if (ScreenSaverTime != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ScreenSaverTime);
    }
    if (RebootCounter != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(RebootCounter);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += inputPressCounter_.CalculateSize(_repeated_inputPressCounter_codec);
    size += listStartCounter_.CalculateSize(_repeated_listStartCounter_codec);
    size += schedulesCounter_.CalculateSize(_repeated_schedulesCounter_codec);
    if (ScreenOnTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenOnTime);
    }
    if (ScreenDimTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenDimTime);
    }
    if (ScreenSaverTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenSaverTime);
    }
    if (RebootCounter != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RebootCounter);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SystemMetaDataReadMessage other) {
    if (other == null) {
      return;
    }
    inputPressCounter_.Add(other.inputPressCounter_);
    listStartCounter_.Add(other.listStartCounter_);
    schedulesCounter_.Add(other.schedulesCounter_);
    if (other.ScreenOnTime != 0) {
      ScreenOnTime = other.ScreenOnTime;
    }
    if (other.ScreenDimTime != 0) {
      ScreenDimTime = other.ScreenDimTime;
    }
    if (other.ScreenSaverTime != 0) {
      ScreenSaverTime = other.ScreenSaverTime;
    }
    if (other.RebootCounter != 0) {
      RebootCounter = other.RebootCounter;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          inputPressCounter_.AddEntriesFrom(input, _repeated_inputPressCounter_codec);
          break;
        }
        case 18:
        case 16: {
          listStartCounter_.AddEntriesFrom(input, _repeated_listStartCounter_codec);
          break;
        }
        case 26:
        case 24: {
          schedulesCounter_.AddEntriesFrom(input, _repeated_schedulesCounter_codec);
          break;
        }
        case 32: {
          ScreenOnTime = input.ReadUInt32();
          break;
        }
        case 40: {
          ScreenDimTime = input.ReadUInt32();
          break;
        }
        case 48: {
          ScreenSaverTime = input.ReadUInt32();
          break;
        }
        case 56: {
          RebootCounter = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TriggerEvent : pb::IMessage<TriggerEvent> {
  private static readonly pb::MessageParser<TriggerEvent> _parser = new pb::MessageParser<TriggerEvent>(() => new TriggerEvent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TriggerEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[80]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TriggerEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TriggerEvent(TriggerEvent other) : this() {
    type_ = other.type_;
    targetAddress_ = other.targetAddress_;
    lineMask_ = other.lineMask_;
    switch (other.PayloadCase) {
      case PayloadOneofCase.Level:
        Level = other.Level;
        break;
      case PayloadOneofCase.DaliCommand:
        DaliCommand = other.DaliCommand;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TriggerEvent Clone() {
    return new TriggerEvent(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::TriggerType type_ = 0;
  /// <summary>
  /// What type of Trigger occurred
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  /// <summary>
  /// Associated level (if applicable)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Level {
    get { return payloadCase_ == PayloadOneofCase.Level ? (uint) payload_ : 0; }
    set {
      payload_ = value;
      payloadCase_ = PayloadOneofCase.Level;
    }
  }

  /// <summary>Field number for the "dali_command" field.</summary>
  public const int DaliCommandFieldNumber = 3;
  /// <summary>
  /// Associated DALI Command (if applicable)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALICommandType DaliCommand {
    get { return payloadCase_ == PayloadOneofCase.DaliCommand ? (global::DALICommandType) payload_ : 0; }
    set {
      payload_ = value;
      payloadCase_ = PayloadOneofCase.DaliCommand;
    }
  }

  /// <summary>Field number for the "target_address" field.</summary>
  public const int TargetAddressFieldNumber = 4;
  private uint targetAddress_;
  /// <summary>
  /// The target address for the TriggerType (if applicable)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetAddress {
    get { return targetAddress_; }
    set {
      targetAddress_ = value;
    }
  }

  /// <summary>Field number for the "line_mask" field.</summary>
  public const int LineMaskFieldNumber = 5;
  private uint lineMask_;
  /// <summary>
  /// The Line(s) on wich the Trigger occurred (if applicable)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LineMask {
    get { return lineMask_; }
    set {
      lineMask_ = value;
    }
  }

  private object payload_;
  /// <summary>Enum of possible cases for the "payload" oneof.</summary>
  public enum PayloadOneofCase {
    None = 0,
    Level = 2,
    DaliCommand = 3,
  }
  private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadOneofCase PayloadCase {
    get { return payloadCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payloadCase_ = PayloadOneofCase.None;
    payload_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TriggerEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TriggerEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Level != other.Level) return false;
    if (DaliCommand != other.DaliCommand) return false;
    if (TargetAddress != other.TargetAddress) return false;
    if (LineMask != other.LineMask) return false;
    if (PayloadCase != other.PayloadCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Level) hash ^= Level.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DaliCommand) hash ^= DaliCommand.GetHashCode();
    if (TargetAddress != 0) hash ^= TargetAddress.GetHashCode();
    if (LineMask != 0) hash ^= LineMask.GetHashCode();
    hash ^= (int) payloadCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (payloadCase_ == PayloadOneofCase.Level) {
      output.WriteRawTag(16);
      output.WriteUInt32(Level);
    }
    if (payloadCase_ == PayloadOneofCase.DaliCommand) {
      output.WriteRawTag(24);
      output.WriteEnum((int) DaliCommand);
    }
    if (TargetAddress != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TargetAddress);
    }
    if (LineMask != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(LineMask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (payloadCase_ == PayloadOneofCase.Level) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
    }
    if (payloadCase_ == PayloadOneofCase.DaliCommand) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DaliCommand);
    }
    if (TargetAddress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetAddress);
    }
    if (LineMask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineMask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TriggerEvent other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.TargetAddress != 0) {
      TargetAddress = other.TargetAddress;
    }
    if (other.LineMask != 0) {
      LineMask = other.LineMask;
    }
    switch (other.PayloadCase) {
      case PayloadOneofCase.Level:
        Level = other.Level;
        break;
      case PayloadOneofCase.DaliCommand:
        DaliCommand = other.DaliCommand;
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::TriggerType) input.ReadEnum();
          break;
        }
        case 16: {
          Level = input.ReadUInt32();
          break;
        }
        case 24: {
          payload_ = input.ReadEnum();
          payloadCase_ = PayloadOneofCase.DaliCommand;
          break;
        }
        case 32: {
          TargetAddress = input.ReadUInt32();
          break;
        }
        case 40: {
          LineMask = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// A message sent to a client when an event occurs. Depending on the event type (Trigger, Input or Sensor) different data is supplied with the event.
/// If a client sends an EventMessage with EventType of REGISTER then broadcast events out to the client.
/// </summary>
public sealed partial class EventMessage : pb::IMessage<EventMessage> {
  private static readonly pb::MessageParser<EventMessage> _parser = new pb::MessageParser<EventMessage>(() => new EventMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EventMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[81]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventMessage(EventMessage other) : this() {
    event_ = other.event_;
    switch (other.EventDataCase) {
      case EventDataOneofCase.Trigger:
        Trigger = other.Trigger.Clone();
        break;
      case EventDataOneofCase.Inputs:
        Inputs = other.Inputs.Clone();
        break;
      case EventDataOneofCase.Payload:
        Payload = other.Payload.Clone();
        break;
      case EventDataOneofCase.JoinedRooms:
        JoinedRooms = other.JoinedRooms.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventMessage Clone() {
    return new EventMessage(this);
  }

  /// <summary>Field number for the "event" field.</summary>
  public const int EventFieldNumber = 1;
  private global::EventType event_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EventType Event {
    get { return event_; }
    set {
      event_ = value;
    }
  }

  /// <summary>Field number for the "trigger" field.</summary>
  public const int TriggerFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TriggerEvent Trigger {
    get { return eventDataCase_ == EventDataOneofCase.Trigger ? (global::TriggerEvent) eventData_ : null; }
    set {
      eventData_ = value;
      eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Trigger;
    }
  }

  /// <summary>Field number for the "inputs" field.</summary>
  public const int InputsFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InputStateResponse Inputs {
    get { return eventDataCase_ == EventDataOneofCase.Inputs ? (global::InputStateResponse) eventData_ : null; }
    set {
      eventData_ = value;
      eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Inputs;
    }
  }

  /// <summary>Field number for the "payload" field.</summary>
  public const int PayloadFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PayloadMessage Payload {
    get { return eventDataCase_ == EventDataOneofCase.Payload ? (global::PayloadMessage) eventData_ : null; }
    set {
      eventData_ = value;
      eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.Payload;
    }
  }

  /// <summary>Field number for the "joined_rooms" field.</summary>
  public const int JoinedRoomsFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::JoinedRoomsMessage JoinedRooms {
    get { return eventDataCase_ == EventDataOneofCase.JoinedRooms ? (global::JoinedRoomsMessage) eventData_ : null; }
    set {
      eventData_ = value;
      eventDataCase_ = value == null ? EventDataOneofCase.None : EventDataOneofCase.JoinedRooms;
    }
  }

  private object eventData_;
  /// <summary>Enum of possible cases for the "event_data" oneof.</summary>
  public enum EventDataOneofCase {
    None = 0,
    Trigger = 2,
    Inputs = 3,
    Payload = 4,
    JoinedRooms = 5,
  }
  private EventDataOneofCase eventDataCase_ = EventDataOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventDataOneofCase EventDataCase {
    get { return eventDataCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEventData() {
    eventDataCase_ = EventDataOneofCase.None;
    eventData_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EventMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EventMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Event != other.Event) return false;
    if (!object.Equals(Trigger, other.Trigger)) return false;
    if (!object.Equals(Inputs, other.Inputs)) return false;
    if (!object.Equals(Payload, other.Payload)) return false;
    if (!object.Equals(JoinedRooms, other.JoinedRooms)) return false;
    if (EventDataCase != other.EventDataCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Event != 0) hash ^= Event.GetHashCode();
    if (eventDataCase_ == EventDataOneofCase.Trigger) hash ^= Trigger.GetHashCode();
    if (eventDataCase_ == EventDataOneofCase.Inputs) hash ^= Inputs.GetHashCode();
    if (eventDataCase_ == EventDataOneofCase.Payload) hash ^= Payload.GetHashCode();
    if (eventDataCase_ == EventDataOneofCase.JoinedRooms) hash ^= JoinedRooms.GetHashCode();
    hash ^= (int) eventDataCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Event != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Event);
    }
    if (eventDataCase_ == EventDataOneofCase.Trigger) {
      output.WriteRawTag(18);
      output.WriteMessage(Trigger);
    }
    if (eventDataCase_ == EventDataOneofCase.Inputs) {
      output.WriteRawTag(26);
      output.WriteMessage(Inputs);
    }
    if (eventDataCase_ == EventDataOneofCase.Payload) {
      output.WriteRawTag(34);
      output.WriteMessage(Payload);
    }
    if (eventDataCase_ == EventDataOneofCase.JoinedRooms) {
      output.WriteRawTag(42);
      output.WriteMessage(JoinedRooms);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Event != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Event);
    }
    if (eventDataCase_ == EventDataOneofCase.Trigger) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trigger);
    }
    if (eventDataCase_ == EventDataOneofCase.Inputs) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inputs);
    }
    if (eventDataCase_ == EventDataOneofCase.Payload) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
    }
    if (eventDataCase_ == EventDataOneofCase.JoinedRooms) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinedRooms);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EventMessage other) {
    if (other == null) {
      return;
    }
    if (other.Event != 0) {
      Event = other.Event;
    }
    switch (other.EventDataCase) {
      case EventDataOneofCase.Trigger:
        if (Trigger == null) {
          Trigger = new global::TriggerEvent();
        }
        Trigger.MergeFrom(other.Trigger);
        break;
      case EventDataOneofCase.Inputs:
        if (Inputs == null) {
          Inputs = new global::InputStateResponse();
        }
        Inputs.MergeFrom(other.Inputs);
        break;
      case EventDataOneofCase.Payload:
        if (Payload == null) {
          Payload = new global::PayloadMessage();
        }
        Payload.MergeFrom(other.Payload);
        break;
      case EventDataOneofCase.JoinedRooms:
        if (JoinedRooms == null) {
          JoinedRooms = new global::JoinedRoomsMessage();
        }
        JoinedRooms.MergeFrom(other.JoinedRooms);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          event_ = (global::EventType) input.ReadEnum();
          break;
        }
        case 18: {
          global::TriggerEvent subBuilder = new global::TriggerEvent();
          if (eventDataCase_ == EventDataOneofCase.Trigger) {
            subBuilder.MergeFrom(Trigger);
          }
          input.ReadMessage(subBuilder);
          Trigger = subBuilder;
          break;
        }
        case 26: {
          global::InputStateResponse subBuilder = new global::InputStateResponse();
          if (eventDataCase_ == EventDataOneofCase.Inputs) {
            subBuilder.MergeFrom(Inputs);
          }
          input.ReadMessage(subBuilder);
          Inputs = subBuilder;
          break;
        }
        case 34: {
          global::PayloadMessage subBuilder = new global::PayloadMessage();
          if (eventDataCase_ == EventDataOneofCase.Payload) {
            subBuilder.MergeFrom(Payload);
          }
          input.ReadMessage(subBuilder);
          Payload = subBuilder;
          break;
        }
        case 42: {
          global::JoinedRoomsMessage subBuilder = new global::JoinedRoomsMessage();
          if (eventDataCase_ == EventDataOneofCase.JoinedRooms) {
            subBuilder.MergeFrom(JoinedRooms);
          }
          input.ReadMessage(subBuilder);
          JoinedRooms = subBuilder;
          break;
        }
      }
    }
  }

}

/// <summary>
/// Every Message to and from the eDIDIO will be a populated EdidioMessage with a singular payload. The EdidioMessage itself is wrapped with a 0xCD Start Byte and 2 Bytes denoting Message Length of the form: [Length MSB, Length LSB]
/// </summary>
public sealed partial class EdidioMessage : pb::IMessage<EdidioMessage> {
  private static readonly pb::MessageParser<EdidioMessage> _parser = new pb::MessageParser<EdidioMessage>(() => new EdidioMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EdidioMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EDS10ProtocolBufferReflection.Descriptor.MessageTypes[82]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EdidioMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EdidioMessage(EdidioMessage other) : this() {
    messageId_ = other.messageId_;
    switch (other.PayloadCase) {
      case PayloadOneofCase.Ack:
        Ack = other.Ack.Clone();
        break;
      case PayloadOneofCase.Inputs:
        Inputs = other.Inputs.Clone();
        break;
      case PayloadOneofCase.Outputs:
        Outputs = other.Outputs.Clone();
        break;
      case PayloadOneofCase.Irs:
        Irs = other.Irs.Clone();
        break;
      case PayloadOneofCase.Sensor:
        Sensor = other.Sensor.Clone();
        break;
      case PayloadOneofCase.List:
        List = other.List.Clone();
        break;
      case PayloadOneofCase.Alarm:
        Alarm = other.Alarm.Clone();
        break;
      case PayloadOneofCase.Alarms:
        Alarms = other.Alarms.Clone();
        break;
      case PayloadOneofCase.BurnIns:
        BurnIns = other.BurnIns.Clone();
        break;
      case PayloadOneofCase.SensorCommand:
        SensorCommand = other.SensorCommand.Clone();
        break;
      case PayloadOneofCase.ChangeProfile:
        ChangeProfile = other.ChangeProfile.Clone();
        break;
      case PayloadOneofCase.IdentifyMessage:
        IdentifyMessage = other.IdentifyMessage.Clone();
        break;
      case PayloadOneofCase.UpdateTime:
        UpdateTime = other.UpdateTime.Clone();
        break;
      case PayloadOneofCase.ReadDevice:
        ReadDevice = other.ReadDevice.Clone();
        break;
      case PayloadOneofCase.DaliMessage:
        DaliMessage = other.DaliMessage.Clone();
        break;
      case PayloadOneofCase.DaliQuery:
        DaliQuery = other.DaliQuery.Clone();
        break;
      case PayloadOneofCase.DmxMessage:
        DmxMessage = other.DmxMessage.Clone();
        break;
      case PayloadOneofCase.ExternalTrigger:
        ExternalTrigger = other.ExternalTrigger.Clone();
        break;
      case PayloadOneofCase.SpektraSettings:
        SpektraSettings = other.SpektraSettings.Clone();
        break;
      case PayloadOneofCase.SpektraSequence:
        SpektraSequence = other.SpektraSequence.Clone();
        break;
      case PayloadOneofCase.SpektraCalendar:
        SpektraCalendar = other.SpektraCalendar.Clone();
        break;
      case PayloadOneofCase.SpektraTheme:
        SpektraTheme = other.SpektraTheme.Clone();
        break;
      case PayloadOneofCase.SpektraRead:
        SpektraRead = other.SpektraRead.Clone();
        break;
      case PayloadOneofCase.SpektraControl:
        SpektraControl = other.SpektraControl.Clone();
        break;
      case PayloadOneofCase.DmxTranslator:
        DmxTranslator = other.DmxTranslator.Clone();
        break;
      case PayloadOneofCase.InputRequest:
        InputRequest = other.InputRequest.Clone();
        break;
      case PayloadOneofCase.InputResponse:
        InputResponse = other.InputResponse.Clone();
        break;
      case PayloadOneofCase.DiagSystem:
        DiagSystem = other.DiagSystem.Clone();
        break;
      case PayloadOneofCase.DiagMessage:
        DiagMessage = other.DiagMessage.Clone();
        break;
      case PayloadOneofCase.AdminMessage:
        AdminMessage = other.AdminMessage.Clone();
        break;
      case PayloadOneofCase.Event:
        Event = other.Event.Clone();
        break;
      case PayloadOneofCase.SecureDeviceSettings:
        SecureDeviceSettings = other.SecureDeviceSettings.Clone();
        break;
      case PayloadOneofCase.FirmwareNew:
        FirmwareNew = other.FirmwareNew.Clone();
        break;
      case PayloadOneofCase.FirmwareControl:
        FirmwareControl = other.FirmwareControl.Clone();
        break;
      case PayloadOneofCase.FirmwareChunk:
        FirmwareChunk = other.FirmwareChunk.Clone();
        break;
      case PayloadOneofCase.LevelCacheResponse:
        LevelCacheResponse = other.LevelCacheResponse.Clone();
        break;
      case PayloadOneofCase.JoinedRooms:
        JoinedRooms = other.JoinedRooms.Clone();
        break;
      case PayloadOneofCase.ListExtended:
        ListExtended = other.ListExtended.Clone();
        break;
      case PayloadOneofCase.AytMessage:
        AytMessage = other.AytMessage.Clone();
        break;
      case PayloadOneofCase.RdmMessage:
        RdmMessage = other.RdmMessage.Clone();
        break;
      case PayloadOneofCase.RdmResponseMessage:
        RdmResponseMessage = other.RdmResponseMessage.Clone();
        break;
      case PayloadOneofCase.LogicMessage:
        LogicMessage = other.LogicMessage.Clone();
        break;
      case PayloadOneofCase.SecureLogin:
        SecureLogin = other.SecureLogin.Clone();
        break;
      case PayloadOneofCase.DeviceStateMessage:
        DeviceStateMessage = other.DeviceStateMessage.Clone();
        break;
      case PayloadOneofCase.SpektraCalendarDay:
        SpektraCalendarDay = other.SpektraCalendarDay.Clone();
        break;
      case PayloadOneofCase.SpektraCalendarOverview:
        SpektraCalendarOverview = other.SpektraCalendarOverview.Clone();
        break;
      case PayloadOneofCase.InputsDali:
        InputsDali = other.InputsDali.Clone();
        break;
      case PayloadOneofCase.LogsRead:
        LogsRead = other.LogsRead.Clone();
        break;
      case PayloadOneofCase.MetadataRead:
        MetadataRead = other.MetadataRead.Clone();
        break;
      case PayloadOneofCase.DaliAddressingMessage:
        DaliAddressingMessage = other.DaliAddressingMessage.Clone();
        break;
      case PayloadOneofCase.DaliRemappingMessage:
        DaliRemappingMessage = other.DaliRemappingMessage.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EdidioMessage Clone() {
    return new EdidioMessage(this);
  }

  /// <summary>Field number for the "message_id" field.</summary>
  public const int MessageIdFieldNumber = 1;
  private uint messageId_;
  /// <summary>
  /// As decided by the client. Will not be unique across clients.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MessageId {
    get { return messageId_; }
    set {
      messageId_ = value;
    }
  }

  /// <summary>Field number for the "ack" field.</summary>
  public const int AckFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AckMessage Ack {
    get { return payloadCase_ == PayloadOneofCase.Ack ? (global::AckMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Ack;
    }
  }

  /// <summary>Field number for the "inputs" field.</summary>
  public const int InputsFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InputMultiMessage Inputs {
    get { return payloadCase_ == PayloadOneofCase.Inputs ? (global::InputMultiMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Inputs;
    }
  }

  /// <summary>Field number for the "outputs" field.</summary>
  public const int OutputsFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OutputMultiMessage Outputs {
    get { return payloadCase_ == PayloadOneofCase.Outputs ? (global::OutputMultiMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Outputs;
    }
  }

  /// <summary>Field number for the "irs" field.</summary>
  public const int IrsFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::IRMultiMessage Irs {
    get { return payloadCase_ == PayloadOneofCase.Irs ? (global::IRMultiMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Irs;
    }
  }

  /// <summary>Field number for the "sensor" field.</summary>
  public const int SensorFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SensorMessage Sensor {
    get { return payloadCase_ == PayloadOneofCase.Sensor ? (global::SensorMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Sensor;
    }
  }

  /// <summary>Field number for the "list" field.</summary>
  public const int ListFieldNumber = 8;
  /// <summary>
  /// DEPRECATED: SensorMultiMessage (7) --> Send as many SensorMessages as necessary
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ListMessage List {
    get { return payloadCase_ == PayloadOneofCase.List ? (global::ListMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.List;
    }
  }

  /// <summary>Field number for the "alarm" field.</summary>
  public const int AlarmFieldNumber = 10;
  /// <summary>
  /// DEPRECATED: ListMultiMessage (9) --> Send as many ListMessages as necessary
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AlarmMessage Alarm {
    get { return payloadCase_ == PayloadOneofCase.Alarm ? (global::AlarmMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Alarm;
    }
  }

  /// <summary>Field number for the "alarms" field.</summary>
  public const int AlarmsFieldNumber = 11;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AlarmMultiMessage Alarms {
    get { return payloadCase_ == PayloadOneofCase.Alarms ? (global::AlarmMultiMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Alarms;
    }
  }

  /// <summary>Field number for the "burn_ins" field.</summary>
  public const int BurnInsFieldNumber = 12;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BurnInMultiMessage BurnIns {
    get { return payloadCase_ == PayloadOneofCase.BurnIns ? (global::BurnInMultiMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.BurnIns;
    }
  }

  /// <summary>Field number for the "sensor_command" field.</summary>
  public const int SensorCommandFieldNumber = 13;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SensorCommandMessage SensorCommand {
    get { return payloadCase_ == PayloadOneofCase.SensorCommand ? (global::SensorCommandMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SensorCommand;
    }
  }

  /// <summary>Field number for the "change_profile" field.</summary>
  public const int ChangeProfileFieldNumber = 14;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChangeProfileMessage ChangeProfile {
    get { return payloadCase_ == PayloadOneofCase.ChangeProfile ? (global::ChangeProfileMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ChangeProfile;
    }
  }

  /// <summary>Field number for the "identify_message" field.</summary>
  public const int IdentifyMessageFieldNumber = 15;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::IdentifyMessage IdentifyMessage {
    get { return payloadCase_ == PayloadOneofCase.IdentifyMessage ? (global::IdentifyMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.IdentifyMessage;
    }
  }

  /// <summary>Field number for the "update_time" field.</summary>
  public const int UpdateTimeFieldNumber = 16;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateTimeMessage UpdateTime {
    get { return payloadCase_ == PayloadOneofCase.UpdateTime ? (global::UpdateTimeMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.UpdateTime;
    }
  }

  /// <summary>Field number for the "read_device" field.</summary>
  public const int ReadDeviceFieldNumber = 17;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReadDeviceMessage ReadDevice {
    get { return payloadCase_ == PayloadOneofCase.ReadDevice ? (global::ReadDeviceMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ReadDevice;
    }
  }

  /// <summary>Field number for the "dali_message" field.</summary>
  public const int DaliMessageFieldNumber = 18;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIMessage DaliMessage {
    get { return payloadCase_ == PayloadOneofCase.DaliMessage ? (global::DALIMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DaliMessage;
    }
  }

  /// <summary>Field number for the "dali_query" field.</summary>
  public const int DaliQueryFieldNumber = 19;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIQueryResponse DaliQuery {
    get { return payloadCase_ == PayloadOneofCase.DaliQuery ? (global::DALIQueryResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DaliQuery;
    }
  }

  /// <summary>Field number for the "dmx_message" field.</summary>
  public const int DmxMessageFieldNumber = 20;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DMXMessage DmxMessage {
    get { return payloadCase_ == PayloadOneofCase.DmxMessage ? (global::DMXMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DmxMessage;
    }
  }

  /// <summary>Field number for the "external_trigger" field.</summary>
  public const int ExternalTriggerFieldNumber = 21;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExternalTriggerMessage ExternalTrigger {
    get { return payloadCase_ == PayloadOneofCase.ExternalTrigger ? (global::ExternalTriggerMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ExternalTrigger;
    }
  }

  /// <summary>Field number for the "spektra_settings" field.</summary>
  public const int SpektraSettingsFieldNumber = 22;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraSettingMessage SpektraSettings {
    get { return payloadCase_ == PayloadOneofCase.SpektraSettings ? (global::SpektraSettingMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpektraSettings;
    }
  }

  /// <summary>Field number for the "spektra_sequence" field.</summary>
  public const int SpektraSequenceFieldNumber = 23;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraSequenceConfigMessage SpektraSequence {
    get { return payloadCase_ == PayloadOneofCase.SpektraSequence ? (global::SpektraSequenceConfigMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpektraSequence;
    }
  }

  /// <summary>Field number for the "spektra_calendar" field.</summary>
  public const int SpektraCalendarFieldNumber = 24;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraCalendarMessage SpektraCalendar {
    get { return payloadCase_ == PayloadOneofCase.SpektraCalendar ? (global::SpektraCalendarMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpektraCalendar;
    }
  }

  /// <summary>Field number for the "spektra_theme" field.</summary>
  public const int SpektraThemeFieldNumber = 25;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraThemeConfigMessage SpektraTheme {
    get { return payloadCase_ == PayloadOneofCase.SpektraTheme ? (global::SpektraThemeConfigMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpektraTheme;
    }
  }

  /// <summary>Field number for the "spektra_read" field.</summary>
  public const int SpektraReadFieldNumber = 26;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraReadMessage SpektraRead {
    get { return payloadCase_ == PayloadOneofCase.SpektraRead ? (global::SpektraReadMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpektraRead;
    }
  }

  /// <summary>Field number for the "spektra_control" field.</summary>
  public const int SpektraControlFieldNumber = 27;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraControlMessage SpektraControl {
    get { return payloadCase_ == PayloadOneofCase.SpektraControl ? (global::SpektraControlMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpektraControl;
    }
  }

  /// <summary>Field number for the "dmx_translator" field.</summary>
  public const int DmxTranslatorFieldNumber = 28;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DMXProtocolTranslation DmxTranslator {
    get { return payloadCase_ == PayloadOneofCase.DmxTranslator ? (global::DMXProtocolTranslation) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DmxTranslator;
    }
  }

  /// <summary>Field number for the "input_request" field.</summary>
  public const int InputRequestFieldNumber = 29;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InputStateMessage InputRequest {
    get { return payloadCase_ == PayloadOneofCase.InputRequest ? (global::InputStateMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.InputRequest;
    }
  }

  /// <summary>Field number for the "input_response" field.</summary>
  public const int InputResponseFieldNumber = 30;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InputStateResponse InputResponse {
    get { return payloadCase_ == PayloadOneofCase.InputResponse ? (global::InputStateResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.InputResponse;
    }
  }

  /// <summary>Field number for the "diag_system" field.</summary>
  public const int DiagSystemFieldNumber = 31;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DiagnosticSystemInfoResponse DiagSystem {
    get { return payloadCase_ == PayloadOneofCase.DiagSystem ? (global::DiagnosticSystemInfoResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DiagSystem;
    }
  }

  /// <summary>Field number for the "diag_message" field.</summary>
  public const int DiagMessageFieldNumber = 32;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DiagnosticMessage DiagMessage {
    get { return payloadCase_ == PayloadOneofCase.DiagMessage ? (global::DiagnosticMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DiagMessage;
    }
  }

  /// <summary>Field number for the "admin_message" field.</summary>
  public const int AdminMessageFieldNumber = 33;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminMessage AdminMessage {
    get { return payloadCase_ == PayloadOneofCase.AdminMessage ? (global::AdminMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AdminMessage;
    }
  }

  /// <summary>Field number for the "event" field.</summary>
  public const int EventFieldNumber = 34;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EventMessage Event {
    get { return payloadCase_ == PayloadOneofCase.Event ? (global::EventMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Event;
    }
  }

  /// <summary>Field number for the "secure_device_settings" field.</summary>
  public const int SecureDeviceSettingsFieldNumber = 35;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SecureDeviceSettingsMessage SecureDeviceSettings {
    get { return payloadCase_ == PayloadOneofCase.SecureDeviceSettings ? (global::SecureDeviceSettingsMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SecureDeviceSettings;
    }
  }

  /// <summary>Field number for the "firmware_new" field.</summary>
  public const int FirmwareNewFieldNumber = 36;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FirmwareMetaMessage FirmwareNew {
    get { return payloadCase_ == PayloadOneofCase.FirmwareNew ? (global::FirmwareMetaMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FirmwareNew;
    }
  }

  /// <summary>Field number for the "firmware_control" field.</summary>
  public const int FirmwareControlFieldNumber = 37;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FirmwareControlMessage FirmwareControl {
    get { return payloadCase_ == PayloadOneofCase.FirmwareControl ? (global::FirmwareControlMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FirmwareControl;
    }
  }

  /// <summary>Field number for the "firmware_chunk" field.</summary>
  public const int FirmwareChunkFieldNumber = 38;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FirmwareChunkMessage FirmwareChunk {
    get { return payloadCase_ == PayloadOneofCase.FirmwareChunk ? (global::FirmwareChunkMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FirmwareChunk;
    }
  }

  /// <summary>Field number for the "level_cache_response" field.</summary>
  public const int LevelCacheResponseFieldNumber = 39;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LevelCacheResponse LevelCacheResponse {
    get { return payloadCase_ == PayloadOneofCase.LevelCacheResponse ? (global::LevelCacheResponse) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LevelCacheResponse;
    }
  }

  /// <summary>Field number for the "joined_rooms" field.</summary>
  public const int JoinedRoomsFieldNumber = 40;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::JoinedRoomsMessage JoinedRooms {
    get { return payloadCase_ == PayloadOneofCase.JoinedRooms ? (global::JoinedRoomsMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.JoinedRooms;
    }
  }

  /// <summary>Field number for the "list_extended" field.</summary>
  public const int ListExtendedFieldNumber = 41;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ExtendedListMessage ListExtended {
    get { return payloadCase_ == PayloadOneofCase.ListExtended ? (global::ExtendedListMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ListExtended;
    }
  }

  /// <summary>Field number for the "ayt_message" field.</summary>
  public const int AytMessageFieldNumber = 42;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AytMessage AytMessage {
    get { return payloadCase_ == PayloadOneofCase.AytMessage ? (global::AytMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.AytMessage;
    }
  }

  /// <summary>Field number for the "rdm_message" field.</summary>
  public const int RdmMessageFieldNumber = 43;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RDMMessage RdmMessage {
    get { return payloadCase_ == PayloadOneofCase.RdmMessage ? (global::RDMMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RdmMessage;
    }
  }

  /// <summary>Field number for the "rdm_response_message" field.</summary>
  public const int RdmResponseMessageFieldNumber = 44;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RDMResponseMessage RdmResponseMessage {
    get { return payloadCase_ == PayloadOneofCase.RdmResponseMessage ? (global::RDMResponseMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.RdmResponseMessage;
    }
  }

  /// <summary>Field number for the "logic_message" field.</summary>
  public const int LogicMessageFieldNumber = 45;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LogicMultiMessage LogicMessage {
    get { return payloadCase_ == PayloadOneofCase.LogicMessage ? (global::LogicMultiMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LogicMessage;
    }
  }

  /// <summary>Field number for the "secure_login" field.</summary>
  public const int SecureLoginFieldNumber = 46;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AdminSecureLoginMessage SecureLogin {
    get { return payloadCase_ == PayloadOneofCase.SecureLogin ? (global::AdminSecureLoginMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SecureLogin;
    }
  }

  /// <summary>Field number for the "device_state_message" field.</summary>
  public const int DeviceStateMessageFieldNumber = 47;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceStateMessage DeviceStateMessage {
    get { return payloadCase_ == PayloadOneofCase.DeviceStateMessage ? (global::DeviceStateMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DeviceStateMessage;
    }
  }

  /// <summary>Field number for the "spektra_calendar_day" field.</summary>
  public const int SpektraCalendarDayFieldNumber = 48;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraCalendarDayMessage SpektraCalendarDay {
    get { return payloadCase_ == PayloadOneofCase.SpektraCalendarDay ? (global::SpektraCalendarDayMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpektraCalendarDay;
    }
  }

  /// <summary>Field number for the "spektra_calendar_overview" field.</summary>
  public const int SpektraCalendarOverviewFieldNumber = 49;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SpektraCalendarOverviewMessage SpektraCalendarOverview {
    get { return payloadCase_ == PayloadOneofCase.SpektraCalendarOverview ? (global::SpektraCalendarOverviewMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpektraCalendarOverview;
    }
  }

  /// <summary>Field number for the "inputs_dali" field.</summary>
  public const int InputsDaliFieldNumber = 50;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIInputMultiMessage InputsDali {
    get { return payloadCase_ == PayloadOneofCase.InputsDali ? (global::DALIInputMultiMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.InputsDali;
    }
  }

  /// <summary>Field number for the "logs_read" field.</summary>
  public const int LogsReadFieldNumber = 51;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemLogReadMessage LogsRead {
    get { return payloadCase_ == PayloadOneofCase.LogsRead ? (global::SystemLogReadMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.LogsRead;
    }
  }

  /// <summary>Field number for the "metadata_read" field.</summary>
  public const int MetadataReadFieldNumber = 52;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SystemMetaDataReadMessage MetadataRead {
    get { return payloadCase_ == PayloadOneofCase.MetadataRead ? (global::SystemMetaDataReadMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.MetadataRead;
    }
  }

  /// <summary>Field number for the "dali_addressing_message" field.</summary>
  public const int DaliAddressingMessageFieldNumber = 53;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIAddressingMessage DaliAddressingMessage {
    get { return payloadCase_ == PayloadOneofCase.DaliAddressingMessage ? (global::DALIAddressingMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DaliAddressingMessage;
    }
  }

  /// <summary>Field number for the "dali_remapping_message" field.</summary>
  public const int DaliRemappingMessageFieldNumber = 54;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DALIRemappingMessage DaliRemappingMessage {
    get { return payloadCase_ == PayloadOneofCase.DaliRemappingMessage ? (global::DALIRemappingMessage) payload_ : null; }
    set {
      payload_ = value;
      payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.DaliRemappingMessage;
    }
  }

  private object payload_;
  /// <summary>Enum of possible cases for the "payload" oneof.</summary>
  public enum PayloadOneofCase {
    None = 0,
    Ack = 2,
    Inputs = 3,
    Outputs = 4,
    Irs = 5,
    Sensor = 6,
    List = 8,
    Alarm = 10,
    Alarms = 11,
    BurnIns = 12,
    SensorCommand = 13,
    ChangeProfile = 14,
    IdentifyMessage = 15,
    UpdateTime = 16,
    ReadDevice = 17,
    DaliMessage = 18,
    DaliQuery = 19,
    DmxMessage = 20,
    ExternalTrigger = 21,
    SpektraSettings = 22,
    SpektraSequence = 23,
    SpektraCalendar = 24,
    SpektraTheme = 25,
    SpektraRead = 26,
    SpektraControl = 27,
    DmxTranslator = 28,
    InputRequest = 29,
    InputResponse = 30,
    DiagSystem = 31,
    DiagMessage = 32,
    AdminMessage = 33,
    Event = 34,
    SecureDeviceSettings = 35,
    FirmwareNew = 36,
    FirmwareControl = 37,
    FirmwareChunk = 38,
    LevelCacheResponse = 39,
    JoinedRooms = 40,
    ListExtended = 41,
    AytMessage = 42,
    RdmMessage = 43,
    RdmResponseMessage = 44,
    LogicMessage = 45,
    SecureLogin = 46,
    DeviceStateMessage = 47,
    SpektraCalendarDay = 48,
    SpektraCalendarOverview = 49,
    InputsDali = 50,
    LogsRead = 51,
    MetadataRead = 52,
    DaliAddressingMessage = 53,
    DaliRemappingMessage = 54,
  }
  private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PayloadOneofCase PayloadCase {
    get { return payloadCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payloadCase_ = PayloadOneofCase.None;
    payload_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EdidioMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EdidioMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MessageId != other.MessageId) return false;
    if (!object.Equals(Ack, other.Ack)) return false;
    if (!object.Equals(Inputs, other.Inputs)) return false;
    if (!object.Equals(Outputs, other.Outputs)) return false;
    if (!object.Equals(Irs, other.Irs)) return false;
    if (!object.Equals(Sensor, other.Sensor)) return false;
    if (!object.Equals(List, other.List)) return false;
    if (!object.Equals(Alarm, other.Alarm)) return false;
    if (!object.Equals(Alarms, other.Alarms)) return false;
    if (!object.Equals(BurnIns, other.BurnIns)) return false;
    if (!object.Equals(SensorCommand, other.SensorCommand)) return false;
    if (!object.Equals(ChangeProfile, other.ChangeProfile)) return false;
    if (!object.Equals(IdentifyMessage, other.IdentifyMessage)) return false;
    if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
    if (!object.Equals(ReadDevice, other.ReadDevice)) return false;
    if (!object.Equals(DaliMessage, other.DaliMessage)) return false;
    if (!object.Equals(DaliQuery, other.DaliQuery)) return false;
    if (!object.Equals(DmxMessage, other.DmxMessage)) return false;
    if (!object.Equals(ExternalTrigger, other.ExternalTrigger)) return false;
    if (!object.Equals(SpektraSettings, other.SpektraSettings)) return false;
    if (!object.Equals(SpektraSequence, other.SpektraSequence)) return false;
    if (!object.Equals(SpektraCalendar, other.SpektraCalendar)) return false;
    if (!object.Equals(SpektraTheme, other.SpektraTheme)) return false;
    if (!object.Equals(SpektraRead, other.SpektraRead)) return false;
    if (!object.Equals(SpektraControl, other.SpektraControl)) return false;
    if (!object.Equals(DmxTranslator, other.DmxTranslator)) return false;
    if (!object.Equals(InputRequest, other.InputRequest)) return false;
    if (!object.Equals(InputResponse, other.InputResponse)) return false;
    if (!object.Equals(DiagSystem, other.DiagSystem)) return false;
    if (!object.Equals(DiagMessage, other.DiagMessage)) return false;
    if (!object.Equals(AdminMessage, other.AdminMessage)) return false;
    if (!object.Equals(Event, other.Event)) return false;
    if (!object.Equals(SecureDeviceSettings, other.SecureDeviceSettings)) return false;
    if (!object.Equals(FirmwareNew, other.FirmwareNew)) return false;
    if (!object.Equals(FirmwareControl, other.FirmwareControl)) return false;
    if (!object.Equals(FirmwareChunk, other.FirmwareChunk)) return false;
    if (!object.Equals(LevelCacheResponse, other.LevelCacheResponse)) return false;
    if (!object.Equals(JoinedRooms, other.JoinedRooms)) return false;
    if (!object.Equals(ListExtended, other.ListExtended)) return false;
    if (!object.Equals(AytMessage, other.AytMessage)) return false;
    if (!object.Equals(RdmMessage, other.RdmMessage)) return false;
    if (!object.Equals(RdmResponseMessage, other.RdmResponseMessage)) return false;
    if (!object.Equals(LogicMessage, other.LogicMessage)) return false;
    if (!object.Equals(SecureLogin, other.SecureLogin)) return false;
    if (!object.Equals(DeviceStateMessage, other.DeviceStateMessage)) return false;
    if (!object.Equals(SpektraCalendarDay, other.SpektraCalendarDay)) return false;
    if (!object.Equals(SpektraCalendarOverview, other.SpektraCalendarOverview)) return false;
    if (!object.Equals(InputsDali, other.InputsDali)) return false;
    if (!object.Equals(LogsRead, other.LogsRead)) return false;
    if (!object.Equals(MetadataRead, other.MetadataRead)) return false;
    if (!object.Equals(DaliAddressingMessage, other.DaliAddressingMessage)) return false;
    if (!object.Equals(DaliRemappingMessage, other.DaliRemappingMessage)) return false;
    if (PayloadCase != other.PayloadCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MessageId != 0) hash ^= MessageId.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Ack) hash ^= Ack.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Inputs) hash ^= Inputs.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Outputs) hash ^= Outputs.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Irs) hash ^= Irs.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Sensor) hash ^= Sensor.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.List) hash ^= List.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Alarm) hash ^= Alarm.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Alarms) hash ^= Alarms.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.BurnIns) hash ^= BurnIns.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SensorCommand) hash ^= SensorCommand.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.ChangeProfile) hash ^= ChangeProfile.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.IdentifyMessage) hash ^= IdentifyMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.UpdateTime) hash ^= UpdateTime.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.ReadDevice) hash ^= ReadDevice.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DaliMessage) hash ^= DaliMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DaliQuery) hash ^= DaliQuery.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DmxMessage) hash ^= DmxMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.ExternalTrigger) hash ^= ExternalTrigger.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpektraSettings) hash ^= SpektraSettings.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpektraSequence) hash ^= SpektraSequence.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpektraCalendar) hash ^= SpektraCalendar.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpektraTheme) hash ^= SpektraTheme.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpektraRead) hash ^= SpektraRead.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpektraControl) hash ^= SpektraControl.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DmxTranslator) hash ^= DmxTranslator.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.InputRequest) hash ^= InputRequest.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.InputResponse) hash ^= InputResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DiagSystem) hash ^= DiagSystem.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DiagMessage) hash ^= DiagMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AdminMessage) hash ^= AdminMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.Event) hash ^= Event.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SecureDeviceSettings) hash ^= SecureDeviceSettings.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.FirmwareNew) hash ^= FirmwareNew.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.FirmwareControl) hash ^= FirmwareControl.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.FirmwareChunk) hash ^= FirmwareChunk.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LevelCacheResponse) hash ^= LevelCacheResponse.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.JoinedRooms) hash ^= JoinedRooms.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.ListExtended) hash ^= ListExtended.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.AytMessage) hash ^= AytMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.RdmMessage) hash ^= RdmMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.RdmResponseMessage) hash ^= RdmResponseMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LogicMessage) hash ^= LogicMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SecureLogin) hash ^= SecureLogin.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DeviceStateMessage) hash ^= DeviceStateMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpektraCalendarDay) hash ^= SpektraCalendarDay.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.SpektraCalendarOverview) hash ^= SpektraCalendarOverview.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.InputsDali) hash ^= InputsDali.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.LogsRead) hash ^= LogsRead.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.MetadataRead) hash ^= MetadataRead.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DaliAddressingMessage) hash ^= DaliAddressingMessage.GetHashCode();
    if (payloadCase_ == PayloadOneofCase.DaliRemappingMessage) hash ^= DaliRemappingMessage.GetHashCode();
    hash ^= (int) payloadCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MessageId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(MessageId);
    }
    if (payloadCase_ == PayloadOneofCase.Ack) {
      output.WriteRawTag(18);
      output.WriteMessage(Ack);
    }
    if (payloadCase_ == PayloadOneofCase.Inputs) {
      output.WriteRawTag(26);
      output.WriteMessage(Inputs);
    }
    if (payloadCase_ == PayloadOneofCase.Outputs) {
      output.WriteRawTag(34);
      output.WriteMessage(Outputs);
    }
    if (payloadCase_ == PayloadOneofCase.Irs) {
      output.WriteRawTag(42);
      output.WriteMessage(Irs);
    }
    if (payloadCase_ == PayloadOneofCase.Sensor) {
      output.WriteRawTag(50);
      output.WriteMessage(Sensor);
    }
    if (payloadCase_ == PayloadOneofCase.List) {
      output.WriteRawTag(66);
      output.WriteMessage(List);
    }
    if (payloadCase_ == PayloadOneofCase.Alarm) {
      output.WriteRawTag(82);
      output.WriteMessage(Alarm);
    }
    if (payloadCase_ == PayloadOneofCase.Alarms) {
      output.WriteRawTag(90);
      output.WriteMessage(Alarms);
    }
    if (payloadCase_ == PayloadOneofCase.BurnIns) {
      output.WriteRawTag(98);
      output.WriteMessage(BurnIns);
    }
    if (payloadCase_ == PayloadOneofCase.SensorCommand) {
      output.WriteRawTag(106);
      output.WriteMessage(SensorCommand);
    }
    if (payloadCase_ == PayloadOneofCase.ChangeProfile) {
      output.WriteRawTag(114);
      output.WriteMessage(ChangeProfile);
    }
    if (payloadCase_ == PayloadOneofCase.IdentifyMessage) {
      output.WriteRawTag(122);
      output.WriteMessage(IdentifyMessage);
    }
    if (payloadCase_ == PayloadOneofCase.UpdateTime) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(UpdateTime);
    }
    if (payloadCase_ == PayloadOneofCase.ReadDevice) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(ReadDevice);
    }
    if (payloadCase_ == PayloadOneofCase.DaliMessage) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(DaliMessage);
    }
    if (payloadCase_ == PayloadOneofCase.DaliQuery) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(DaliQuery);
    }
    if (payloadCase_ == PayloadOneofCase.DmxMessage) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(DmxMessage);
    }
    if (payloadCase_ == PayloadOneofCase.ExternalTrigger) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(ExternalTrigger);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraSettings) {
      output.WriteRawTag(178, 1);
      output.WriteMessage(SpektraSettings);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraSequence) {
      output.WriteRawTag(186, 1);
      output.WriteMessage(SpektraSequence);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraCalendar) {
      output.WriteRawTag(194, 1);
      output.WriteMessage(SpektraCalendar);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraTheme) {
      output.WriteRawTag(202, 1);
      output.WriteMessage(SpektraTheme);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraRead) {
      output.WriteRawTag(210, 1);
      output.WriteMessage(SpektraRead);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraControl) {
      output.WriteRawTag(218, 1);
      output.WriteMessage(SpektraControl);
    }
    if (payloadCase_ == PayloadOneofCase.DmxTranslator) {
      output.WriteRawTag(226, 1);
      output.WriteMessage(DmxTranslator);
    }
    if (payloadCase_ == PayloadOneofCase.InputRequest) {
      output.WriteRawTag(234, 1);
      output.WriteMessage(InputRequest);
    }
    if (payloadCase_ == PayloadOneofCase.InputResponse) {
      output.WriteRawTag(242, 1);
      output.WriteMessage(InputResponse);
    }
    if (payloadCase_ == PayloadOneofCase.DiagSystem) {
      output.WriteRawTag(250, 1);
      output.WriteMessage(DiagSystem);
    }
    if (payloadCase_ == PayloadOneofCase.DiagMessage) {
      output.WriteRawTag(130, 2);
      output.WriteMessage(DiagMessage);
    }
    if (payloadCase_ == PayloadOneofCase.AdminMessage) {
      output.WriteRawTag(138, 2);
      output.WriteMessage(AdminMessage);
    }
    if (payloadCase_ == PayloadOneofCase.Event) {
      output.WriteRawTag(146, 2);
      output.WriteMessage(Event);
    }
    if (payloadCase_ == PayloadOneofCase.SecureDeviceSettings) {
      output.WriteRawTag(154, 2);
      output.WriteMessage(SecureDeviceSettings);
    }
    if (payloadCase_ == PayloadOneofCase.FirmwareNew) {
      output.WriteRawTag(162, 2);
      output.WriteMessage(FirmwareNew);
    }
    if (payloadCase_ == PayloadOneofCase.FirmwareControl) {
      output.WriteRawTag(170, 2);
      output.WriteMessage(FirmwareControl);
    }
    if (payloadCase_ == PayloadOneofCase.FirmwareChunk) {
      output.WriteRawTag(178, 2);
      output.WriteMessage(FirmwareChunk);
    }
    if (payloadCase_ == PayloadOneofCase.LevelCacheResponse) {
      output.WriteRawTag(186, 2);
      output.WriteMessage(LevelCacheResponse);
    }
    if (payloadCase_ == PayloadOneofCase.JoinedRooms) {
      output.WriteRawTag(194, 2);
      output.WriteMessage(JoinedRooms);
    }
    if (payloadCase_ == PayloadOneofCase.ListExtended) {
      output.WriteRawTag(202, 2);
      output.WriteMessage(ListExtended);
    }
    if (payloadCase_ == PayloadOneofCase.AytMessage) {
      output.WriteRawTag(210, 2);
      output.WriteMessage(AytMessage);
    }
    if (payloadCase_ == PayloadOneofCase.RdmMessage) {
      output.WriteRawTag(218, 2);
      output.WriteMessage(RdmMessage);
    }
    if (payloadCase_ == PayloadOneofCase.RdmResponseMessage) {
      output.WriteRawTag(226, 2);
      output.WriteMessage(RdmResponseMessage);
    }
    if (payloadCase_ == PayloadOneofCase.LogicMessage) {
      output.WriteRawTag(234, 2);
      output.WriteMessage(LogicMessage);
    }
    if (payloadCase_ == PayloadOneofCase.SecureLogin) {
      output.WriteRawTag(242, 2);
      output.WriteMessage(SecureLogin);
    }
    if (payloadCase_ == PayloadOneofCase.DeviceStateMessage) {
      output.WriteRawTag(250, 2);
      output.WriteMessage(DeviceStateMessage);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraCalendarDay) {
      output.WriteRawTag(130, 3);
      output.WriteMessage(SpektraCalendarDay);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraCalendarOverview) {
      output.WriteRawTag(138, 3);
      output.WriteMessage(SpektraCalendarOverview);
    }
    if (payloadCase_ == PayloadOneofCase.InputsDali) {
      output.WriteRawTag(146, 3);
      output.WriteMessage(InputsDali);
    }
    if (payloadCase_ == PayloadOneofCase.LogsRead) {
      output.WriteRawTag(154, 3);
      output.WriteMessage(LogsRead);
    }
    if (payloadCase_ == PayloadOneofCase.MetadataRead) {
      output.WriteRawTag(162, 3);
      output.WriteMessage(MetadataRead);
    }
    if (payloadCase_ == PayloadOneofCase.DaliAddressingMessage) {
      output.WriteRawTag(170, 3);
      output.WriteMessage(DaliAddressingMessage);
    }
    if (payloadCase_ == PayloadOneofCase.DaliRemappingMessage) {
      output.WriteRawTag(178, 3);
      output.WriteMessage(DaliRemappingMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MessageId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageId);
    }
    if (payloadCase_ == PayloadOneofCase.Ack) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ack);
    }
    if (payloadCase_ == PayloadOneofCase.Inputs) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inputs);
    }
    if (payloadCase_ == PayloadOneofCase.Outputs) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Outputs);
    }
    if (payloadCase_ == PayloadOneofCase.Irs) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Irs);
    }
    if (payloadCase_ == PayloadOneofCase.Sensor) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sensor);
    }
    if (payloadCase_ == PayloadOneofCase.List) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(List);
    }
    if (payloadCase_ == PayloadOneofCase.Alarm) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alarm);
    }
    if (payloadCase_ == PayloadOneofCase.Alarms) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alarms);
    }
    if (payloadCase_ == PayloadOneofCase.BurnIns) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BurnIns);
    }
    if (payloadCase_ == PayloadOneofCase.SensorCommand) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensorCommand);
    }
    if (payloadCase_ == PayloadOneofCase.ChangeProfile) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeProfile);
    }
    if (payloadCase_ == PayloadOneofCase.IdentifyMessage) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdentifyMessage);
    }
    if (payloadCase_ == PayloadOneofCase.UpdateTime) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
    }
    if (payloadCase_ == PayloadOneofCase.ReadDevice) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReadDevice);
    }
    if (payloadCase_ == PayloadOneofCase.DaliMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DaliMessage);
    }
    if (payloadCase_ == PayloadOneofCase.DaliQuery) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DaliQuery);
    }
    if (payloadCase_ == PayloadOneofCase.DmxMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DmxMessage);
    }
    if (payloadCase_ == PayloadOneofCase.ExternalTrigger) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExternalTrigger);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraSettings) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpektraSettings);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraSequence) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpektraSequence);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraCalendar) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpektraCalendar);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraTheme) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpektraTheme);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraRead) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpektraRead);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraControl) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpektraControl);
    }
    if (payloadCase_ == PayloadOneofCase.DmxTranslator) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DmxTranslator);
    }
    if (payloadCase_ == PayloadOneofCase.InputRequest) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(InputRequest);
    }
    if (payloadCase_ == PayloadOneofCase.InputResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(InputResponse);
    }
    if (payloadCase_ == PayloadOneofCase.DiagSystem) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiagSystem);
    }
    if (payloadCase_ == PayloadOneofCase.DiagMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiagMessage);
    }
    if (payloadCase_ == PayloadOneofCase.AdminMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AdminMessage);
    }
    if (payloadCase_ == PayloadOneofCase.Event) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Event);
    }
    if (payloadCase_ == PayloadOneofCase.SecureDeviceSettings) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecureDeviceSettings);
    }
    if (payloadCase_ == PayloadOneofCase.FirmwareNew) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(FirmwareNew);
    }
    if (payloadCase_ == PayloadOneofCase.FirmwareControl) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(FirmwareControl);
    }
    if (payloadCase_ == PayloadOneofCase.FirmwareChunk) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(FirmwareChunk);
    }
    if (payloadCase_ == PayloadOneofCase.LevelCacheResponse) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LevelCacheResponse);
    }
    if (payloadCase_ == PayloadOneofCase.JoinedRooms) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinedRooms);
    }
    if (payloadCase_ == PayloadOneofCase.ListExtended) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ListExtended);
    }
    if (payloadCase_ == PayloadOneofCase.AytMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(AytMessage);
    }
    if (payloadCase_ == PayloadOneofCase.RdmMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RdmMessage);
    }
    if (payloadCase_ == PayloadOneofCase.RdmResponseMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RdmResponseMessage);
    }
    if (payloadCase_ == PayloadOneofCase.LogicMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LogicMessage);
    }
    if (payloadCase_ == PayloadOneofCase.SecureLogin) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SecureLogin);
    }
    if (payloadCase_ == PayloadOneofCase.DeviceStateMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeviceStateMessage);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraCalendarDay) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpektraCalendarDay);
    }
    if (payloadCase_ == PayloadOneofCase.SpektraCalendarOverview) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(SpektraCalendarOverview);
    }
    if (payloadCase_ == PayloadOneofCase.InputsDali) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(InputsDali);
    }
    if (payloadCase_ == PayloadOneofCase.LogsRead) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LogsRead);
    }
    if (payloadCase_ == PayloadOneofCase.MetadataRead) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MetadataRead);
    }
    if (payloadCase_ == PayloadOneofCase.DaliAddressingMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DaliAddressingMessage);
    }
    if (payloadCase_ == PayloadOneofCase.DaliRemappingMessage) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DaliRemappingMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EdidioMessage other) {
    if (other == null) {
      return;
    }
    if (other.MessageId != 0) {
      MessageId = other.MessageId;
    }
    switch (other.PayloadCase) {
      case PayloadOneofCase.Ack:
        if (Ack == null) {
          Ack = new global::AckMessage();
        }
        Ack.MergeFrom(other.Ack);
        break;
      case PayloadOneofCase.Inputs:
        if (Inputs == null) {
          Inputs = new global::InputMultiMessage();
        }
        Inputs.MergeFrom(other.Inputs);
        break;
      case PayloadOneofCase.Outputs:
        if (Outputs == null) {
          Outputs = new global::OutputMultiMessage();
        }
        Outputs.MergeFrom(other.Outputs);
        break;
      case PayloadOneofCase.Irs:
        if (Irs == null) {
          Irs = new global::IRMultiMessage();
        }
        Irs.MergeFrom(other.Irs);
        break;
      case PayloadOneofCase.Sensor:
        if (Sensor == null) {
          Sensor = new global::SensorMessage();
        }
        Sensor.MergeFrom(other.Sensor);
        break;
      case PayloadOneofCase.List:
        if (List == null) {
          List = new global::ListMessage();
        }
        List.MergeFrom(other.List);
        break;
      case PayloadOneofCase.Alarm:
        if (Alarm == null) {
          Alarm = new global::AlarmMessage();
        }
        Alarm.MergeFrom(other.Alarm);
        break;
      case PayloadOneofCase.Alarms:
        if (Alarms == null) {
          Alarms = new global::AlarmMultiMessage();
        }
        Alarms.MergeFrom(other.Alarms);
        break;
      case PayloadOneofCase.BurnIns:
        if (BurnIns == null) {
          BurnIns = new global::BurnInMultiMessage();
        }
        BurnIns.MergeFrom(other.BurnIns);
        break;
      case PayloadOneofCase.SensorCommand:
        if (SensorCommand == null) {
          SensorCommand = new global::SensorCommandMessage();
        }
        SensorCommand.MergeFrom(other.SensorCommand);
        break;
      case PayloadOneofCase.ChangeProfile:
        if (ChangeProfile == null) {
          ChangeProfile = new global::ChangeProfileMessage();
        }
        ChangeProfile.MergeFrom(other.ChangeProfile);
        break;
      case PayloadOneofCase.IdentifyMessage:
        if (IdentifyMessage == null) {
          IdentifyMessage = new global::IdentifyMessage();
        }
        IdentifyMessage.MergeFrom(other.IdentifyMessage);
        break;
      case PayloadOneofCase.UpdateTime:
        if (UpdateTime == null) {
          UpdateTime = new global::UpdateTimeMessage();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
        break;
      case PayloadOneofCase.ReadDevice:
        if (ReadDevice == null) {
          ReadDevice = new global::ReadDeviceMessage();
        }
        ReadDevice.MergeFrom(other.ReadDevice);
        break;
      case PayloadOneofCase.DaliMessage:
        if (DaliMessage == null) {
          DaliMessage = new global::DALIMessage();
        }
        DaliMessage.MergeFrom(other.DaliMessage);
        break;
      case PayloadOneofCase.DaliQuery:
        if (DaliQuery == null) {
          DaliQuery = new global::DALIQueryResponse();
        }
        DaliQuery.MergeFrom(other.DaliQuery);
        break;
      case PayloadOneofCase.DmxMessage:
        if (DmxMessage == null) {
          DmxMessage = new global::DMXMessage();
        }
        DmxMessage.MergeFrom(other.DmxMessage);
        break;
      case PayloadOneofCase.ExternalTrigger:
        if (ExternalTrigger == null) {
          ExternalTrigger = new global::ExternalTriggerMessage();
        }
        ExternalTrigger.MergeFrom(other.ExternalTrigger);
        break;
      case PayloadOneofCase.SpektraSettings:
        if (SpektraSettings == null) {
          SpektraSettings = new global::SpektraSettingMessage();
        }
        SpektraSettings.MergeFrom(other.SpektraSettings);
        break;
      case PayloadOneofCase.SpektraSequence:
        if (SpektraSequence == null) {
          SpektraSequence = new global::SpektraSequenceConfigMessage();
        }
        SpektraSequence.MergeFrom(other.SpektraSequence);
        break;
      case PayloadOneofCase.SpektraCalendar:
        if (SpektraCalendar == null) {
          SpektraCalendar = new global::SpektraCalendarMessage();
        }
        SpektraCalendar.MergeFrom(other.SpektraCalendar);
        break;
      case PayloadOneofCase.SpektraTheme:
        if (SpektraTheme == null) {
          SpektraTheme = new global::SpektraThemeConfigMessage();
        }
        SpektraTheme.MergeFrom(other.SpektraTheme);
        break;
      case PayloadOneofCase.SpektraRead:
        if (SpektraRead == null) {
          SpektraRead = new global::SpektraReadMessage();
        }
        SpektraRead.MergeFrom(other.SpektraRead);
        break;
      case PayloadOneofCase.SpektraControl:
        if (SpektraControl == null) {
          SpektraControl = new global::SpektraControlMessage();
        }
        SpektraControl.MergeFrom(other.SpektraControl);
        break;
      case PayloadOneofCase.DmxTranslator:
        if (DmxTranslator == null) {
          DmxTranslator = new global::DMXProtocolTranslation();
        }
        DmxTranslator.MergeFrom(other.DmxTranslator);
        break;
      case PayloadOneofCase.InputRequest:
        if (InputRequest == null) {
          InputRequest = new global::InputStateMessage();
        }
        InputRequest.MergeFrom(other.InputRequest);
        break;
      case PayloadOneofCase.InputResponse:
        if (InputResponse == null) {
          InputResponse = new global::InputStateResponse();
        }
        InputResponse.MergeFrom(other.InputResponse);
        break;
      case PayloadOneofCase.DiagSystem:
        if (DiagSystem == null) {
          DiagSystem = new global::DiagnosticSystemInfoResponse();
        }
        DiagSystem.MergeFrom(other.DiagSystem);
        break;
      case PayloadOneofCase.DiagMessage:
        if (DiagMessage == null) {
          DiagMessage = new global::DiagnosticMessage();
        }
        DiagMessage.MergeFrom(other.DiagMessage);
        break;
      case PayloadOneofCase.AdminMessage:
        if (AdminMessage == null) {
          AdminMessage = new global::AdminMessage();
        }
        AdminMessage.MergeFrom(other.AdminMessage);
        break;
      case PayloadOneofCase.Event:
        if (Event == null) {
          Event = new global::EventMessage();
        }
        Event.MergeFrom(other.Event);
        break;
      case PayloadOneofCase.SecureDeviceSettings:
        if (SecureDeviceSettings == null) {
          SecureDeviceSettings = new global::SecureDeviceSettingsMessage();
        }
        SecureDeviceSettings.MergeFrom(other.SecureDeviceSettings);
        break;
      case PayloadOneofCase.FirmwareNew:
        if (FirmwareNew == null) {
          FirmwareNew = new global::FirmwareMetaMessage();
        }
        FirmwareNew.MergeFrom(other.FirmwareNew);
        break;
      case PayloadOneofCase.FirmwareControl:
        if (FirmwareControl == null) {
          FirmwareControl = new global::FirmwareControlMessage();
        }
        FirmwareControl.MergeFrom(other.FirmwareControl);
        break;
      case PayloadOneofCase.FirmwareChunk:
        if (FirmwareChunk == null) {
          FirmwareChunk = new global::FirmwareChunkMessage();
        }
        FirmwareChunk.MergeFrom(other.FirmwareChunk);
        break;
      case PayloadOneofCase.LevelCacheResponse:
        if (LevelCacheResponse == null) {
          LevelCacheResponse = new global::LevelCacheResponse();
        }
        LevelCacheResponse.MergeFrom(other.LevelCacheResponse);
        break;
      case PayloadOneofCase.JoinedRooms:
        if (JoinedRooms == null) {
          JoinedRooms = new global::JoinedRoomsMessage();
        }
        JoinedRooms.MergeFrom(other.JoinedRooms);
        break;
      case PayloadOneofCase.ListExtended:
        if (ListExtended == null) {
          ListExtended = new global::ExtendedListMessage();
        }
        ListExtended.MergeFrom(other.ListExtended);
        break;
      case PayloadOneofCase.AytMessage:
        if (AytMessage == null) {
          AytMessage = new global::AytMessage();
        }
        AytMessage.MergeFrom(other.AytMessage);
        break;
      case PayloadOneofCase.RdmMessage:
        if (RdmMessage == null) {
          RdmMessage = new global::RDMMessage();
        }
        RdmMessage.MergeFrom(other.RdmMessage);
        break;
      case PayloadOneofCase.RdmResponseMessage:
        if (RdmResponseMessage == null) {
          RdmResponseMessage = new global::RDMResponseMessage();
        }
        RdmResponseMessage.MergeFrom(other.RdmResponseMessage);
        break;
      case PayloadOneofCase.LogicMessage:
        if (LogicMessage == null) {
          LogicMessage = new global::LogicMultiMessage();
        }
        LogicMessage.MergeFrom(other.LogicMessage);
        break;
      case PayloadOneofCase.SecureLogin:
        if (SecureLogin == null) {
          SecureLogin = new global::AdminSecureLoginMessage();
        }
        SecureLogin.MergeFrom(other.SecureLogin);
        break;
      case PayloadOneofCase.DeviceStateMessage:
        if (DeviceStateMessage == null) {
          DeviceStateMessage = new global::DeviceStateMessage();
        }
        DeviceStateMessage.MergeFrom(other.DeviceStateMessage);
        break;
      case PayloadOneofCase.SpektraCalendarDay:
        if (SpektraCalendarDay == null) {
          SpektraCalendarDay = new global::SpektraCalendarDayMessage();
        }
        SpektraCalendarDay.MergeFrom(other.SpektraCalendarDay);
        break;
      case PayloadOneofCase.SpektraCalendarOverview:
        if (SpektraCalendarOverview == null) {
          SpektraCalendarOverview = new global::SpektraCalendarOverviewMessage();
        }
        SpektraCalendarOverview.MergeFrom(other.SpektraCalendarOverview);
        break;
      case PayloadOneofCase.InputsDali:
        if (InputsDali == null) {
          InputsDali = new global::DALIInputMultiMessage();
        }
        InputsDali.MergeFrom(other.InputsDali);
        break;
      case PayloadOneofCase.LogsRead:
        if (LogsRead == null) {
          LogsRead = new global::SystemLogReadMessage();
        }
        LogsRead.MergeFrom(other.LogsRead);
        break;
      case PayloadOneofCase.MetadataRead:
        if (MetadataRead == null) {
          MetadataRead = new global::SystemMetaDataReadMessage();
        }
        MetadataRead.MergeFrom(other.MetadataRead);
        break;
      case PayloadOneofCase.DaliAddressingMessage:
        if (DaliAddressingMessage == null) {
          DaliAddressingMessage = new global::DALIAddressingMessage();
        }
        DaliAddressingMessage.MergeFrom(other.DaliAddressingMessage);
        break;
      case PayloadOneofCase.DaliRemappingMessage:
        if (DaliRemappingMessage == null) {
          DaliRemappingMessage = new global::DALIRemappingMessage();
        }
        DaliRemappingMessage.MergeFrom(other.DaliRemappingMessage);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MessageId = input.ReadUInt32();
          break;
        }
        case 18: {
          global::AckMessage subBuilder = new global::AckMessage();
          if (payloadCase_ == PayloadOneofCase.Ack) {
            subBuilder.MergeFrom(Ack);
          }
          input.ReadMessage(subBuilder);
          Ack = subBuilder;
          break;
        }
        case 26: {
          global::InputMultiMessage subBuilder = new global::InputMultiMessage();
          if (payloadCase_ == PayloadOneofCase.Inputs) {
            subBuilder.MergeFrom(Inputs);
          }
          input.ReadMessage(subBuilder);
          Inputs = subBuilder;
          break;
        }
        case 34: {
          global::OutputMultiMessage subBuilder = new global::OutputMultiMessage();
          if (payloadCase_ == PayloadOneofCase.Outputs) {
            subBuilder.MergeFrom(Outputs);
          }
          input.ReadMessage(subBuilder);
          Outputs = subBuilder;
          break;
        }
        case 42: {
          global::IRMultiMessage subBuilder = new global::IRMultiMessage();
          if (payloadCase_ == PayloadOneofCase.Irs) {
            subBuilder.MergeFrom(Irs);
          }
          input.ReadMessage(subBuilder);
          Irs = subBuilder;
          break;
        }
        case 50: {
          global::SensorMessage subBuilder = new global::SensorMessage();
          if (payloadCase_ == PayloadOneofCase.Sensor) {
            subBuilder.MergeFrom(Sensor);
          }
          input.ReadMessage(subBuilder);
          Sensor = subBuilder;
          break;
        }
        case 66: {
          global::ListMessage subBuilder = new global::ListMessage();
          if (payloadCase_ == PayloadOneofCase.List) {
            subBuilder.MergeFrom(List);
          }
          input.ReadMessage(subBuilder);
          List = subBuilder;
          break;
        }
        case 82: {
          global::AlarmMessage subBuilder = new global::AlarmMessage();
          if (payloadCase_ == PayloadOneofCase.Alarm) {
            subBuilder.MergeFrom(Alarm);
          }
          input.ReadMessage(subBuilder);
          Alarm = subBuilder;
          break;
        }
        case 90: {
          global::AlarmMultiMessage subBuilder = new global::AlarmMultiMessage();
          if (payloadCase_ == PayloadOneofCase.Alarms) {
            subBuilder.MergeFrom(Alarms);
          }
          input.ReadMessage(subBuilder);
          Alarms = subBuilder;
          break;
        }
        case 98: {
          global::BurnInMultiMessage subBuilder = new global::BurnInMultiMessage();
          if (payloadCase_ == PayloadOneofCase.BurnIns) {
            subBuilder.MergeFrom(BurnIns);
          }
          input.ReadMessage(subBuilder);
          BurnIns = subBuilder;
          break;
        }
        case 106: {
          global::SensorCommandMessage subBuilder = new global::SensorCommandMessage();
          if (payloadCase_ == PayloadOneofCase.SensorCommand) {
            subBuilder.MergeFrom(SensorCommand);
          }
          input.ReadMessage(subBuilder);
          SensorCommand = subBuilder;
          break;
        }
        case 114: {
          global::ChangeProfileMessage subBuilder = new global::ChangeProfileMessage();
          if (payloadCase_ == PayloadOneofCase.ChangeProfile) {
            subBuilder.MergeFrom(ChangeProfile);
          }
          input.ReadMessage(subBuilder);
          ChangeProfile = subBuilder;
          break;
        }
        case 122: {
          global::IdentifyMessage subBuilder = new global::IdentifyMessage();
          if (payloadCase_ == PayloadOneofCase.IdentifyMessage) {
            subBuilder.MergeFrom(IdentifyMessage);
          }
          input.ReadMessage(subBuilder);
          IdentifyMessage = subBuilder;
          break;
        }
        case 130: {
          global::UpdateTimeMessage subBuilder = new global::UpdateTimeMessage();
          if (payloadCase_ == PayloadOneofCase.UpdateTime) {
            subBuilder.MergeFrom(UpdateTime);
          }
          input.ReadMessage(subBuilder);
          UpdateTime = subBuilder;
          break;
        }
        case 138: {
          global::ReadDeviceMessage subBuilder = new global::ReadDeviceMessage();
          if (payloadCase_ == PayloadOneofCase.ReadDevice) {
            subBuilder.MergeFrom(ReadDevice);
          }
          input.ReadMessage(subBuilder);
          ReadDevice = subBuilder;
          break;
        }
        case 146: {
          global::DALIMessage subBuilder = new global::DALIMessage();
          if (payloadCase_ == PayloadOneofCase.DaliMessage) {
            subBuilder.MergeFrom(DaliMessage);
          }
          input.ReadMessage(subBuilder);
          DaliMessage = subBuilder;
          break;
        }
        case 154: {
          global::DALIQueryResponse subBuilder = new global::DALIQueryResponse();
          if (payloadCase_ == PayloadOneofCase.DaliQuery) {
            subBuilder.MergeFrom(DaliQuery);
          }
          input.ReadMessage(subBuilder);
          DaliQuery = subBuilder;
          break;
        }
        case 162: {
          global::DMXMessage subBuilder = new global::DMXMessage();
          if (payloadCase_ == PayloadOneofCase.DmxMessage) {
            subBuilder.MergeFrom(DmxMessage);
          }
          input.ReadMessage(subBuilder);
          DmxMessage = subBuilder;
          break;
        }
        case 170: {
          global::ExternalTriggerMessage subBuilder = new global::ExternalTriggerMessage();
          if (payloadCase_ == PayloadOneofCase.ExternalTrigger) {
            subBuilder.MergeFrom(ExternalTrigger);
          }
          input.ReadMessage(subBuilder);
          ExternalTrigger = subBuilder;
          break;
        }
        case 178: {
          global::SpektraSettingMessage subBuilder = new global::SpektraSettingMessage();
          if (payloadCase_ == PayloadOneofCase.SpektraSettings) {
            subBuilder.MergeFrom(SpektraSettings);
          }
          input.ReadMessage(subBuilder);
          SpektraSettings = subBuilder;
          break;
        }
        case 186: {
          global::SpektraSequenceConfigMessage subBuilder = new global::SpektraSequenceConfigMessage();
          if (payloadCase_ == PayloadOneofCase.SpektraSequence) {
            subBuilder.MergeFrom(SpektraSequence);
          }
          input.ReadMessage(subBuilder);
          SpektraSequence = subBuilder;
          break;
        }
        case 194: {
          global::SpektraCalendarMessage subBuilder = new global::SpektraCalendarMessage();
          if (payloadCase_ == PayloadOneofCase.SpektraCalendar) {
            subBuilder.MergeFrom(SpektraCalendar);
          }
          input.ReadMessage(subBuilder);
          SpektraCalendar = subBuilder;
          break;
        }
        case 202: {
          global::SpektraThemeConfigMessage subBuilder = new global::SpektraThemeConfigMessage();
          if (payloadCase_ == PayloadOneofCase.SpektraTheme) {
            subBuilder.MergeFrom(SpektraTheme);
          }
          input.ReadMessage(subBuilder);
          SpektraTheme = subBuilder;
          break;
        }
        case 210: {
          global::SpektraReadMessage subBuilder = new global::SpektraReadMessage();
          if (payloadCase_ == PayloadOneofCase.SpektraRead) {
            subBuilder.MergeFrom(SpektraRead);
          }
          input.ReadMessage(subBuilder);
          SpektraRead = subBuilder;
          break;
        }
        case 218: {
          global::SpektraControlMessage subBuilder = new global::SpektraControlMessage();
          if (payloadCase_ == PayloadOneofCase.SpektraControl) {
            subBuilder.MergeFrom(SpektraControl);
          }
          input.ReadMessage(subBuilder);
          SpektraControl = subBuilder;
          break;
        }
        case 226: {
          global::DMXProtocolTranslation subBuilder = new global::DMXProtocolTranslation();
          if (payloadCase_ == PayloadOneofCase.DmxTranslator) {
            subBuilder.MergeFrom(DmxTranslator);
          }
          input.ReadMessage(subBuilder);
          DmxTranslator = subBuilder;
          break;
        }
        case 234: {
          global::InputStateMessage subBuilder = new global::InputStateMessage();
          if (payloadCase_ == PayloadOneofCase.InputRequest) {
            subBuilder.MergeFrom(InputRequest);
          }
          input.ReadMessage(subBuilder);
          InputRequest = subBuilder;
          break;
        }
        case 242: {
          global::InputStateResponse subBuilder = new global::InputStateResponse();
          if (payloadCase_ == PayloadOneofCase.InputResponse) {
            subBuilder.MergeFrom(InputResponse);
          }
          input.ReadMessage(subBuilder);
          InputResponse = subBuilder;
          break;
        }
        case 250: {
          global::DiagnosticSystemInfoResponse subBuilder = new global::DiagnosticSystemInfoResponse();
          if (payloadCase_ == PayloadOneofCase.DiagSystem) {
            subBuilder.MergeFrom(DiagSystem);
          }
          input.ReadMessage(subBuilder);
          DiagSystem = subBuilder;
          break;
        }
        case 258: {
          global::DiagnosticMessage subBuilder = new global::DiagnosticMessage();
          if (payloadCase_ == PayloadOneofCase.DiagMessage) {
            subBuilder.MergeFrom(DiagMessage);
          }
          input.ReadMessage(subBuilder);
          DiagMessage = subBuilder;
          break;
        }
        case 266: {
          global::AdminMessage subBuilder = new global::AdminMessage();
          if (payloadCase_ == PayloadOneofCase.AdminMessage) {
            subBuilder.MergeFrom(AdminMessage);
          }
          input.ReadMessage(subBuilder);
          AdminMessage = subBuilder;
          break;
        }
        case 274: {
          global::EventMessage subBuilder = new global::EventMessage();
          if (payloadCase_ == PayloadOneofCase.Event) {
            subBuilder.MergeFrom(Event);
          }
          input.ReadMessage(subBuilder);
          Event = subBuilder;
          break;
        }
        case 282: {
          global::SecureDeviceSettingsMessage subBuilder = new global::SecureDeviceSettingsMessage();
          if (payloadCase_ == PayloadOneofCase.SecureDeviceSettings) {
            subBuilder.MergeFrom(SecureDeviceSettings);
          }
          input.ReadMessage(subBuilder);
          SecureDeviceSettings = subBuilder;
          break;
        }
        case 290: {
          global::FirmwareMetaMessage subBuilder = new global::FirmwareMetaMessage();
          if (payloadCase_ == PayloadOneofCase.FirmwareNew) {
            subBuilder.MergeFrom(FirmwareNew);
          }
          input.ReadMessage(subBuilder);
          FirmwareNew = subBuilder;
          break;
        }
        case 298: {
          global::FirmwareControlMessage subBuilder = new global::FirmwareControlMessage();
          if (payloadCase_ == PayloadOneofCase.FirmwareControl) {
            subBuilder.MergeFrom(FirmwareControl);
          }
          input.ReadMessage(subBuilder);
          FirmwareControl = subBuilder;
          break;
        }
        case 306: {
          global::FirmwareChunkMessage subBuilder = new global::FirmwareChunkMessage();
          if (payloadCase_ == PayloadOneofCase.FirmwareChunk) {
            subBuilder.MergeFrom(FirmwareChunk);
          }
          input.ReadMessage(subBuilder);
          FirmwareChunk = subBuilder;
          break;
        }
        case 314: {
          global::LevelCacheResponse subBuilder = new global::LevelCacheResponse();
          if (payloadCase_ == PayloadOneofCase.LevelCacheResponse) {
            subBuilder.MergeFrom(LevelCacheResponse);
          }
          input.ReadMessage(subBuilder);
          LevelCacheResponse = subBuilder;
          break;
        }
        case 322: {
          global::JoinedRoomsMessage subBuilder = new global::JoinedRoomsMessage();
          if (payloadCase_ == PayloadOneofCase.JoinedRooms) {
            subBuilder.MergeFrom(JoinedRooms);
          }
          input.ReadMessage(subBuilder);
          JoinedRooms = subBuilder;
          break;
        }
        case 330: {
          global::ExtendedListMessage subBuilder = new global::ExtendedListMessage();
          if (payloadCase_ == PayloadOneofCase.ListExtended) {
            subBuilder.MergeFrom(ListExtended);
          }
          input.ReadMessage(subBuilder);
          ListExtended = subBuilder;
          break;
        }
        case 338: {
          global::AytMessage subBuilder = new global::AytMessage();
          if (payloadCase_ == PayloadOneofCase.AytMessage) {
            subBuilder.MergeFrom(AytMessage);
          }
          input.ReadMessage(subBuilder);
          AytMessage = subBuilder;
          break;
        }
        case 346: {
          global::RDMMessage subBuilder = new global::RDMMessage();
          if (payloadCase_ == PayloadOneofCase.RdmMessage) {
            subBuilder.MergeFrom(RdmMessage);
          }
          input.ReadMessage(subBuilder);
          RdmMessage = subBuilder;
          break;
        }
        case 354: {
          global::RDMResponseMessage subBuilder = new global::RDMResponseMessage();
          if (payloadCase_ == PayloadOneofCase.RdmResponseMessage) {
            subBuilder.MergeFrom(RdmResponseMessage);
          }
          input.ReadMessage(subBuilder);
          RdmResponseMessage = subBuilder;
          break;
        }
        case 362: {
          global::LogicMultiMessage subBuilder = new global::LogicMultiMessage();
          if (payloadCase_ == PayloadOneofCase.LogicMessage) {
            subBuilder.MergeFrom(LogicMessage);
          }
          input.ReadMessage(subBuilder);
          LogicMessage = subBuilder;
          break;
        }
        case 370: {
          global::AdminSecureLoginMessage subBuilder = new global::AdminSecureLoginMessage();
          if (payloadCase_ == PayloadOneofCase.SecureLogin) {
            subBuilder.MergeFrom(SecureLogin);
          }
          input.ReadMessage(subBuilder);
          SecureLogin = subBuilder;
          break;
        }
        case 378: {
          global::DeviceStateMessage subBuilder = new global::DeviceStateMessage();
          if (payloadCase_ == PayloadOneofCase.DeviceStateMessage) {
            subBuilder.MergeFrom(DeviceStateMessage);
          }
          input.ReadMessage(subBuilder);
          DeviceStateMessage = subBuilder;
          break;
        }
        case 386: {
          global::SpektraCalendarDayMessage subBuilder = new global::SpektraCalendarDayMessage();
          if (payloadCase_ == PayloadOneofCase.SpektraCalendarDay) {
            subBuilder.MergeFrom(SpektraCalendarDay);
          }
          input.ReadMessage(subBuilder);
          SpektraCalendarDay = subBuilder;
          break;
        }
        case 394: {
          global::SpektraCalendarOverviewMessage subBuilder = new global::SpektraCalendarOverviewMessage();
          if (payloadCase_ == PayloadOneofCase.SpektraCalendarOverview) {
            subBuilder.MergeFrom(SpektraCalendarOverview);
          }
          input.ReadMessage(subBuilder);
          SpektraCalendarOverview = subBuilder;
          break;
        }
        case 402: {
          global::DALIInputMultiMessage subBuilder = new global::DALIInputMultiMessage();
          if (payloadCase_ == PayloadOneofCase.InputsDali) {
            subBuilder.MergeFrom(InputsDali);
          }
          input.ReadMessage(subBuilder);
          InputsDali = subBuilder;
          break;
        }
        case 410: {
          global::SystemLogReadMessage subBuilder = new global::SystemLogReadMessage();
          if (payloadCase_ == PayloadOneofCase.LogsRead) {
            subBuilder.MergeFrom(LogsRead);
          }
          input.ReadMessage(subBuilder);
          LogsRead = subBuilder;
          break;
        }
        case 418: {
          global::SystemMetaDataReadMessage subBuilder = new global::SystemMetaDataReadMessage();
          if (payloadCase_ == PayloadOneofCase.MetadataRead) {
            subBuilder.MergeFrom(MetadataRead);
          }
          input.ReadMessage(subBuilder);
          MetadataRead = subBuilder;
          break;
        }
        case 426: {
          global::DALIAddressingMessage subBuilder = new global::DALIAddressingMessage();
          if (payloadCase_ == PayloadOneofCase.DaliAddressingMessage) {
            subBuilder.MergeFrom(DaliAddressingMessage);
          }
          input.ReadMessage(subBuilder);
          DaliAddressingMessage = subBuilder;
          break;
        }
        case 434: {
          global::DALIRemappingMessage subBuilder = new global::DALIRemappingMessage();
          if (payloadCase_ == PayloadOneofCase.DaliRemappingMessage) {
            subBuilder.MergeFrom(DaliRemappingMessage);
          }
          input.ReadMessage(subBuilder);
          DaliRemappingMessage = subBuilder;
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
